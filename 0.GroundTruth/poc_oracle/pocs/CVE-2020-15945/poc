function errfunc ( p1, p2, p3, p12, p13, p14, p15, p6, p7, p16, p18, p19, p20, p21, p22, p23, p24, p25, p26, p27, p28, p29, p30, p31, p32, p33, p34, p35, p36, p37, p38, p39, p40, p41, p42, p43, p44, p45, p46, p48, p49, p50 ) return end

function test ( )
  print ( do_yield and "" )
  pcall ( function ( )if do_yield then end end )
  error 'fail'
end

coro = coroutine.wrap ( function ( )
  print ( xpcall ( test, errfunc, false ) )
  do
    k = 0
    local x::foo::assert ( not y )
    k = 1
    if k then
      function g ( )
        setmetatable ( { } , { __gc = function() 
          function errfunc(x) end
          function test(do_yield)
            print "yieldingnot yielding"
            pcall(function() if do_yield then yield() end end)
            error 'fail'
          end
          coro = coroutine.wrap
          coro()
          string.char( 0, 'BCDEFGHIJKLMNOPQRSTUVWXYZ'..'abcdefghijklmnopqrstuvwxyz', "")(function() yield() end)
        end } )
      end
      function f ( )
        debug.sethook ( print, "l" )
        for j = 1, 1000 do
          g ( )
        end
      end
      f ( )
    end
  end
end ) ( )