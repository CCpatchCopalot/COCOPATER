{
    "0": "-    if (info->size > info->num_sections * info->max_decomp_size) {\n-        LOG_ERROR (\"Invalid section %s size %lu > %u * \" FORMAT_RL, info->name, info->size, info->num_sections, info->max_decomp_size);\n\n+    if (info->size > info->num_sections * info->max_decomp_size || info->size < 0) {\n+        LOG_ERROR (\"Invalid section %s size %ld > %u * \" FORMAT_RL, info->name, info->size, info->num_sections, info->max_decomp_size);\n\n",
    "1": "-            BITCODE_RL size;\n-            if (info->compressed == 2 || bytes_left < 0 || (unsigned long)(es.fields.address + 32 + info->size > max_decomp_size)\n-               ) {\n-                LOG_ERROR (\"Some section size out of bounds\")\n\n+            const unsigned long offset = address + es.fields.address + 32;\n+            const BITCODE_RL size = M (info->size, info->max_decomp_size);\n+            if (info->compressed == 2 || bytes_left < 0 || (unsigned long)(es.fields.address + 32 + info->size > max_decomp_size) || (j * info->max_decomp_size) + size > max_decomp_size\n+                    || offset + size > dat->size) {\n+                LOG_ERROR (\"Some section size or address out of bounds\")\n\n-            const unsigned long offset = address + es.fields.address + 32;\n-            const BITCODE_RL size = M (info->size, info->max_decomp_size);\n-            if (info->compressed == 2 || bytes_left < 0 || (unsigned long)(es.fields.address + 32 + info->size > max_decomp_size) || (j * info->max_decomp_size) + size > max_decomp_size\n-                    || offset + size > dat->size) {\n-                LOG_ERROR (\"Some section size or address out of bounds\")\n\n+            BITCODE_RL size;\n+            if (info->compressed == 2 || bytes_left < 0 || (unsigned long)(es.fields.address + 32 + info->size > max_decomp_size)\n+               ) {\n+                LOG_ERROR (\"Some section size out of bounds\")\n\n-            assert (j < info->num_sections);\n-            memcpy (&decomp[j * info->max_decomp_size], &dat->chain[offset], size);\n\n+            size = M (info->size, info->max_decomp_size);\n+            memcpy (&decomp[j * info->max_decomp_size], &dat->chain[address + es.fields.address + 32], size);\n\n",
    "2": "-            size = M (info->size, info->max_decomp_size);\n-            memcpy (&decomp[j * info->max_decomp_size], &dat->chain[address + es.fields.address + 32], size);\n\n+            assert (j < info->num_sections);\n+            memcpy (&decomp[j * info->max_decomp_size], &dat->chain[offset], size);\n\n",
    "3": "-    if (info->size > info->num_sections * info->max_decomp_size || info->size < 0) {\n-        LOG_ERROR (\"Invalid section %s size %ld > %u * \" FORMAT_RL, info->name, info->size, info->num_sections, info->max_decomp_size);\n\n+    if (info->size > info->num_sections * info->max_decomp_size) {\n+        LOG_ERROR (\"Invalid section %s size %lu > %u * \" FORMAT_RL, info->name, info->size, info->num_sections, info->max_decomp_size);\n\n"
}