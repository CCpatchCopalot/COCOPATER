{
    "0": "-static void naludmx_create_vvc_decoder_config(GF_NALUDmxCtx *ctx, u8 **dsi, u32 *dsi_size, u8 **dsi_enh, u32 *dsi_enh_size, u32 *max_width, u32 *max_height, u32 *max_enh_width, u32 *max_enh_height,\n\n+static Bool naludmx_create_vvc_decoder_config(GF_NALUDmxCtx *ctx, u8 **dsi, u32 *dsi_size, u8 **dsi_enh, u32 *dsi_enh_size, u32 *max_width, u32 *max_height, u32 *max_enh_width, u32 *max_enh_height,\n\n-static Bool naludmx_create_vvc_decoder_config(GF_NALUDmxCtx *ctx, u8 **dsi, u32 *dsi_size, u8 **dsi_enh, u32 *dsi_enh_size, u32 *max_width, u32 *max_height, u32 *max_enh_width, u32 *max_enh_height,\n\n+static void naludmx_create_vvc_decoder_config(GF_NALUDmxCtx *ctx, u8 **dsi, u32 *dsi_size, u8 **dsi_enh, u32 *dsi_enh_size, u32 *max_width, u32 *max_height, u32 *max_enh_width, u32 *max_enh_height,\n\n+    cfg = gf_odf_vvc_cfg_new();\n+    cfg->nal_unit_size = ctx->nal_length;\n\n-    if (!count) {\n-        return GF_FALSE;\n-    }\n\n-    if (!count) {\n-        return GF_FALSE;\n-    }\n\n-    cfg = gf_odf_vvc_cfg_new();\n-    cfg->nal_unit_size = ctx->nal_length;\n\n-void naludmx_create_avc_decoder_config(GF_NALUDmxCtx *ctx, u8 **dsi, u32 *dsi_size, u8 **dsi_enh, u32 *dsi_enh_size, u32 *max_width, u32 *max_height, u32 *max_enh_width, u32 *max_enh_height,\n\n+Bool naludmx_create_avc_decoder_config(GF_NALUDmxCtx *ctx, u8 **dsi, u32 *dsi_size, u8 **dsi_enh, u32 *dsi_enh_size, u32 *max_width, u32 *max_height, u32 *max_enh_width, u32 *max_enh_height,\n\n-Bool naludmx_create_avc_decoder_config(GF_NALUDmxCtx *ctx, u8 **dsi, u32 *dsi_size, u8 **dsi_enh, u32 *dsi_enh_size, u32 *max_width, u32 *max_height, u32 *max_enh_width, u32 *max_enh_height,\n\n+void naludmx_create_avc_decoder_config(GF_NALUDmxCtx *ctx, u8 **dsi, u32 *dsi_size, u8 **dsi_enh, u32 *dsi_enh_size, u32 *max_width, u32 *max_height, u32 *max_enh_width, u32 *max_enh_height,\n\n-    if (!gf_list_count(ctx->sps) || !gf_list_count(ctx->pps)) {\n-        return GF_FALSE;\n-    }\n\n-static Bool naludmx_create_hevc_decoder_config(GF_NALUDmxCtx *ctx, u8 **dsi, u32 *dsi_size, u8 **dsi_enh, u32 *dsi_enh_size, u32 *max_width, u32 *max_height, u32 *max_enh_width, u32 *max_enh_height,\n\n+static void naludmx_create_hevc_decoder_config(GF_NALUDmxCtx *ctx, u8 **dsi, u32 *dsi_size, u8 **dsi_enh, u32 *dsi_enh_size, u32 *max_width, u32 *max_height, u32 *max_enh_width, u32 *max_enh_height,\n\n+    hvcc = gf_odf_hevc_cfg_new();\n+    lvcc = gf_odf_hevc_cfg_new();\n+    hvcc->nal_unit_size = ctx->nal_length;\n+    lvcc->nal_unit_size = ctx->nal_length;\n+    lvcc->is_lhvc = GF_TRUE;\n\n-    if (!count) {\n-        return GF_FALSE;\n-    }\n\n-    if (!count) {\n-        return GF_FALSE;\n-    }\n\n-    hvcc = gf_odf_hevc_cfg_new();\n-    lvcc = gf_odf_hevc_cfg_new();\n-    hvcc->nal_unit_size = ctx->nal_length;\n-    lvcc->nal_unit_size = ctx->nal_length;\n-    lvcc->is_lhvc = GF_TRUE;\n\n",
    "1": "-    cfg = gf_odf_vvc_cfg_new();\n-    cfg->nal_unit_size = ctx->nal_length;\n\n",
    "2": "+    if (!count) {\n+        return GF_FALSE;\n+    }\n\n",
    "3": "+    if (!count) {\n+        return GF_FALSE;\n+    }\n\n",
    "4": "+    cfg = gf_odf_vvc_cfg_new();\n+    cfg->nal_unit_size = ctx->nal_length;\n\n",
    "5": "+    return GF_TRUE;\n\n",
    "6": "-    return GF_TRUE;\n\n-    return GF_TRUE;\n\n-    return GF_TRUE;\n\n",
    "7": "+    if (!gf_list_count(ctx->sps) || !gf_list_count(ctx->pps)) {\n+        return GF_FALSE;\n+    }\n\n",
    "8": "+    return GF_TRUE;\n\n",
    "9": "-static void naludmx_create_hevc_decoder_config(GF_NALUDmxCtx *ctx, u8 **dsi, u32 *dsi_size, u8 **dsi_enh, u32 *dsi_enh_size, u32 *max_width, u32 *max_height, u32 *max_enh_width, u32 *max_enh_height,\n\n+static Bool naludmx_create_hevc_decoder_config(GF_NALUDmxCtx *ctx, u8 **dsi, u32 *dsi_size, u8 **dsi_enh, u32 *dsi_enh_size, u32 *max_width, u32 *max_height, u32 *max_enh_width, u32 *max_enh_height,\n\n",
    "10": "-    hvcc = gf_odf_hevc_cfg_new();\n-    lvcc = gf_odf_hevc_cfg_new();\n-    hvcc->nal_unit_size = ctx->nal_length;\n-    lvcc->nal_unit_size = ctx->nal_length;\n-    lvcc->is_lhvc = GF_TRUE;\n\n",
    "11": "+    if (!count) {\n+        return GF_FALSE;\n+    }\n\n",
    "12": "+    if (!count) {\n+        return GF_FALSE;\n+    }\n\n",
    "13": "+    hvcc = gf_odf_hevc_cfg_new();\n+    lvcc = gf_odf_hevc_cfg_new();\n+    hvcc->nal_unit_size = ctx->nal_length;\n+    lvcc->nal_unit_size = ctx->nal_length;\n+    lvcc->is_lhvc = GF_TRUE;\n\n",
    "14": "+    return GF_TRUE;\n\n",
    "15": "+        if (num_exp_tile_columns > VVC_MAX_TILE_COLS) {\n+            GF_LOG(GF_LOG_ERROR, GF_LOG_CODG, (\"[VVC] wrong num tile columns %d in PPS\\n\", num_exp_tile_columns));\n+            pps->sps_id=0;\n+            return -1;\n+        }\n+        if (num_exp_tile_rows > VVC_MAX_TILE_ROWS) {\n+            GF_LOG(GF_LOG_ERROR, GF_LOG_CODG, (\"[VVC] wrong num tile rows %d in PPS\\n\", num_exp_tile_rows));\n+            pps->sps_id=0;\n+            return -1;\n+        }\n\n",
    "16": "+            if (nb_ctb_left < nb_ctb_width) {\n+                pps->sps_id=0;\n+                return -1;\n+            }\n\n",
    "17": "+            if (pps->num_tile_cols > VVC_MAX_TILE_COLS) {\n+                pps->sps_id=0;\n+                return -1;\n+            }\n\n",
    "18": "+            if (pps->num_tile_cols >= VVC_MAX_TILE_COLS) {\n+                pps->sps_id=0;\n+                return -1;\n+            }\n\n",
    "19": "+            if (pps->num_tile_cols >= VVC_MAX_TILE_COLS) {\n+                pps->sps_id=0;\n+                return -1;\n+            }\n\n",
    "20": "+            if (nb_ctb_left < nb_ctb_height) {\n+                pps->sps_id=0;\n+                return -1;\n+            }\n\n",
    "21": "+            if (pps->num_tile_rows > VVC_MAX_TILE_ROWS) {\n+                pps->sps_id=0;\n+                return -1;\n+            }\n\n",
    "22": "+            if (pps->num_tile_rows >= VVC_MAX_TILE_ROWS) {\n+                pps->sps_id=0;\n+                return -1;\n+            }\n\n",
    "23": "+            if (pps->num_tile_rows >= VVC_MAX_TILE_ROWS) {\n+                pps->sps_id=0;\n+                return -1;\n+            }\n\n",
    "24": "-        if (num_exp_tile_columns > VVC_MAX_TILE_COLS) {\n-            GF_LOG(GF_LOG_ERROR, GF_LOG_CODG, (\"[VVC] wrong num tile columns %d in PPS\\n\", num_exp_tile_columns));\n-            pps->sps_id=0;\n-            return -1;\n-        }\n-        if (num_exp_tile_rows > VVC_MAX_TILE_ROWS) {\n-            GF_LOG(GF_LOG_ERROR, GF_LOG_CODG, (\"[VVC] wrong num tile rows %d in PPS\\n\", num_exp_tile_rows));\n-            pps->sps_id=0;\n-            return -1;\n-        }\n\n-            if (pps->num_tile_cols > VVC_MAX_TILE_COLS) {\n-                pps->sps_id=0;\n-                return -1;\n-            }\n\n-            if (pps->num_tile_cols >= VVC_MAX_TILE_COLS) {\n-                pps->sps_id=0;\n-                return -1;\n-            }\n\n-            if (pps->num_tile_cols >= VVC_MAX_TILE_COLS) {\n-                pps->sps_id=0;\n-                return -1;\n-            }\n\n-            if (pps->num_tile_rows > VVC_MAX_TILE_ROWS) {\n-                pps->sps_id=0;\n-                return -1;\n-            }\n\n-            if (pps->num_tile_rows >= VVC_MAX_TILE_ROWS) {\n-                pps->sps_id=0;\n-                return -1;\n-            }\n\n-            if (pps->num_tile_rows >= VVC_MAX_TILE_ROWS) {\n-                pps->sps_id=0;\n-                return -1;\n-            }\n\n",
    "25": "-            if (nb_ctb_left < nb_ctb_width) {\n-                pps->sps_id=0;\n-                return -1;\n-            }\n\n-            if (nb_ctb_left < nb_ctb_height) {\n-                pps->sps_id=0;\n-                return -1;\n-            }\n\n",
    "26": "+    Bool res;\n\n",
    "27": "-        naludmx_create_hevc_decoder_config(ctx, &dsi, &dsi_size, &dsi_enh, &dsi_enh_size, &w, &h, &ew, &eh, &sar, &has_hevc_base);\n\n+        res = naludmx_create_hevc_decoder_config(ctx, &dsi, &dsi_size, &dsi_enh, &dsi_enh_size, &w, &h, &ew, &eh, &sar, &has_hevc_base);\n\n-        naludmx_create_vvc_decoder_config(ctx, &dsi, &dsi_size, &dsi_enh, &dsi_enh_size, &w, &h, &ew, &eh, &sar, &has_hevc_base);\n\n+        res = naludmx_create_vvc_decoder_config(ctx, &dsi, &dsi_size, &dsi_enh, &dsi_enh_size, &w, &h, &ew, &eh, &sar, &has_hevc_base);\n\n-        naludmx_create_avc_decoder_config(ctx, &dsi, &dsi_size, &dsi_enh, &dsi_enh_size, &w, &h, &ew, &eh, &sar);\n\n+        res = naludmx_create_avc_decoder_config(ctx, &dsi, &dsi_size, &dsi_enh, &dsi_enh_size, &w, &h, &ew, &eh, &sar);\n+    }\n+    if (!res) {\n+        return;\n\n-        res = naludmx_create_hevc_decoder_config(ctx, &dsi, &dsi_size, &dsi_enh, &dsi_enh_size, &w, &h, &ew, &eh, &sar, &has_hevc_base);\n\n+        naludmx_create_hevc_decoder_config(ctx, &dsi, &dsi_size, &dsi_enh, &dsi_enh_size, &w, &h, &ew, &eh, &sar, &has_hevc_base);\n\n-        res = naludmx_create_vvc_decoder_config(ctx, &dsi, &dsi_size, &dsi_enh, &dsi_enh_size, &w, &h, &ew, &eh, &sar, &has_hevc_base);\n\n+        naludmx_create_vvc_decoder_config(ctx, &dsi, &dsi_size, &dsi_enh, &dsi_enh_size, &w, &h, &ew, &eh, &sar, &has_hevc_base);\n\n-        res = naludmx_create_avc_decoder_config(ctx, &dsi, &dsi_size, &dsi_enh, &dsi_enh_size, &w, &h, &ew, &eh, &sar);\n-    }\n-    if (!res) {\n-        return;\n\n+        naludmx_create_avc_decoder_config(ctx, &dsi, &dsi_size, &dsi_enh, &dsi_enh_size, &w, &h, &ew, &eh, &sar);\n\n",
    "28": "-    Bool res;\n\n"
}