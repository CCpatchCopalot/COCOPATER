{
    "0": "-            if (!blf_pull_logcontainer_into_memory(params, current_container_index)) {\n-                *err = WTAP_ERR_TERNAL;\n-                *err_info = ws_strdup_printf(\"blf_read_bytes_or_eof: cannot pull in container\");\n-                ws_debug(\"cannot pull in container\");\n\n+            if (!blf_pull_logcontainer_into_memory(params, current_container_index, err, err_info)) {\n\n-            if (!blf_pull_logcontainer_into_memory(params, current_container_index, err, err_info)) {\n\n+            if (!blf_pull_logcontainer_into_memory(params, current_container_index)) {\n+                *err = WTAP_ERR_TERNAL;\n+                *err_info = ws_strdup_printf(\"blf_read_bytes_or_eof: cannot pull in container\");\n+                ws_debug(\"cannot pull in container\");\n\n",
    "1": "-static gboolean blf_pull_logcontainer_into_memory(blf_params_t *params, guint index_log_container) {\n\n+static gboolean blf_pull_logcontainer_into_memory(blf_params_t *params, guint index_log_container, int *err, gchar **err_info) {\n\n",
    "2": "-        ws_debug(\"cannot pull an unknown log container into memory\");\n\n+        *err = WTAP_ERR_TERNAL;\n+        *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: index_log_container (%u) >= blf_data->log_containers->len (%u)\", index_log_container, blf_data->log_containers->len);\n\n-static gboolean blf_pull_logcontainer_into_memory(blf_params_t *params, guint index_log_container, int *err, gchar **err_info) {\n\n+static gboolean blf_pull_logcontainer_into_memory(blf_params_t *params, guint index_log_container) {\n\n-        *err = WTAP_ERR_DECOMPRESSION_NOT_SUPPORTED;\n-        *err_info = NULL;\n\n",
    "3": "-        int err = 0;\n-        gchar *err_info;\n-        file_seek(params->fh, tmp.infile_data_start, SEEK_SET, &err);\n-        if (err < 0) {\n-            ws_debug(\"cannot seek to start of log_container\");\n\n+        if (file_seek(params->fh, tmp.infile_data_start, SEEK_SET, err) == -1) {\n\n",
    "4": "-        guint64 data_length = (unsigned int)tmp.infile_length - (tmp.infile_data_start - tmp.infile_start_pos);\n-        if (!wtap_read_bytes_or_eof(params->fh, compressed_data, (unsigned int)data_length, &err, &err_info)) {\n-            ws_debug(\"cannot read compressed data\");\n\n+        if (tmp.infile_start_pos < 0) {\n+            *err = WTAP_ERR_TERNAL;\n+            *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: tmp.infile_start_pos (%\" G_GT64_FORMAT \") < 0\", tmp.infile_start_pos);\n+            return FALSE;\n+        }\n+        if (tmp.infile_data_start < (guint64)tmp.infile_start_pos) {\n+            *err = WTAP_ERR_TERNAL;\n+            *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: tmp.infile_data_start (%\" G_GUT64_FORMAT \") < tmp.infile_start_pos (%\" G_GT64_FORMAT \")\", tmp.infile_data_start, tmp.infile_start_pos);\n+            return FALSE;\n+        }\n+        if (tmp.infile_length < tmp.infile_data_start - (guint64)tmp.infile_start_pos) {\n+            *err = WTAP_ERR_TERNAL;\n+            *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: tmp.infile_length (%\" G_GUT64_FORMAT \") < (tmp.infile_data_start (%\" G_GUT64_FORMAT \") - tmp.infile_start_pos (%\" G_GT64_FORMAT\n+                                         \")) = %\" G_GUT64_FORMAT, tmp.infile_length, tmp.infile_data_start, tmp.infile_start_pos, tmp.infile_data_start - (guint64)tmp.infile_start_pos);\n+            return FALSE;\n+        }\n+        guint64 data_length = tmp.infile_length - (tmp.infile_data_start - (guint64)tmp.infile_start_pos);\n+        if (data_length > UT_MAX) {\n+            *err = WTAP_ERR_TERNAL;\n+            *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: data_length (%\" G_GUT64_FORMAT \") > UT_MAX\", data_length);\n+            return FALSE;\n+        }\n+        if (!wtap_read_bytes_or_eof(params->fh, compressed_data, (unsigned int)data_length, err, err_info)) {\n\n",
    "5": "+            *err = WTAP_ERR_TERNAL;\n+            if (infstream.msg != NULL) {\n+                *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: inflateInit failed for LogContainer %d, message\\\"%s\\\"\", index_log_container, infstream.msg);\n+            } else {\n+                *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: inflateInit failed for LogContainer %d\", index_log_container);\n+            }\n\n",
    "6": "+            switch (ret) {\n+            case Z_NEED_DICT:\n+                *err = WTAP_ERR_DECOMPRESS;\n+                *err_info = ws_strdup(\"preset dictionary needed\");\n+                break;\n+            case Z_STREAM_ERROR:\n+                *err = WTAP_ERR_DECOMPRESS;\n+                *err_info = (infstream.msg != NULL) ? ws_strdup(infstream.msg) : NULL;\n+                break;\n+            case Z_MEM_ERROR:\n+                *err = ENOMEM;\n+                *err_info = NULL;\n+                break;\n+            case Z_DATA_ERROR:\n+                *err = WTAP_ERR_DECOMPRESS;\n+                *err_info = (infstream.msg != NULL) ? ws_strdup(infstream.msg) : NULL;\n+                break;\n+            case Z_BUF_ERROR:\n+                *err = WTAP_ERR_TERNAL;\n+                *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: Z_BUF_ERROR from inflate(), message \\\"%s\\\"\", (infstream.msg != NULL) ? infstream.msg : \"(none)\");\n+                break;\n+            case Z_VERSION_ERROR:\n+                *err = WTAP_ERR_TERNAL;\n+                *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: Z_VERSION_ERROR from inflate(), message \\\"%s\\\"\", (infstream.msg != NULL) ? infstream.msg : \"(none)\");\n+                break;\n+            default:\n+                *err = WTAP_ERR_TERNAL;\n+                *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: unexpected error %d from inflate(), message \\\"%s\\\"\", ret, (infstream.msg != NULL) ? infstream.msg : \"(none)\");\n+                break;\n+            }\n\n",
    "7": "+            *err = WTAP_ERR_DECOMPRESS;\n+            *err_info = (infstream.msg != NULL) ? ws_strdup(infstream.msg) : NULL;\n\n",
    "8": "+        *err = WTAP_ERR_DECOMPRESSION_NOT_SUPPORTED;\n+        *err_info = NULL;\n\n",
    "9": "-        *err = WTAP_ERR_TERNAL;\n-        *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: index_log_container (%u) >= blf_data->log_containers->len (%u)\", index_log_container, blf_data->log_containers->len);\n\n+        ws_debug(\"cannot pull an unknown log container into memory\");\n\n",
    "10": "-        if (file_seek(params->fh, tmp.infile_data_start, SEEK_SET, err) == -1) {\n\n+        int err = 0;\n+        gchar *err_info;\n+        file_seek(params->fh, tmp.infile_data_start, SEEK_SET, &err);\n+        if (err < 0) {\n+            ws_debug(\"cannot seek to start of log_container\");\n\n",
    "11": "-        if (tmp.infile_start_pos < 0) {\n-            *err = WTAP_ERR_TERNAL;\n-            *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: tmp.infile_start_pos (%\" G_GT64_FORMAT \") < 0\", tmp.infile_start_pos);\n-            return FALSE;\n-        }\n-        if (tmp.infile_data_start < (guint64)tmp.infile_start_pos) {\n-            *err = WTAP_ERR_TERNAL;\n-            *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: tmp.infile_data_start (%\" G_GUT64_FORMAT \") < tmp.infile_start_pos (%\" G_GT64_FORMAT \")\", tmp.infile_data_start, tmp.infile_start_pos);\n-            return FALSE;\n-        }\n-        if (tmp.infile_length < tmp.infile_data_start - (guint64)tmp.infile_start_pos) {\n-            *err = WTAP_ERR_TERNAL;\n-            *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: tmp.infile_length (%\" G_GUT64_FORMAT \") < (tmp.infile_data_start (%\" G_GUT64_FORMAT \") - tmp.infile_start_pos (%\" G_GT64_FORMAT\n-                                         \")) = %\" G_GUT64_FORMAT, tmp.infile_length, tmp.infile_data_start, tmp.infile_start_pos, tmp.infile_data_start - (guint64)tmp.infile_start_pos);\n-            return FALSE;\n-        }\n-        guint64 data_length = tmp.infile_length - (tmp.infile_data_start - (guint64)tmp.infile_start_pos);\n-        if (data_length > UT_MAX) {\n-            *err = WTAP_ERR_TERNAL;\n-            *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: data_length (%\" G_GUT64_FORMAT \") > UT_MAX\", data_length);\n-            return FALSE;\n-        }\n-        if (!wtap_read_bytes_or_eof(params->fh, compressed_data, (unsigned int)data_length, err, err_info)) {\n\n+        guint64 data_length = (unsigned int)tmp.infile_length - (tmp.infile_data_start - tmp.infile_start_pos);\n+        if (!wtap_read_bytes_or_eof(params->fh, compressed_data, (unsigned int)data_length, &err, &err_info)) {\n+            ws_debug(\"cannot read compressed data\");\n\n",
    "12": "-            *err = WTAP_ERR_TERNAL;\n-            if (infstream.msg != NULL) {\n-                *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: inflateInit failed for LogContainer %d, message\\\"%s\\\"\", index_log_container, infstream.msg);\n-            } else {\n-                *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: inflateInit failed for LogContainer %d\", index_log_container);\n-            }\n\n",
    "13": "-            switch (ret) {\n-            case Z_NEED_DICT:\n-                *err = WTAP_ERR_DECOMPRESS;\n-                *err_info = ws_strdup(\"preset dictionary needed\");\n-                break;\n-            case Z_STREAM_ERROR:\n-                *err = WTAP_ERR_DECOMPRESS;\n-                *err_info = (infstream.msg != NULL) ? ws_strdup(infstream.msg) : NULL;\n-                break;\n-            case Z_MEM_ERROR:\n-                *err = ENOMEM;\n-                *err_info = NULL;\n-                break;\n-            case Z_DATA_ERROR:\n-                *err = WTAP_ERR_DECOMPRESS;\n-                *err_info = (infstream.msg != NULL) ? ws_strdup(infstream.msg) : NULL;\n-                break;\n-            case Z_BUF_ERROR:\n-                *err = WTAP_ERR_TERNAL;\n-                *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: Z_BUF_ERROR from inflate(), message \\\"%s\\\"\", (infstream.msg != NULL) ? infstream.msg : \"(none)\");\n-                break;\n-            case Z_VERSION_ERROR:\n-                *err = WTAP_ERR_TERNAL;\n-                *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: Z_VERSION_ERROR from inflate(), message \\\"%s\\\"\", (infstream.msg != NULL) ? infstream.msg : \"(none)\");\n-                break;\n-            default:\n-                *err = WTAP_ERR_TERNAL;\n-                *err_info = ws_strdup_printf(\"blf_pull_logcontainer_into_memory: unexpected error %d from inflate(), message \\\"%s\\\"\", ret, (infstream.msg != NULL) ? infstream.msg : \"(none)\");\n-                break;\n-            }\n\n-            *err = WTAP_ERR_DECOMPRESS;\n-            *err_info = (infstream.msg != NULL) ? ws_strdup(infstream.msg) : NULL;\n\n"
}