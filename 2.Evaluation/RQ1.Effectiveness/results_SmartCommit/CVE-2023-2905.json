{
    "0": "-static uint32_t decode_variable_length(const char *buf, uint32_t *bytes_consumed) {\n-    uint32_t value = 0, multiplier = 1, offset;\n-    for (offset = 0; offset < 4; offset++) {\n-        uint8_t encoded_byte = ((uint8_t *) buf)[offset];\n-        value += (encoded_byte & 0x7F) * multiplier;\n\n+static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {\n+    uint32_t multiplier = 1;\n+    size_t offset;\n+    *value = 0;\n+    for (offset = 0; offset < 4 && offset < len; offset++) {\n+        uint8_t encoded_byte = buf[offset];\n+        *value += (encoded_byte & 0x7F) * multiplier;\n\n-            break;\n-        }\n\n+            return offset + 1;\n\n-    if (bytes_consumed != NULL) {\n-        *bytes_consumed = offset + 1;\n\n-    return value;\n\n+    return 0;\n\n-static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {\n-    uint32_t multiplier = 1;\n-    size_t offset;\n-    *value = 0;\n-    for (offset = 0; offset < 4 && offset < len; offset++) {\n-        uint8_t encoded_byte = buf[offset];\n-        *value += (encoded_byte & 0x7F) * multiplier;\n\n+static uint32_t decode_variable_length(const char *buf, uint32_t *bytes_consumed) {\n+    uint32_t value = 0, multiplier = 1, offset;\n+    for (offset = 0; offset < 4; offset++) {\n+        uint8_t encoded_byte = ((uint8_t *) buf)[offset];\n+        value += (encoded_byte & 0x7F) * multiplier;\n\n-            return offset + 1;\n\n+            break;\n\n-    return 0;\n\n+    if (bytes_consumed != NULL) {\n+        *bytes_consumed = offset + 1;\n+    }\n+    return value;\n\n-static uint32_t decode_variable_length(const char *buf, uint32_t *bytes_consumed) {\n-    uint32_t value = 0, multiplier = 1, offset;\n-    for (offset = 0; offset < 4; offset++) {\n-        uint8_t encoded_byte = ((uint8_t *) buf)[offset];\n-        value += (encoded_byte & 0x7F) * multiplier;\n\n+static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {\n+    uint32_t multiplier = 1;\n+    size_t offset;\n+    *value = 0;\n+    for (offset = 0; offset < 4 && offset < len; offset++) {\n+        uint8_t encoded_byte = buf[offset];\n+        *value += (encoded_byte & 0x7F) * multiplier;\n\n-            break;\n-        }\n\n+            return offset + 1;\n\n-    if (bytes_consumed != NULL) {\n-        *bytes_consumed = offset + 1;\n\n-    return value;\n\n+    return 0;\n\n-static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {\n-    uint32_t multiplier = 1;\n-    size_t offset;\n-    *value = 0;\n-    for (offset = 0; offset < 4 && offset < len; offset++) {\n-        uint8_t encoded_byte = buf[offset];\n-        *value += (encoded_byte & 0x7F) * multiplier;\n\n+static uint32_t decode_variable_length(const char *buf, uint32_t *bytes_consumed) {\n+    uint32_t value = 0, multiplier = 1, offset;\n+    for (offset = 0; offset < 4; offset++) {\n+        uint8_t encoded_byte = ((uint8_t *) buf)[offset];\n+        value += (encoded_byte & 0x7F) * multiplier;\n\n-            return offset + 1;\n\n+            break;\n\n-    return 0;\n\n+    if (bytes_consumed != NULL) {\n+        *bytes_consumed = offset + 1;\n+    }\n+    return value;\n\n",
    "1": "-    size_t new_pos = ofs;\n-    uint32_t bytes_consumed;\n\n+    uint8_t *end = (uint8_t *) msg->dgram.ptr + msg->dgram.len;\n+    size_t new_pos = ofs, len;\n\n-        prop->iv = decode_variable_length((char *) i, &bytes_consumed);\n-        new_pos += bytes_consumed;\n\n+        len = decode_varint(i, (size_t) (end - i), (size_t *) &prop->iv);\n+        new_pos = (!len) ? 0 : new_pos + len;\n\n-    uint8_t *end = (uint8_t *) msg->dgram.ptr + msg->dgram.len;\n-    size_t new_pos = ofs, len;\n\n+    size_t new_pos = ofs;\n+    uint32_t bytes_consumed;\n\n-        len = decode_varint(i, (size_t) (end - i), (size_t *) &prop->iv);\n-        new_pos = (!len) ? 0 : new_pos + len;\n\n+        prop->iv = decode_variable_length((char *) i, &bytes_consumed);\n+        new_pos += bytes_consumed;\n\n-    size_t new_pos = ofs;\n-    uint32_t bytes_consumed;\n\n+    uint8_t *end = (uint8_t *) msg->dgram.ptr + msg->dgram.len;\n+    size_t new_pos = ofs, len;\n\n-        prop->iv = decode_variable_length((char *) i, &bytes_consumed);\n-        new_pos += bytes_consumed;\n\n+        len = decode_varint(i, (size_t) (end - i), (size_t *) &prop->iv);\n+        new_pos = (!len) ? 0 : new_pos + len;\n\n-    uint8_t *end = (uint8_t *) msg->dgram.ptr + msg->dgram.len;\n-    size_t new_pos = ofs, len;\n\n+    size_t new_pos = ofs;\n+    uint32_t bytes_consumed;\n\n-        len = decode_varint(i, (size_t) (end - i), (size_t *) &prop->iv);\n-        new_pos = (!len) ? 0 : new_pos + len;\n\n+        prop->iv = decode_variable_length((char *) i, &bytes_consumed);\n+        new_pos += bytes_consumed;\n\n",
    "2": "-            m->props_size = decode_variable_length((char *) p, &len_len);\n\n+            len_len = (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);\n+            if (!len_len) {\n+                return MQTT_MALFORMED;\n+            }\n\n-            len_len = (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);\n-            if (!len_len) {\n-                return MQTT_MALFORMED;\n-            }\n\n+            m->props_size = decode_variable_length((char *) p, &len_len);\n\n-            m->props_size = decode_variable_length((char *) p, &len_len);\n\n+            len_len = (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);\n+            if (!len_len) {\n+                return MQTT_MALFORMED;\n+            }\n\n-            len_len = (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);\n-            if (!len_len) {\n-                return MQTT_MALFORMED;\n-            }\n\n+            m->props_size = decode_variable_length((char *) p, &len_len);\n\n"
}