{
    "0": "-                if (parms == 3) {\n\n+                if (width > 0 && height > 0 && parms == 3) {\n\n",
    "1": "-                if (width > 0 && height > 0 && parms == 3) {\n\n+                if (parms == 3) {\n\n",
    "2": "-                    fread(bmm->bmm_pLDRMemPtr,sizeof(UBYTE),width * height * bmm->bmm_usDepth, bmm->bmm_pLDRSource);\n\n+                    ssize_t cnt = fread(bmm->bmm_pLDRMemPtr,sizeof(UBYTE),width * height * bmm->bmm_usDepth, bmm->bmm_pLDRSource);\n+                    if (cnt != width * height * bmm->bmm_usDepth) {\n+                        return JPGERR_UNEXPECTED_EOF;\n+                    }\n\n-                        fread(bmm->bmm_pMemPtr,bmm->bmm_ucPixelType & CTYP_SIZE_MASK, width * height * bmm->bmm_usDepth,bmm->bmm_pSource);\n\n+                        ssize_t cnt = fread(bmm->bmm_pMemPtr,bmm->bmm_ucPixelType & CTYP_SIZE_MASK, width * height * bmm->bmm_usDepth,bmm->bmm_pSource);\n+                        if (cnt != width * height * bmm->bmm_usDepth) {\n+                            return JPGERR_UNEXPECTED_EOF;\n+                        }\n\n-                    ssize_t cnt = fread(bmm->bmm_pLDRMemPtr,sizeof(UBYTE),width * height * bmm->bmm_usDepth, bmm->bmm_pLDRSource);\n-                    if (cnt != width * height * bmm->bmm_usDepth) {\n-                        return JPGERR_UNEXPECTED_EOF;\n-                    }\n\n+                    fread(bmm->bmm_pLDRMemPtr,sizeof(UBYTE),width * height * bmm->bmm_usDepth, bmm->bmm_pLDRSource);\n\n-                        ssize_t cnt = fread(bmm->bmm_pMemPtr,bmm->bmm_ucPixelType & CTYP_SIZE_MASK, width * height * bmm->bmm_usDepth,bmm->bmm_pSource);\n-                        if (cnt != width * height * bmm->bmm_usDepth) {\n-                            return JPGERR_UNEXPECTED_EOF;\n-                        }\n\n+                        fread(bmm->bmm_pMemPtr,bmm->bmm_ucPixelType & CTYP_SIZE_MASK, width * height * bmm->bmm_usDepth,bmm->bmm_pSource);\n\n-        hook->CallLong(tags);\n\n+        if (hook) {\n+            LONG result = hook->CallLong(tags);\n+            if (result < 0) {\n+                comp->EnvironOf()->Throw(result,\"BitmapHook::Release\",__LE__,__FILE__,\"BitMapHook signalled an error\");\n+            }\n+        }\n\n-        if (hook) {\n-            LONG result = hook->CallLong(tags);\n-            if (result < 0) {\n-                comp->EnvironOf()->Throw(result,\"BitmapHook::Release\",__LE__,__FILE__,\"BitMapHook signalled an error\");\n-            }\n-        }\n\n+        hook->CallLong(tags);\n\n-        hook->CallLong(tags);\n\n+        LONG result = hook->CallLong(tags);\n+        if (result < 0) {\n+            comp->EnvironOf()->Throw(result,\"BitmapHook::Request\",__LE__,__FILE__,\"BitMapHook signalled an error\");\n+        }\n\n-        LONG result = hook->CallLong(tags);\n-        if (result < 0) {\n-            comp->EnvironOf()->Throw(result,\"BitmapHook::Request\",__LE__,__FILE__,\"BitMapHook signalled an error\");\n-        }\n\n+        hook->CallLong(tags);\n\n-                        fread(bmm->bmm_pAlphaPtr,bmm->bmm_ucAlphaType & CTYP_SIZE_MASK, bmm->bmm_ulWidth * height,bmm->bmm_pAlphaSource);\n\n+                        ssize_t cnt = fread(bmm->bmm_pAlphaPtr,bmm->bmm_ucAlphaType & CTYP_SIZE_MASK, bmm->bmm_ulWidth * height,bmm->bmm_pAlphaSource);\n+                        if (cnt != bmm->bmm_ulWidth * height) {\n+                            return JPGERR_UNEXPECTED_EOF;\n+                        }\n\n-                        ssize_t cnt = fread(bmm->bmm_pAlphaPtr,bmm->bmm_ucAlphaType & CTYP_SIZE_MASK, bmm->bmm_ulWidth * height,bmm->bmm_pAlphaSource);\n-                        if (cnt != bmm->bmm_ulWidth * height) {\n-                            return JPGERR_UNEXPECTED_EOF;\n-                        }\n\n+                        fread(bmm->bmm_pAlphaPtr,bmm->bmm_ucAlphaType & CTYP_SIZE_MASK, bmm->bmm_ulWidth * height,bmm->bmm_pAlphaSource);\n\n"
}