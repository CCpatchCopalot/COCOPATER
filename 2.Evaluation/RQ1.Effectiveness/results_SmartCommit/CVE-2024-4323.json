{
    "0": "-static int disable_trace_input(struct flb_hs *hs, const char *name) {\n\n+static int disable_trace_input(struct flb_hs *hs, const char *name, size_t nlen) {\n\n-    in = find_input(hs, name);\n\n+    in = find_input(hs, name, nlen);\n\n-static int disable_trace_input(struct flb_hs *hs, const char *name, size_t nlen) {\n\n+static int disable_trace_input(struct flb_hs *hs, const char *name) {\n\n-    in = find_input(hs, name, nlen);\n\n+    in = find_input(hs, name);\n\n-static int enable_trace_input(struct flb_hs *hs, const char *name, const char *prefix, const char *output_name, struct mk_list *props) {\n\n+static int enable_trace_input(struct flb_hs *hs, const char *name, ssize_t nlen, const char *prefix, const char *output_name, struct mk_list *props) {\n\n-    in = find_input(hs, name);\n\n+    in = find_input(hs, name, nlen);\n\n-    return (in->chunk_trace_ctxt == NULL ? 503 : 0);\n\n+    if (in->chunk_trace_ctxt == NULL) {\n+        flb_error(\"unable to start tracing\");\n+        return 503;\n+    }\n+    return 0;\n\n-static int enable_trace_input(struct flb_hs *hs, const char *name, ssize_t nlen, const char *prefix, const char *output_name, struct mk_list *props) {\n\n+static int enable_trace_input(struct flb_hs *hs, const char *name, const char *prefix, const char *output_name, struct mk_list *props) {\n\n-    in = find_input(hs, name, nlen);\n\n+    in = find_input(hs, name);\n\n-        flb_error(\"unable to find input: [%d]%.*s\", (int)nlen, (int)nlen, name);\n\n-    if (in->chunk_trace_ctxt == NULL) {\n-        flb_error(\"unable to start tracing\");\n-        return 503;\n-    }\n-    return 0;\n\n+    return (in->chunk_trace_ctxt == NULL ? 503 : 0);\n\n-    if (request->real_path.len < strlen(base)) {\n\n+    if (request->real_path.len < sizeof(base)-1) {\n\n-    return flb_sds_create_len(&request->real_path.data[strlen(base)], request->real_path.len - strlen(base));\n\n+    return flb_sds_create_len(&request->real_path.data[sizeof(base)-1], request->real_path.len - sizeof(base)-1);\n\n-    if (request->real_path.len < sizeof(base)-1) {\n\n+    if (request->real_path.len < strlen(base)) {\n\n-    return flb_sds_create_len(&request->real_path.data[sizeof(base)-1], request->real_path.len - sizeof(base)-1);\n\n+    return flb_sds_create_len(&request->real_path.data[strlen(base)], request->real_path.len - strlen(base));\n\n-static struct flb_input_instance *find_input(struct flb_hs *hs, const char *name) {\n\n+#define STR_PUTS \"inputs\"\n+#define STR_PUTS_LEN (sizeof(STR_PUTS)-1)\n+#define HTTP_FIELD_MESSAGE        \"message\"\n+#define HTTP_FIELD_MESSAGE_LEN    (sizeof(HTTP_FIELD_MESSAGE)-1)\n+#define HTTP_FIELD_STATUS         \"status\"\n+#define HTTP_FIELD_STATUS_LEN     (sizeof(HTTP_FIELD_STATUS)-1)\n+#define HTTP_FIELD_RETURNCODE     \"returncode\"\n+#define HTTP_FIELD_RETURNCODE_LEN (sizeof(HTTP_FIELD_RETURNCODE)-1)\n+#define HTTP_RESULT_OK                   \"ok\"\n+#define HTTP_RESULT_OK_LEN               (sizeof(HTTP_RESULT_OK)-1)\n+#define HTTP_RESULT_ERROR                \"error\"\n+#define HTTP_RESULT_ERROR_LEN            (sizeof(HTTP_RESULT_ERROR)-1)\n+#define HTTP_RESULT_NOTFOUND             \"not found\"\n+#define HTTP_RESULT_NOTFOUND_LEN         (sizeof(HTTP_RESULT_NOTFOUND)-1)\n+#define HTTP_RESULT_METHODNOTALLOWED     \"method not allowed\"\n+#define HTTP_RESULT_METHODNOTALLOWED_LEN (sizeof(HTTP_RESULT_METHODNOTALLOWED)-1)\n+#define HTTP_RESULT_UNKNOWNERROR         \"unknown error\"\n+#define HTTP_RESULT_UNKNOWNERROR_LEN     (sizeof(HTTP_RESULT_UNKNOWNERROR)-1)\n+static struct flb_input_instance *find_input(struct flb_hs *hs, const char *name, size_t nlen) {\n\n-        if (strcmp(name, in->name) == 0) {\n\n+        if (strlen(in->name) != nlen) {\n+            continue;\n+        }\n+        if (strncmp(name, in->name, nlen) == 0) {\n\n-        if (strlen(in->name) != nlen) {\n-            continue;\n-        }\n-        if (strncmp(name, in->name, nlen) == 0) {\n\n+        if (strcmp(name, in->name) == 0) {\n\n-        response = http_enable_trace(request, data, input_name, &mp_pck);\n\n+        response = http_enable_trace(request, data, input_name, flb_sds_len(input_name), &mp_pck);\n\n-        response = http_disable_trace(request, data, input_name, &mp_pck);\n\n+        response = http_disable_trace(request, data, input_name, flb_sds_len(input_name), &mp_pck);\n\n-        msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n-        msgpack_pack_str_with_body(&mp_pck, \"not found\", strlen(\"not found\"));\n\n+        msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n+        msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_NOTFOUND, HTTP_RESULT_NOTFOUND_LEN);\n\n-        msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n-        msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));\n\n+        msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n+        msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);\n\n-        response = http_enable_trace(request, data, input_name, flb_sds_len(input_name), &mp_pck);\n\n+        response = http_enable_trace(request, data, input_name, &mp_pck);\n\n-        response = http_disable_trace(request, data, input_name, flb_sds_len(input_name), &mp_pck);\n\n+        response = http_disable_trace(request, data, input_name, &mp_pck);\n\n-        msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n-        msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_NOTFOUND, HTTP_RESULT_NOTFOUND_LEN);\n\n+        msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n+        msgpack_pack_str_with_body(&mp_pck, \"not found\", strlen(\"not found\"));\n\n-        msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n-        msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);\n\n+        msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n+        msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));\n\n-    flb_sds_t input_name;\n\n+    const char *input_name;\n+    ssize_t input_nlen;\n\n-        if (result.data.via.map.ptr[i].key.via.str.size < strlen(\"inputs\")) {\n\n+        if (result.data.via.map.ptr[i].key.via.str.size < STR_PUTS_LEN) {\n\n-        if (strncmp(result.data.via.map.ptr[i].key.via.str.ptr, \"inputs\", strlen(\"inputs\"))) {\n\n+        if (strncmp(result.data.via.map.ptr[i].key.via.str.ptr, STR_PUTS, STR_PUTS_LEN)) {\n\n-    msgpack_pack_str_with_body(&mp_pck, \"inputs\", strlen(\"inputs\"));\n\n+    msgpack_pack_str_with_body(&mp_pck, STR_PUTS, STR_PUTS_LEN);\n\n-        input_name = flb_sds_create_len(inputs->ptr[i].via.str.ptr, inputs->ptr[i].via.str.size);\n-        msgpack_pack_str_with_body(&mp_pck, input_name, flb_sds_len(input_name));\n-        if (inputs->ptr[i].type != MSGPACK_OBJECT_STR) {\n-            msgpack_pack_map(&mp_pck, 1);\n-            msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n-            msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));\n-        } else {\n-            if (request->method == MK_METHOD_POST || request->method == MK_METHOD_GET) {\n-                ret = msgpack_params_enable_trace((struct flb_hs *)data, &result, input_name);\n\n+        if (inputs->ptr[i].type != MSGPACK_OBJECT_STR || inputs->ptr[i].via.str.ptr == NULL) {\n+            response = 503;\n+            error_msg = flb_sds_create(\"invalid input\");\n+            msgpack_sbuffer_clear(&mp_sbuf);\n+            goto unpack_error;\n+        }\n+    }\n+    for (i = 0; i < inputs->size; i++) {\n+        input_name = inputs->ptr[i].via.str.ptr;\n+        input_nlen = inputs->ptr[i].via.str.size;\n+        msgpack_pack_str_with_body(&mp_pck, input_name, input_nlen);\n+        if (request->method == MK_METHOD_POST) {\n+            ret = msgpack_params_enable_trace((struct flb_hs *)data, &result, input_name, input_nlen);\n\n-                    msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n-                    msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));\n-                    msgpack_pack_str_with_body(&mp_pck, \"returncode\", strlen(\"returncode\"));\n\n+                msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n+                msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);\n+                msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_RETURNCODE, HTTP_FIELD_RETURNCODE_LEN);\n\n-                    msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n-                    msgpack_pack_str_with_body(&mp_pck, \"ok\", strlen(\"ok\"));\n\n+                msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n+                msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);\n\n-                disable_trace_input((struct flb_hs *)data, input_name);\n\n+            disable_trace_input((struct flb_hs *)data, input_name, input_nlen);\n+            msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n+            msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);\n\n-                msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n-                msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));\n-                msgpack_pack_str_with_body(&mp_pck, \"message\", strlen(\"message\"));\n-                msgpack_pack_str_with_body(&mp_pck, \"method not allowed\", strlen(\"method not allowed\"));\n-            }\n\n+            msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n+            msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);\n+            msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_MESSAGE, HTTP_FIELD_MESSAGE_LEN);\n+            msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_METHODNOTALLOWED, HTTP_RESULT_METHODNOTALLOWED_LEN);\n\n-        msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n-        msgpack_pack_str_with_body(&mp_pck, \"not found\", strlen(\"not found\"));\n\n+        msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n+        msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_NOTFOUND, HTTP_RESULT_NOTFOUND_LEN);\n\n-        msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n-        msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));\n-        msgpack_pack_str_with_body(&mp_pck, \"message\", strlen(\"message\"));\n\n+        msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n+        msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);\n+        msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_MESSAGE, HTTP_FIELD_MESSAGE_LEN);\n\n-            msgpack_pack_str_with_body(&mp_pck, \"unknown error\", strlen(\"unknown error\"));\n\n+            msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_UNKNOWNERROR, HTTP_RESULT_UNKNOWNERROR_LEN);\n\n-        msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n-        msgpack_pack_str_with_body(&mp_pck, \"ok\", strlen(\"ok\"));\n\n+        msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n+        msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);\n\n-    const char *input_name;\n-    ssize_t input_nlen;\n\n+    flb_sds_t input_name;\n\n-        if (result.data.via.map.ptr[i].key.via.str.size < STR_PUTS_LEN) {\n\n+        if (result.data.via.map.ptr[i].key.via.str.size < strlen(\"inputs\")) {\n\n-        if (strncmp(result.data.via.map.ptr[i].key.via.str.ptr, STR_PUTS, STR_PUTS_LEN)) {\n\n+        if (strncmp(result.data.via.map.ptr[i].key.via.str.ptr, \"inputs\", strlen(\"inputs\"))) {\n\n-    msgpack_pack_str_with_body(&mp_pck, STR_PUTS, STR_PUTS_LEN);\n\n+    msgpack_pack_str_with_body(&mp_pck, \"inputs\", strlen(\"inputs\"));\n\n-        if (inputs->ptr[i].type != MSGPACK_OBJECT_STR || inputs->ptr[i].via.str.ptr == NULL) {\n-            response = 503;\n-            error_msg = flb_sds_create(\"invalid input\");\n-            msgpack_sbuffer_clear(&mp_sbuf);\n-            goto unpack_error;\n-        }\n-    }\n-    for (i = 0; i < inputs->size; i++) {\n-        input_name = inputs->ptr[i].via.str.ptr;\n-        input_nlen = inputs->ptr[i].via.str.size;\n-        msgpack_pack_str_with_body(&mp_pck, input_name, input_nlen);\n-        if (request->method == MK_METHOD_POST) {\n-            ret = msgpack_params_enable_trace((struct flb_hs *)data, &result, input_name, input_nlen);\n\n+        input_name = flb_sds_create_len(inputs->ptr[i].via.str.ptr, inputs->ptr[i].via.str.size);\n+        msgpack_pack_str_with_body(&mp_pck, input_name, flb_sds_len(input_name));\n+        if (inputs->ptr[i].type != MSGPACK_OBJECT_STR) {\n+            msgpack_pack_map(&mp_pck, 1);\n+            msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n+            msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));\n+        } else {\n+            if (request->method == MK_METHOD_POST || request->method == MK_METHOD_GET) {\n+                ret = msgpack_params_enable_trace((struct flb_hs *)data, &result, input_name);\n\n-                msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n-                msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);\n-                msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_RETURNCODE, HTTP_FIELD_RETURNCODE_LEN);\n\n+                    msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n+                    msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));\n+                    msgpack_pack_str_with_body(&mp_pck, \"returncode\", strlen(\"returncode\"));\n\n-                msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n-                msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);\n\n+                    msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n+                    msgpack_pack_str_with_body(&mp_pck, \"ok\", strlen(\"ok\"));\n\n-            disable_trace_input((struct flb_hs *)data, input_name, input_nlen);\n-            msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n-            msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);\n\n+                disable_trace_input((struct flb_hs *)data, input_name);\n\n-            msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n-            msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_ERROR, HTTP_RESULT_ERROR_LEN);\n-            msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_MESSAGE, HTTP_FIELD_MESSAGE_LEN);\n-            msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_METHODNOTALLOWED, HTTP_RESULT_METHODNOTALLOWED_LEN);\n\n+                msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n+                msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));\n+                msgpack_pack_str_with_body(&mp_pck, \"message\", strlen(\"message\"));\n+                msgpack_pack_str_with_body(&mp_pck, \"method not allowed\", strlen(\"method not allowed\"));\n+            }\n\n-        msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n-        msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_NOTFOUND, HTTP_RESULT_NOTFOUND_LEN);\n\n+        msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n+        msgpack_pack_str_with_body(&mp_pck, \"not found\", strlen(\"not found\"));\n\n-        msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n-        msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);\n-        msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_MESSAGE, HTTP_FIELD_MESSAGE_LEN);\n\n+        msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n+        msgpack_pack_str_with_body(&mp_pck, \"error\", strlen(\"error\"));\n+        msgpack_pack_str_with_body(&mp_pck, \"message\", strlen(\"message\"));\n\n-            msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_UNKNOWNERROR, HTTP_RESULT_UNKNOWNERROR_LEN);\n\n+            msgpack_pack_str_with_body(&mp_pck, \"unknown error\", strlen(\"unknown error\"));\n\n-        msgpack_pack_str_with_body(&mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n-        msgpack_pack_str_with_body(&mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);\n\n+        msgpack_pack_str_with_body(&mp_pck, \"status\", strlen(\"status\"));\n+        msgpack_pack_str_with_body(&mp_pck, \"ok\", strlen(\"ok\"));\n\n-static int msgpack_params_enable_trace(struct flb_hs *hs, msgpack_unpacked *result, const char *input_name) {\n\n+static int msgpack_params_enable_trace(struct flb_hs *hs, msgpack_unpacked *result, const char *input_name, ssize_t input_nlen) {\n\n-        toggled_on = enable_trace_input(hs, input_name, prefix, output_name, props);\n\n+        toggled_on = enable_trace_input(hs, input_name, input_nlen, prefix, output_name, props);\n\n-static int msgpack_params_enable_trace(struct flb_hs *hs, msgpack_unpacked *result, const char *input_name, ssize_t input_nlen) {\n\n+static int msgpack_params_enable_trace(struct flb_hs *hs, msgpack_unpacked *result, const char *input_name) {\n\n-        toggled_on = enable_trace_input(hs, input_name, input_nlen, prefix, output_name, props);\n\n+        toggled_on = enable_trace_input(hs, input_name, prefix, output_name, props);\n\n-static int http_enable_trace(mk_request_t *request, void *data, const char *input_name, msgpack_packer *mp_pck) {\n\n+static int http_enable_trace(mk_request_t *request, void *data, const char *input_name, ssize_t input_nlen, msgpack_packer *mp_pck) {\n\n-        ret = enable_trace_input(hs, input_name, \"trace.\", \"stdout\", NULL);\n\n+        ret = enable_trace_input(hs, input_name, input_nlen, \"trace.\", \"stdout\", NULL);\n\n-            msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));\n-            msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));\n\n+            msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n+            msgpack_pack_str_with_body(mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);\n\n-        flb_error(\"unable to unpack msgpack parameters for %s\", input_name);\n\n+        flb_error(\"unable to unpack msgpack parameters for %.*s\", (int)input_nlen, input_name);\n\n-        ret = enable_trace_input(hs, input_name, prefix, output_name, props);\n\n+        ret = enable_trace_input(hs, input_name, input_nlen, prefix, output_name, props);\n\n-            input_instance = find_input(hs, input_name);\n\n+            input_instance = find_input(hs, input_name, input_nlen);\n\n-    msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));\n-    msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));\n\n+    msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n+    msgpack_pack_str_with_body(mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);\n\n-static int http_enable_trace(mk_request_t *request, void *data, const char *input_name, ssize_t input_nlen, msgpack_packer *mp_pck) {\n\n+static int http_enable_trace(mk_request_t *request, void *data, const char *input_name, msgpack_packer *mp_pck) {\n\n-        ret = enable_trace_input(hs, input_name, input_nlen, \"trace.\", \"stdout\", NULL);\n\n+        ret = enable_trace_input(hs, input_name, \"trace.\", \"stdout\", NULL);\n\n-            msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n-            msgpack_pack_str_with_body(mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);\n\n+            msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));\n+            msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));\n\n-            flb_error(\"unable to enable tracing for %.*s\", (int)input_nlen, input_name);\n\n+            flb_error(\"unable to enable tracing for %s\", input_name);\n\n-        flb_error(\"unable to unpack msgpack parameters for %.*s\", (int)input_nlen, input_name);\n\n+        flb_error(\"unable to unpack msgpack parameters for %s\", input_name);\n\n-        ret = enable_trace_input(hs, input_name, input_nlen, prefix, output_name, props);\n\n+        ret = enable_trace_input(hs, input_name, prefix, output_name, props);\n\n-            input_instance = find_input(hs, input_name, input_nlen);\n\n+            input_instance = find_input(hs, input_name);\n\n-    msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n-    msgpack_pack_str_with_body(mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);\n\n+    msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));\n+    msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));\n\n-static int http_disable_trace(mk_request_t *request, void *data, const char *input_name, msgpack_packer *mp_pck) {\n\n+static int http_disable_trace(mk_request_t *request, void *data, const char *input_name, size_t input_nlen, msgpack_packer *mp_pck) {\n\n-    toggled_on = disable_trace_input(hs, input_name);\n\n+    toggled_on = disable_trace_input(hs, input_name, input_nlen);\n\n-        msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));\n-        msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));\n\n+        msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n+        msgpack_pack_str_with_body(mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);\n\n-static int http_disable_trace(mk_request_t *request, void *data, const char *input_name, size_t input_nlen, msgpack_packer *mp_pck) {\n\n+static int http_disable_trace(mk_request_t *request, void *data, const char *input_name, msgpack_packer *mp_pck) {\n\n-    toggled_on = disable_trace_input(hs, input_name, input_nlen);\n\n+    toggled_on = disable_trace_input(hs, input_name);\n\n-        msgpack_pack_str_with_body(mp_pck, HTTP_FIELD_STATUS, HTTP_FIELD_STATUS_LEN);\n-        msgpack_pack_str_with_body(mp_pck, HTTP_RESULT_OK, HTTP_RESULT_OK_LEN);\n\n+        msgpack_pack_str_with_body(mp_pck, \"status\", strlen(\"status\"));\n+        msgpack_pack_str_with_body(mp_pck, \"ok\", strlen(\"ok\"));\n\n",
    "1": "+        flb_error(\"unable to find input: [%d]%.*s\", (int)nlen, (int)nlen, name);\n\n",
    "2": "-            flb_error(\"unable to enable tracing for %s\", input_name);\n\n+            flb_error(\"unable to enable tracing for %.*s\", (int)input_nlen, input_name);\n\n",
    "3": "+    if (hs->config->enable_chunk_trace == FLB_TRUE) {\n\n",
    "4": "+    }\n\n",
    "5": "-    if (hs->config->enable_chunk_trace == FLB_TRUE) {\n\n",
    "6": "-    }\n\n"
}