{
    "0": "-    int32_t bytes_read = 0;\n\n+    tmsize_t bytes_read = 0;\n\n-    tmsize_t bytes_read = 0;\n\n+    int32_t bytes_read = 0;\n\n-    int32_t bytes_read = 0;\n\n+    tmsize_t bytes_read = 0;\n\n-    tmsize_t bytes_read = 0;\n\n+    int32_t bytes_read = 0;\n\n",
    "1": "-    uint32_t stripsize = TIFFStripSize(in);\n-    uint32_t rows = 0;\n\n+    tmsize_t stripsize = TIFFStripSize(in);\n+    tmsize_t rows = 0;\n\n-    tmsize_t stripsize = TIFFStripSize(in);\n-    tmsize_t rows = 0;\n\n+    uint32_t stripsize = TIFFStripSize(in);\n+    uint32_t rows = 0;\n\n",
    "2": "-            TIFFError(\"\", \"Strip %\"PRIu32\": read %\"PRId32\" bytes, strip size %\"PRIu32, strip + 1, bytes_read, stripsize);\n\n+            TIFFError(\"\", \"Strip %\"PRIu32\": read %\"PRId64\" bytes, strip size %\"PRIu64, strip + 1, bytes_read, stripsize);\n\n-            TIFFError(\"\", \"Strip %\"PRIu32\": read %\"PRId64\" bytes, strip size %\"PRIu64, strip + 1, bytes_read, stripsize);\n\n+            TIFFError(\"\", \"Strip %\"PRIu32\": read %\"PRId32\" bytes, strip size %\"PRIu32, strip + 1, bytes_read, stripsize);\n\n",
    "3": "-            TIFFError(\"\", \"Error reading strip %\"PRIu32\" after %\"PRIu32\" rows\", strip, rows);\n\n+            TIFFError(\"\", \"Error reading strip %\"PRIu32\" after %\"PRIu64\" rows\", strip, rows);\n\n-            TIFFError(\"\", \"Error reading strip %\"PRIu32\" after %\"PRIu64\" rows\", strip, rows);\n\n+            TIFFError(\"\", \"Error reading strip %\"PRIu32\" after %\"PRIu32\" rows\", strip, rows);\n\n",
    "4": "-                    bytebuff1 = (buff2 >> 56);\n\n+                    bytebuff1 = (uint8_t)(buff2 >> 56);\n\n-                    bytebuff2 = (buff2 >> 48);\n\n+                    bytebuff2 = (uint8_t)(buff2 >> 48);\n\n-                    bytebuff3 = (buff2 >> 40);\n\n+                    bytebuff3 = (uint8_t)(buff2 >> 40);\n\n-                    bytebuff4 = (buff2 >> 32);\n\n+                    bytebuff4 = (uint8_t)(buff2 >> 32);\n\n-            dump_long (dumpfile, format, \"Match bits \", matchbits);\n\n+            dump_wide (dumpfile, format, \"Match bits \", matchbits);\n\n-            dump_long (dumpfile, format, \"Buff1 bits \", buff1);\n-            dump_long (dumpfile, format, \"Buff2 bits \", buff2);\n\n+            dump_wide (dumpfile, format, \"Buff1 bits \", buff1);\n+            dump_wide (dumpfile, format, \"Buff2 bits \", buff2);\n\n-                    bytebuff1 = (uint8_t)(buff2 >> 56);\n\n+                    bytebuff1 = (buff2 >> 56);\n\n-                    bytebuff2 = (uint8_t)(buff2 >> 48);\n\n+                    bytebuff2 = (buff2 >> 48);\n\n-                    bytebuff3 = (uint8_t)(buff2 >> 40);\n\n+                    bytebuff3 = (buff2 >> 40);\n\n-                    bytebuff4 = (uint8_t)(buff2 >> 32);\n\n+                    bytebuff4 = (buff2 >> 32);\n\n-            dump_wide (dumpfile, format, \"Match bits \", matchbits);\n\n+            dump_long (dumpfile, format, \"Match bits \", matchbits);\n\n-            dump_wide (dumpfile, format, \"Buff1 bits \", buff1);\n-            dump_wide (dumpfile, format, \"Buff2 bits \", buff2);\n\n+            dump_long (dumpfile, format, \"Buff1 bits \", buff1);\n+            dump_long (dumpfile, format, \"Buff2 bits \", buff2);\n\n-                bytebuff1 = (buff2 >> 56);\n\n+                bytebuff1 = (uint8_t)(buff2 >> 56);\n\n-                bytebuff2 = (buff2 >> 48);\n\n+                bytebuff2 = (uint8_t)(buff2 >> 48);\n\n-                bytebuff3 = (buff2 >> 40);\n\n+                bytebuff3 = (uint8_t)(buff2 >> 40);\n\n-                bytebuff4 = (buff2 >> 32);\n\n+                bytebuff4 = (uint8_t)(buff2 >> 32);\n\n-                bytebuff1 = (uint8_t)(buff2 >> 56);\n\n+                bytebuff1 = (buff2 >> 56);\n\n-                bytebuff2 = (uint8_t)(buff2 >> 48);\n\n+                bytebuff2 = (buff2 >> 48);\n\n-                bytebuff3 = (uint8_t)(buff2 >> 40);\n\n+                bytebuff3 = (buff2 >> 40);\n\n-                bytebuff4 = (uint8_t)(buff2 >> 32);\n\n+                bytebuff4 = (buff2 >> 32);\n\n-                bytebuff1 = (buff2 >> 56);\n\n+                bytebuff1 = (uint8_t)(buff2 >> 56);\n\n-                bytebuff2 = (buff2 >> 48);\n\n+                bytebuff2 = (uint8_t)(buff2 >> 48);\n\n-                bytebuff3 = (buff2 >> 40);\n\n+                bytebuff3 = (uint8_t)(buff2 >> 40);\n\n-                bytebuff4 = (buff2 >> 32);\n\n+                bytebuff4 = (uint8_t)(buff2 >> 32);\n\n-                bytebuff1 = (uint8_t)(buff2 >> 56);\n\n+                bytebuff1 = (buff2 >> 56);\n\n-                bytebuff2 = (uint8_t)(buff2 >> 48);\n\n+                bytebuff2 = (buff2 >> 48);\n\n-                bytebuff3 = (uint8_t)(buff2 >> 40);\n\n+                bytebuff3 = (buff2 >> 40);\n\n-                bytebuff4 = (uint8_t)(buff2 >> 32);\n\n+                bytebuff4 = (buff2 >> 32);\n\n-                bytebuff1 = (buff2 >> 56);\n\n+                bytebuff1 = (uint8_t)(buff2 >> 56);\n\n-                bytebuff2 = (buff2 >> 48);\n\n+                bytebuff2 = (uint8_t)(buff2 >> 48);\n\n-                bytebuff3 = (buff2 >> 40);\n\n+                bytebuff3 = (uint8_t)(buff2 >> 40);\n\n-                bytebuff4 = (buff2 >> 32);\n\n+                bytebuff4 = (uint8_t)(buff2 >> 32);\n\n-                bytebuff1 = (uint8_t)(buff2 >> 56);\n\n+                bytebuff1 = (buff2 >> 56);\n\n-                bytebuff2 = (uint8_t)(buff2 >> 48);\n\n+                bytebuff2 = (buff2 >> 48);\n\n-                bytebuff3 = (uint8_t)(buff2 >> 40);\n\n+                bytebuff3 = (buff2 >> 40);\n\n-                bytebuff4 = (uint8_t)(buff2 >> 32);\n\n+                bytebuff4 = (buff2 >> 32);\n\n-                    bytebuff1 = (buff2 >> 56);\n\n+                    bytebuff1 = (uint8_t)(buff2 >> 56);\n\n-                    bytebuff2 = (buff2 >> 48);\n\n+                    bytebuff2 = (uint8_t)(buff2 >> 48);\n\n-                    bytebuff3 = (buff2 >> 40);\n\n+                    bytebuff3 = (uint8_t)(buff2 >> 40);\n\n-                    bytebuff4 = (buff2 >> 32);\n\n+                    bytebuff4 = (uint8_t)(buff2 >> 32);\n\n-            dump_long (dumpfile, format, \"Match bits \", matchbits);\n\n+            dump_wide (dumpfile, format, \"Match bits \", matchbits);\n\n-            dump_long (dumpfile, format, \"Buff1 bits \", buff1);\n-            dump_long (dumpfile, format, \"Buff2 bits \", buff2);\n\n+            dump_wide (dumpfile, format, \"Buff1 bits \", buff1);\n+            dump_wide (dumpfile, format, \"Buff2 bits \", buff2);\n\n-                    bytebuff1 = (uint8_t)(buff2 >> 56);\n\n+                    bytebuff1 = (buff2 >> 56);\n\n-                    bytebuff2 = (uint8_t)(buff2 >> 48);\n\n+                    bytebuff2 = (buff2 >> 48);\n\n-                    bytebuff3 = (uint8_t)(buff2 >> 40);\n\n+                    bytebuff3 = (buff2 >> 40);\n\n-                    bytebuff4 = (uint8_t)(buff2 >> 32);\n\n+                    bytebuff4 = (buff2 >> 32);\n\n-            dump_wide (dumpfile, format, \"Match bits \", matchbits);\n\n+            dump_long (dumpfile, format, \"Match bits \", matchbits);\n\n-            dump_wide (dumpfile, format, \"Buff1 bits \", buff1);\n-            dump_wide (dumpfile, format, \"Buff2 bits \", buff2);\n\n+            dump_long (dumpfile, format, \"Buff1 bits \", buff1);\n+            dump_long (dumpfile, format, \"Buff2 bits \", buff2);\n\n-                bytebuff1 = (buff2 >> 56);\n\n+                bytebuff1 = (uint8_t)(buff2 >> 56);\n\n-                bytebuff2 = (buff2 >> 48);\n\n+                bytebuff2 = (uint8_t)(buff2 >> 48);\n\n-                bytebuff3 = (buff2 >> 40);\n\n+                bytebuff3 = (uint8_t)(buff2 >> 40);\n\n-                bytebuff4 = (buff2 >> 32);\n\n+                bytebuff4 = (uint8_t)(buff2 >> 32);\n\n-                bytebuff1 = (uint8_t)(buff2 >> 56);\n\n+                bytebuff1 = (buff2 >> 56);\n\n-                bytebuff2 = (uint8_t)(buff2 >> 48);\n\n+                bytebuff2 = (buff2 >> 48);\n\n-                bytebuff3 = (uint8_t)(buff2 >> 40);\n\n+                bytebuff3 = (buff2 >> 40);\n\n-                bytebuff4 = (uint8_t)(buff2 >> 32);\n\n+                bytebuff4 = (buff2 >> 32);\n\n",
    "5": "-            crop_buff = (unsigned char *)limitMalloc(cropsize);\n\n+            crop_buff = (unsigned char *)limitMalloc(cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-                next_buff = _TIFFrealloc(crop_buff, cropsize);\n\n+                next_buff = _TIFFrealloc(crop_buff, cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-                    crop_buff = (unsigned char *)limitMalloc(cropsize);\n\n+                    crop_buff = (unsigned char *)limitMalloc(cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-        _TIFFmemset(crop_buff, 0, cropsize);\n\n+        _TIFFmemset(crop_buff, 0, cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-                crop_buff = (unsigned char *)limitMalloc(cropsize);\n\n+                crop_buff = (unsigned char *)limitMalloc(cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-                    next_buff = _TIFFrealloc(crop_buff, cropsize);\n\n+                    next_buff = _TIFFrealloc(crop_buff, cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-                        crop_buff = (unsigned char *)limitMalloc(cropsize);\n\n+                        crop_buff = (unsigned char *)limitMalloc(cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-            _TIFFmemset(crop_buff, 0, cropsize);\n\n+            _TIFFmemset(crop_buff, 0, cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-            crop_buff = (unsigned char *)limitMalloc(cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+            crop_buff = (unsigned char *)limitMalloc(cropsize);\n\n-                next_buff = _TIFFrealloc(crop_buff, cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+                next_buff = _TIFFrealloc(crop_buff, cropsize);\n\n-                    crop_buff = (unsigned char *)limitMalloc(cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+                    crop_buff = (unsigned char *)limitMalloc(cropsize);\n\n-        _TIFFmemset(crop_buff, 0, cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+        _TIFFmemset(crop_buff, 0, cropsize);\n\n-                crop_buff = (unsigned char *)limitMalloc(cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+                crop_buff = (unsigned char *)limitMalloc(cropsize);\n\n-                    next_buff = _TIFFrealloc(crop_buff, cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+                    next_buff = _TIFFrealloc(crop_buff, cropsize);\n\n-                        crop_buff = (unsigned char *)limitMalloc(cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+                        crop_buff = (unsigned char *)limitMalloc(cropsize);\n\n-            _TIFFmemset(crop_buff, 0, cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+            _TIFFmemset(crop_buff, 0, cropsize);\n\n-        crop_buff = (unsigned char *)limitMalloc(cropsize);\n\n+        crop_buff = (unsigned char *)limitMalloc(cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-        _TIFFmemset(crop_buff, 0, cropsize);\n\n+        _TIFFmemset(crop_buff, 0, cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-            new_buff = _TIFFrealloc(crop_buff, cropsize);\n\n+            new_buff = _TIFFrealloc(crop_buff, cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-                crop_buff = (unsigned char *)limitMalloc(cropsize);\n\n+                crop_buff = (unsigned char *)limitMalloc(cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-        crop_buff = (unsigned char *)limitMalloc(cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+        crop_buff = (unsigned char *)limitMalloc(cropsize);\n\n-        _TIFFmemset(crop_buff, 0, cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+        _TIFFmemset(crop_buff, 0, cropsize);\n\n-            new_buff = _TIFFrealloc(crop_buff, cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+            new_buff = _TIFFrealloc(crop_buff, cropsize);\n\n-                crop_buff = (unsigned char *)limitMalloc(cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+                crop_buff = (unsigned char *)limitMalloc(cropsize);\n\n-            _TIFFmemset(crop_buff, 0, cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+            _TIFFmemset(crop_buff, 0, cropsize);\n\n-    uint32_t tile_rowsize = TIFFTileRowSize(in);\n-    uint32_t src_offset, dst_offset;\n\n+    tmsize_t tile_rowsize = TIFFTileRowSize(in);\n+    tmsize_t src_offset, dst_offset;\n\n-    tilebuf = limitMalloc(tile_buffsize + 3);\n\n+    tilebuf = limitMalloc(tile_buffsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-    tmsize_t tile_rowsize = TIFFTileRowSize(in);\n-    tmsize_t src_offset, dst_offset;\n\n+    uint32_t tile_rowsize = TIFFTileRowSize(in);\n+    uint32_t src_offset, dst_offset;\n\n-    tilebuf = limitMalloc(tile_buffsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+    tilebuf = limitMalloc(tile_buffsize + 3);\n\n-    if (!(rbuff = (unsigned char *)limitMalloc(buffsize))) {\n-        TIFFError(\"rotateImage\", \"Unable to allocate rotation buffer of %1u bytes\", buffsize);\n\n+    if (!(rbuff = (unsigned char *)limitMalloc(buffsize + NUM_BUFF_OVERSIZE_BYTES))) {\n+        TIFFError(\"rotateImage\", \"Unable to allocate rotation buffer of %1u bytes\", buffsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-    _TIFFmemset(rbuff, '\\0', buffsize);\n\n+    _TIFFmemset(rbuff, '\\0', buffsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-    if (!(rbuff = (unsigned char *)limitMalloc(buffsize + NUM_BUFF_OVERSIZE_BYTES))) {\n-        TIFFError(\"rotateImage\", \"Unable to allocate rotation buffer of %1u bytes\", buffsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+    if (!(rbuff = (unsigned char *)limitMalloc(buffsize))) {\n+        TIFFError(\"rotateImage\", \"Unable to allocate rotation buffer of %1u bytes\", buffsize);\n\n-    _TIFFmemset(rbuff, '\\0', buffsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+    _TIFFmemset(rbuff, '\\0', buffsize);\n\n-        sect_buff = (unsigned char *)limitMalloc(sectsize);\n\n+        sect_buff = (unsigned char *)limitMalloc(sectsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-        _TIFFmemset(sect_buff, 0, sectsize);\n\n+        _TIFFmemset(sect_buff, 0, sectsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-            new_buff = _TIFFrealloc(sect_buff, sectsize);\n\n+            new_buff = _TIFFrealloc(sect_buff, sectsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-        sect_buff = (unsigned char *)limitMalloc(sectsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+        sect_buff = (unsigned char *)limitMalloc(sectsize);\n\n-        _TIFFmemset(sect_buff, 0, sectsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+        _TIFFmemset(sect_buff, 0, sectsize);\n\n-            new_buff = _TIFFrealloc(sect_buff, sectsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+            new_buff = _TIFFrealloc(sect_buff, sectsize);\n\n-                sect_buff = (unsigned char *)limitMalloc(sectsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+                sect_buff = (unsigned char *)limitMalloc(sectsize);\n\n-            _TIFFmemset(sect_buff, 0, sectsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+            _TIFFmemset(sect_buff, 0, sectsize);\n\n-    uint32_t stsize = 0, tlsize = 0, buffsize = 0, scanlinesize = 0;\n\n+    tmsize_t stsize = 0, tlsize = 0, buffsize = 0;\n+    tmsize_t scanlinesize = 0;\n\n-    uint32_t tile_rowsize = 0;\n\n+    tmsize_t tile_rowsize = 0;\n\n-    static uint32_t prev_readsize = 0;\n\n+    static tmsize_t prev_readsize = 0;\n\n-        read_buff = (unsigned char *)limitMalloc(buffsize+3);\n\n+        read_buff = (unsigned char *)limitMalloc(buffsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-            new_buff = _TIFFrealloc(read_buff, buffsize+3);\n\n+            new_buff = _TIFFrealloc(read_buff, buffsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-                read_buff = (unsigned char *)limitMalloc(buffsize+3);\n\n+                read_buff = (unsigned char *)limitMalloc(buffsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-            dump_buffer(dump->infile, dump->format, 1, scanlinesize, i, read_buff + (i * scanlinesize));\n\n+            dump_buffer(dump->infile, dump->format, 1, (uint32_t)scanlinesize, i, read_buff + (i * scanlinesize));\n\n-    tmsize_t stsize = 0, tlsize = 0, buffsize = 0;\n-    tmsize_t scanlinesize = 0;\n\n+    uint32_t stsize = 0, tlsize = 0, buffsize = 0, scanlinesize = 0;\n\n-    tmsize_t tile_rowsize = 0;\n\n+    uint32_t tile_rowsize = 0;\n\n-    static tmsize_t prev_readsize = 0;\n\n+    static uint32_t prev_readsize = 0;\n\n-        read_buff = (unsigned char *)limitMalloc(buffsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+        read_buff = (unsigned char *)limitMalloc(buffsize+3);\n\n-            new_buff = _TIFFrealloc(read_buff, buffsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+            new_buff = _TIFFrealloc(read_buff, buffsize+3);\n\n-                read_buff = (unsigned char *)limitMalloc(buffsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+                read_buff = (unsigned char *)limitMalloc(buffsize+3);\n\n-        if (scanlinesize > 0x0ffffffffULL) {\n-            dump_info(dump->infile, dump->format, \"loadImage\", \"Attention: scanlinesize %\"PRIu64\" is larger than UT32_MAX.\\nFollowing dump might be wrong.\", scanlinesize);\n-        }\n\n-            dump_buffer(dump->infile, dump->format, 1, (uint32_t)scanlinesize, i, read_buff + (i * scanlinesize));\n\n+            dump_buffer(dump->infile, dump->format, 1, scanlinesize, i, read_buff + (i * scanlinesize));\n\n-        tbuff = (unsigned char *)limitMalloc(tilesize + 8);\n\n+        tbuff = (unsigned char *)limitMalloc(tilesize + NUM_BUFF_OVERSIZE_BYTES);\n\n-        tbuff = (unsigned char *)limitMalloc(tilesize + NUM_BUFF_OVERSIZE_BYTES);\n\n+        tbuff = (unsigned char *)limitMalloc(tilesize + 8);\n\n-    uint32_t tile_rowsize = TIFFTileRowSize(out);\n\n+    tmsize_t tile_rowsize = TIFFTileRowSize(out);\n\n-    tilebuf = limitMalloc(tile_buffsize);\n\n+    tilebuf = limitMalloc(tile_buffsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-    tmsize_t tile_rowsize = TIFFTileRowSize(out);\n\n+    uint32_t tile_rowsize = TIFFTileRowSize(out);\n\n-    tilebuf = limitMalloc(tile_buffsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+    tilebuf = limitMalloc(tile_buffsize);\n\n-    memset(tilebuf, 0, tile_buffsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-    tdata_t obuf = limitMalloc(TIFFTileSize(out));\n\n+    tdata_t obuf = limitMalloc(TIFFTileSize(out) + NUM_BUFF_OVERSIZE_BYTES);\n\n-    tdata_t obuf = limitMalloc(TIFFTileSize(out) + NUM_BUFF_OVERSIZE_BYTES);\n\n+    tdata_t obuf = limitMalloc(TIFFTileSize(out));\n\n-    memset(obuf, 0, TIFFTileSize(out) + NUM_BUFF_OVERSIZE_BYTES);\n\n-        line_buff = (unsigned char *)limitMalloc(rowsize);\n\n+        line_buff = (unsigned char *)limitMalloc(rowsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-            TIFFError (\"mirrorImage\", \"Unable to allocate mirror line buffer of %1u bytes\", rowsize);\n\n+            TIFFError (\"mirrorImage\", \"Unable to allocate mirror line buffer of %1u bytes\", rowsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-            if (!(line_buff = (unsigned char *)limitMalloc(rowsize + 1))) {\n\n+            if (!(line_buff = (unsigned char *)limitMalloc(rowsize + NUM_BUFF_OVERSIZE_BYTES))) {\n\n-                _TIFFmemset (line_buff, '\\0', rowsize);\n\n+                _TIFFmemset (line_buff, '\\0', rowsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-        line_buff = (unsigned char *)limitMalloc(rowsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+        line_buff = (unsigned char *)limitMalloc(rowsize);\n\n-            TIFFError (\"mirrorImage\", \"Unable to allocate mirror line buffer of %1u bytes\", rowsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+            TIFFError (\"mirrorImage\", \"Unable to allocate mirror line buffer of %1u bytes\", rowsize);\n\n-        _TIFFmemset(line_buff, '\\0', rowsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-            if (!(line_buff = (unsigned char *)limitMalloc(rowsize + NUM_BUFF_OVERSIZE_BYTES))) {\n\n+            if (!(line_buff = (unsigned char *)limitMalloc(rowsize + 1))) {\n\n-            _TIFFmemset(line_buff, '\\0', rowsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-                _TIFFmemset (line_buff, '\\0', rowsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+                _TIFFmemset (line_buff, '\\0', rowsize);\n\n",
    "6": "-                end = strlen (opt_ptr);\n\n+                end = (unsigned int)strlen (opt_ptr);\n\n-                    end = strlen (opt_offset + 1);\n\n+                    end = (unsigned int)strlen (opt_offset + 1);\n\n-                end = (unsigned int)strlen (opt_ptr);\n\n+                end = strlen (opt_ptr);\n\n-                    end = (unsigned int)strlen (opt_offset + 1);\n\n+                    end = strlen (opt_offset + 1);\n\n",
    "7": "-            _TIFFmemset(crop_buff, 0, cropsize);\n\n+            _TIFFmemset(crop_buff, 0, cropsize + NUM_BUFF_OVERSIZE_BYTES);\n\n",
    "8": "-                int inknameslen = strlen(inknames) + 1;\n\n+                int inknameslen = (int)strlen(inknames) + 1;\n\n-                        inknameslen += (strlen(cp) + 1);\n\n+                        inknameslen += ((int)strlen(cp) + 1);\n\n-                int inknameslen = (int)strlen(inknames) + 1;\n\n+                int inknameslen = strlen(inknames) + 1;\n\n-                        inknameslen += ((int)strlen(cp) + 1);\n\n+                        inknameslen += (strlen(cp) + 1);\n\n-                int inknameslen = strlen(inknames) + 1;\n\n+                int inknameslen = (int)strlen(inknames) + 1;\n\n-                        inknameslen += (strlen(cp) + 1);\n\n+                        inknameslen += ((int)strlen(cp) + 1);\n\n-                int inknameslen = (int)strlen(inknames) + 1;\n\n+                int inknameslen = strlen(inknames) + 1;\n\n-                        inknameslen += ((int)strlen(cp) + 1);\n\n+                        inknameslen += (strlen(cp) + 1);\n\n",
    "9": "-                sect_buff = (unsigned char *)limitMalloc(sectsize);\n\n+                sect_buff = (unsigned char *)limitMalloc(sectsize + NUM_BUFF_OVERSIZE_BYTES);\n\n",
    "10": "-            _TIFFmemset(sect_buff, 0, sectsize);\n\n+            _TIFFmemset(sect_buff, 0, sectsize + NUM_BUFF_OVERSIZE_BYTES);\n\n",
    "11": "+        if (scanlinesize > 0x0ffffffffULL) {\n+            dump_info(dump->infile, dump->format, \"loadImage\", \"Attention: scanlinesize %\"PRIu64\" is larger than UT32_MAX.\\nFollowing dump might be wrong.\", scanlinesize);\n+        }\n\n",
    "12": "-        buff = limitMalloc(stripsize + 3);\n\n+        buff = limitMalloc(stripsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-        buff = limitMalloc(stripsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+        buff = limitMalloc(stripsize + 3);\n\n-    obuf = limitMalloc (rowstripsize);\n\n+    obuf = limitMalloc (rowstripsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-            memset (obuf, '\\0', rowstripsize);\n\n+            memset (obuf, '\\0',rowstripsize + NUM_BUFF_OVERSIZE_BYTES);\n\n-                dump_info(dump->outfile, dump->format,\"\", \"Sample %2d, Strip: %2d, bytes: %4d, Row %4d, bytes: %4d, Input offset: %6d\", s + 1, strip + 1, stripsize, row + 1, scanlinesize, src - buf);\n-                dump_buffer(dump->outfile, dump->format, nrows, scanlinesize, row, obuf);\n\n+                if (scanlinesize > 0x0ffffffffULL) {\n+                    dump_info(dump->infile, dump->format, \"loadImage\", \"Attention: scanlinesize %\"PRIu64\" is larger than UT32_MAX.\\nFollowing dump might be wrong.\", scanlinesize);\n+                }\n+                dump_info(dump->outfile, dump->format,\"\", \"Sample %2d, Strip: %2d, bytes: %4d, Row %4d, bytes: %4d, Input offset: %6d\", s + 1, strip + 1, stripsize, row + 1, (uint32_t)scanlinesize, src - buf);\n+                dump_buffer(dump->outfile, dump->format, nrows, (uint32_t)scanlinesize, row, obuf);\n\n-    obuf = limitMalloc (rowstripsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+    obuf = limitMalloc (rowstripsize);\n\n-            memset (obuf, '\\0',rowstripsize + NUM_BUFF_OVERSIZE_BYTES);\n\n+            memset (obuf, '\\0', rowstripsize);\n\n-                if (scanlinesize > 0x0ffffffffULL) {\n-                    dump_info(dump->infile, dump->format, \"loadImage\", \"Attention: scanlinesize %\"PRIu64\" is larger than UT32_MAX.\\nFollowing dump might be wrong.\", scanlinesize);\n-                }\n-                dump_info(dump->outfile, dump->format,\"\", \"Sample %2d, Strip: %2d, bytes: %4d, Row %4d, bytes: %4d, Input offset: %6d\", s + 1, strip + 1, stripsize, row + 1, (uint32_t)scanlinesize, src - buf);\n-                dump_buffer(dump->outfile, dump->format, nrows, (uint32_t)scanlinesize, row, obuf);\n\n+                dump_info(dump->outfile, dump->format,\"\", \"Sample %2d, Strip: %2d, bytes: %4d, Row %4d, bytes: %4d, Input offset: %6d\", s + 1, strip + 1, stripsize, row + 1, scanlinesize, src - buf);\n+                dump_buffer(dump->outfile, dump->format, nrows, scanlinesize, row, obuf);\n\n",
    "13": "-            rows_this_strip = bytes_read / src_rowsize;\n\n+            rows_this_strip = (uint32_t)(bytes_read / src_rowsize);\n\n-            rows_this_strip = (uint32_t)(bytes_read / src_rowsize);\n\n+            rows_this_strip = bytes_read / src_rowsize;\n\n",
    "14": "+    memset(tilebuf, 0, tile_buffsize + NUM_BUFF_OVERSIZE_BYTES);\n\n",
    "15": "+    memset(obuf, 0, TIFFTileSize(out) + NUM_BUFF_OVERSIZE_BYTES);\n\n",
    "16": "+    assert(NUM_BUFF_OVERSIZE_BYTES >= 3);\n\n",
    "17": "-    assert(NUM_BUFF_OVERSIZE_BYTES >= 3);\n\n",
    "18": "+        _TIFFmemset(line_buff, '\\0', rowsize + NUM_BUFF_OVERSIZE_BYTES);\n\n",
    "19": "+            _TIFFmemset(line_buff, '\\0', rowsize + NUM_BUFF_OVERSIZE_BYTES);\n\n"
}