diff --git a/bugxml/data.txt b/bugxml/data.txt
index eda2a17ae..a3dbf3bc7 100644
--- a/bugxml/data.txt
+++ b/bugxml/data.txt
@@ -11,10 +11,10 @@ description: Test object shows
  null dereference at line 62
  of dwarf_line_table_reader.c.
  Frame code and linetable code was not noticing data corruption.
-datefixed: 20160507
+datefixed: 
 references: liu/OOB_read4.elf
-gitfixid: b3c1706d48e02fa01be47da3d7a406023e8e63f7
-tarrelease: 20160507
+gitfixid: 
+tarrelease: 
 endrec:
 
 
@@ -28,10 +28,11 @@ description: Test object shows
  null dereverence at line 186
  of dump_block() in print_sections.c
  Frame code was not noticing frame data corruption.
-datefixed: 20160507
+datefixed: 
 references: liu/OOB_read3.elf
-gitfixid: b3c1706d48e02fa01be47da3d7a406023e8e63f7
-tarrelease: 20160507
+  liu/OOB_read3_02.elf
+gitfixid: 
+tarrelease: 
 endrec:
 
 id: DW201605-009
@@ -65,10 +66,11 @@ description: Test object shows
  in dwarf_macro5.c
  A string offset into .debug_str is outside the bounds
  of the .debug_str section.
-datefixed: 20150506
+datefixed: 
 references: liu/OOB0505_02.elf
-gitfixid: b6ec2dfd850929821626ea63fb0a752076a3c08a
-tarrelease: 20160507
+ liu/OOB0505_02_02.elf
+gitfixid: 
+tarrelease: 
 endrec:
 
 id: DW201605-007
diff --git a/dwarfdump/ChangeLog b/dwarfdump/ChangeLog
index f9647e1e5..00c566a94 100644
--- a/dwarfdump/ChangeLog
+++ b/dwarfdump/ChangeLog
@@ -1,3 +1,12 @@
+2016-05-10  David Anderson
+    * print_aranges.c: Minor commentary change and
+      rearranging lines for clarity.
+    * print_die.c: formwith->form with
+      in an error message. 
+    * print_frames.c: Now checks for bogus expression block 
+      lengths and bogus LEB values. LEB reading functions
+      now here and static functions.
+    * print_sections.c: Moved leb reading functions to print_frames.c
 2016-05-07  David Anderson
     * dwarfdump.c, common.c: Update version string.
     * print_frames.c: For local variable added
diff --git a/dwarfdump/globals.h b/dwarfdump/globals.h
index e43d51c69..aefca1218 100644
--- a/dwarfdump/globals.h
+++ b/dwarfdump/globals.h
@@ -514,12 +514,6 @@ void get_attr_value(Dwarf_Debug dbg, Dwarf_Half tag,
     Dwarf_Signed cnt, struct esb_s *esbp,
     int show_form,int local_verbose);
 
-extern Dwarf_Unsigned local_dwarf_decode_u_leb128(unsigned char *leb128,
-    unsigned int *leb128_length);
-
-extern Dwarf_Signed local_dwarf_decode_s_leb128(unsigned char *leb128,
-    unsigned int *leb128_length);
-
 extern void dump_block(char *prefix, char *data, Dwarf_Signed len);
 
 extern void format_sig8_string(Dwarf_Sig8 *data,struct esb_s *out);
diff --git a/dwarfdump/print_aranges.c b/dwarfdump/print_aranges.c
index 65dd81d77..c028beab8 100644
--- a/dwarfdump/print_aranges.c
+++ b/dwarfdump/print_aranges.c
@@ -48,6 +48,11 @@ do_checking(Dwarf_Debug dbg, Dwarf_Arange *arange_buf,Dwarf_Signed i,
     Dwarf_Off cuhdroff = 0;
     Dwarf_Off cudieoff3 = 0;
     Dwarf_Error checking_err = 0;
+    /*  .debug_types has no address ranges, only .debug_info[.dwo] 
+        has them.*/
+    int is_info = 1;
+
+
     dres = dwarf_get_arange_cu_header_offset(
         arange_buf[i],&cuhdroff,&checking_err);
     if (dres == DW_DLV_OK) {
@@ -64,18 +69,18 @@ do_checking(Dwarf_Debug dbg, Dwarf_Arange *arange_buf,Dwarf_Signed i,
                 print_error(dbg, "dwarf_die_offsets", dres, checking_err);
             }
         }
-        dres = dwarf_get_cu_die_offset_given_cu_header_offset(
-            dbg,cuhdroff,&cudieoff2,&checking_err);
+        dres = dwarf_get_cu_die_offset_given_cu_header_offset_b(
+            dbg,cuhdroff,is_info,&cudieoff2,&checking_err);
         if (dres == DW_DLV_OK) {
             /* Get the CU offset for easy error reporting */
             dwarf_die_offsets(cu_die,&DIE_overall_offset,&DIE_offset,&checking_err);
             DIE_CU_overall_offset = DIE_overall_offset;
             DIE_CU_offset = DIE_offset;
             DWARF_CHECK_COUNT(aranges_result,1);
-            if (cudieoff2 != cu_die_offset) {
+            if (cu_die_offset != cudieoff2) {
                 printf("Error, cu_die offsets mismatch,  0x%"
-                    DW_PR_DUx
-                    " != 0x%" DW_PR_DUx " from arange data",
+                    DW_PR_DUx " != 0x%" DW_PR_DUx 
+                    " from arange data",
                     cu_die_offset,cudieoff2);
                 DWARF_CHECK_ERROR(aranges_result,
                     " dwarf_get_cu_die_offset_given_cu..."
@@ -181,7 +186,9 @@ print_aranges(Dwarf_Debug dbg)
                 }
 
                 if (check_aranges) {
-                    do_checking(dbg,arange_buf,i,cu_die_offset,first_cu,
+                     
+                    do_checking(dbg,arange_buf,i,
+                        cu_die_offset,first_cu,
                         cu_die_offset_prev,cu_die);
                 }
                 /*  Get the offset of the cu header itself in the
diff --git a/dwarfdump/print_die.c b/dwarfdump/print_die.c
index 08b7c3d3b..56b9838df 100644
--- a/dwarfdump/print_die.c
+++ b/dwarfdump/print_die.c
@@ -3148,7 +3148,8 @@ dwarfdump_print_one_locdesc(Dwarf_Debug dbg,
     /* ASSERT: locs != NULL */
     no_of_ops = entrycount;
     for (i = 0; i < no_of_ops; i++) {
-        int res = _dwarf_print_one_expr_op(dbg,NULL,locdesc,i,
+        int res = 0;
+        res = _dwarf_print_one_expr_op(dbg,NULL,locdesc,i,
             baseaddr,string_out);
         if (res == DW_DLV_ERROR) {
             return;
@@ -4454,7 +4455,7 @@ get_attr_value(Dwarf_Debug dbg, Dwarf_Half tag,
                 /*  This is normal in a .dwo file. The .debug_addr
                     is in a .o and in the final executable. */
             } else {
-                print_error(dbg, "addr formwith no addr?!", bres, err);
+                print_error(dbg, "addr form with no addr?!", bres, err);
             }
         } else {
             print_error(dbg, "addr is a DW_DLV_NO_ENTRY? Impossible.",
diff --git a/dwarfdump/print_frames.c b/dwarfdump/print_frames.c
index 66ba76601..319808b71 100644
--- a/dwarfdump/print_frames.c
+++ b/dwarfdump/print_frames.c
@@ -78,6 +78,103 @@ safe_strcpy(char *out, long outlen, const char *in, long inlen)
     }
 }
 
+
+
+
+#define MAXLEBLEN 10
+/*
+    decode ULEB
+*/
+static int
+local_dwarf_decode_u_leb128_chk(unsigned char *leb128,
+    unsigned int *leb128_length,
+    Dwarf_Unsigned *value_out,
+    Dwarf_Small *data_end)
+{
+    unsigned char byte = 0;
+    Dwarf_Unsigned number = 0;
+    unsigned int shift = 0;
+    unsigned int byte_length = 1;
+
+    byte = *leb128;
+    if (leb128 >= data_end) {
+        return DW_DLV_ERROR;
+    }
+    for (;;) {
+        number |= (byte & 0x7f) << shift;
+        shift += 7;
+
+        if ((byte & 0x80) == 0) {
+            if (leb128_length != NULL)
+                *leb128_length = byte_length;
+            *value_out = number;
+            return DW_DLV_OK;
+        }
+
+        byte_length++;
+        if (byte_length > MAXLEBLEN) {
+            return DW_DLV_ERROR;
+        }
+        ++leb128;
+        if (leb128 >= data_end) {
+            return DW_DLV_ERROR;
+        }
+        byte = *leb128;
+    }
+    return DW_DLV_ERROR;
+}
+
+#define BITSINBYTE 8
+static int
+local_dwarf_decode_s_leb128_chk(unsigned char *leb128,
+    unsigned int *leb128_length,
+    Dwarf_Signed *value_out,
+    Dwarf_Small *data_end)
+{
+    Dwarf_Signed number = 0;
+    Dwarf_Bool sign = 0;
+    unsigned shift = 0;
+    unsigned char byte = 0;
+    Dwarf_Signed byte_length = 1;
+
+    /*  byte_length being the number of bytes of data absorbed so far in
+        turning the leb into a Dwarf_Signed. */
+
+    if (leb128 >= data_end) {
+        return DW_DLV_ERROR;
+    }
+    byte = *leb128;
+    for (;;) {
+        sign = byte & 0x40;
+        number |= ((Dwarf_Signed) ((byte & 0x7f))) << shift;
+        shift += 7;
+
+        if ((byte & 0x80) == 0) {
+            break;
+        }
+        ++leb128;
+        if (leb128 >= data_end) {
+            return DW_DLV_ERROR;
+        }
+        if (byte_length > MAXLEBLEN) {
+            return DW_DLV_ERROR;
+        }
+        byte = *leb128;
+        byte_length++;
+        
+    }
+
+    if ((shift < sizeof(Dwarf_Signed) * BITSINBYTE) && sign) {
+        number |= -((Dwarf_Signed) 1 << shift);
+    }
+
+    if (leb128_length != NULL)
+        *leb128_length = byte_length;
+    *value_out = number;
+    return DW_DLV_OK;
+}
+
+
 /* For inlined functions, try to find name */
 static int
 get_abstract_origin_funcname(Dwarf_Debug dbg,Dwarf_Attribute attr,
@@ -1176,7 +1273,8 @@ get_string_from_locs(Dwarf_Debug dbg,
 
 /*ARGSUSED*/ static void
 print_frame_inst_bytes(Dwarf_Debug dbg,
-    Dwarf_Ptr cie_init_inst, Dwarf_Signed len,
+    Dwarf_Ptr cie_init_inst, 
+    Dwarf_Signed len,
     Dwarf_Signed data_alignment_factor,
     int code_alignment_factor, Dwarf_Half addr_size,
     Dwarf_Half offset_size,Dwarf_Half version,
@@ -1191,6 +1289,8 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
     unsigned short u16 = 0;
     unsigned int u32 = 0;
     unsigned long long u64 = 0;
+    int res = 0;
+    Dwarf_Small *endpoint = instp + len;
 
     for (; len > 0;) {
         unsigned char ibyte = *instp;
@@ -1213,7 +1313,12 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
         case DW_CFA_offset:
             loff = off;
             reg = ibyte & 0x3f;
-            uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+            res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                &uval,endpoint);
+            if (res != DW_DLV_OK) {
+                printf("ERROR reading leb in DW_CFA_offset\n");
+                return;
+            }
             instp += uleblen;
             len -= uleblen;
             off += uleblen;
@@ -1306,12 +1411,22 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                     loff,  uval2);
                 break;
             case DW_CFA_offset_extended:
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_offset_extended\n");
+                    return;
+                }
+           
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
-                uval2 =
-                    local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval2,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_offset_extended\n");
+                    return;
+                }
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
@@ -1328,7 +1443,12 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 break;
 
             case DW_CFA_restore_extended:
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_restore_extended\n");
+                    return;
+                }
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
@@ -1337,7 +1457,12 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 printf("\n");
                 break;
             case DW_CFA_undefined:
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_undefined\n");
+                    return;
+                }
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
@@ -1346,7 +1471,12 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 printf("\n");
                 break;
             case DW_CFA_same_value:
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_undefined\n");
+                    return;
+                }
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
@@ -1355,12 +1485,21 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 printf("\n");
                 break;
             case DW_CFA_register:
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_register\n");
+                    return;
+                }
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
-                uval2 =
-                    local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval2,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_register\n");
+                    return;
+                }
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
@@ -1377,12 +1516,21 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 printf("\t%2u DW_CFA_restore_state\n", loff);
                 break;
             case DW_CFA_def_cfa:
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_def_cfa\n");
+                    return;
+                }
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
-                uval2 =
-                    local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval2,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_def_cfa\n");
+                    return;
+                }
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
@@ -1392,7 +1540,12 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 printf("\n");
                 break;
             case DW_CFA_def_cfa_register:
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_def_cfa_register\n");
+                    return;
+                }
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
@@ -1401,7 +1554,12 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 printf("\n");
                 break;
             case DW_CFA_def_cfa_offset:
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_def_cfa_offset\n");
+                    return;
+                }
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
@@ -1415,9 +1573,13 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
 
             case DW_CFA_def_cfa_expression:     /* DWARF3 */
                 {
-                    Dwarf_Unsigned block_len =
-                        local_dwarf_decode_u_leb128(instp + 1,
-                            &uleblen);
+                    Dwarf_Unsigned block_len = 0;
+                    res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                        &block_len,endpoint);
+                    if (res != DW_DLV_OK) {
+                        printf("ERROR reading leb in DW_CFA_def_cfa_expression\n");
+                        return;
+                    }
 
                     instp += uleblen;
                     len -= uleblen;
@@ -1427,6 +1589,10 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                         DW_PR_DUu "\n",
                         loff,
                         block_len);
+                    if ((instp+1 + block_len) > endpoint) {
+                        printf("ERROR expression length too long in DW_CFA_def_cfa_expression\n");
+                        return;
+                    }
                     dump_block("\t\t", (char *) instp+1,
                         (Dwarf_Signed) block_len);
                     printf("\n");
@@ -1445,7 +1611,12 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 }
                 break;
             case DW_CFA_expression:     /* DWARF3 */
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_expression\n");
+                    return;
+                }
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
@@ -1453,9 +1624,13 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                     /*  instp is always 1 byte back, so we need +1
                         when we use it. See the final increment
                         of this for loop. */
-                    Dwarf_Unsigned block_len =
-                        local_dwarf_decode_u_leb128(instp + 1,
-                            &uleblen);
+                    Dwarf_Unsigned block_len = 0;
+                    res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                        &block_len,endpoint);
+                    if (res != DW_DLV_OK) {
+                        printf("ERROR reading leb in DW_CFA_expression\n");
+                        return;
+                    }
 
                     instp += uleblen;
                     len -= uleblen;
@@ -1465,6 +1640,10 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                         " expr block len %" DW_PR_DUu "\n",
                         loff,  uval,
                         block_len);
+                    if ((instp+1 + block_len) > endpoint) {
+                        printf("ERROR expression length too long in DW_CFA_expression\n");
+                        return;
+                    }
                     dump_block("\t\t", (char *) instp+1,
                         (Dwarf_Signed) block_len);
                     printf("\n");
@@ -1483,17 +1662,28 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 }
                 break;
             case DW_CFA_offset_extended_sf: /* DWARF3 */
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_offset_extended_sf\n");
+                    return;
+                }
+
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
                 {
+                    Dwarf_Signed sval2 = 0;
                     /* instp is always 1 byte back, so we need +1
                         when we use it. See the final increment
                         of this for loop. */
-                    Dwarf_Signed sval2 =
-                        local_dwarf_decode_s_leb128(instp + 1,
-                            &uleblen);
+                    res = local_dwarf_decode_s_leb128_chk(instp + 1, &uleblen,
+                        &sval2,endpoint);
+                    if (res != DW_DLV_OK) {
+                        printf("ERROR reading leb in DW_CFA_offset_extended_sf\n");
+                        return;
+                    }
+
 
                     instp += uleblen;
                     len -= uleblen;
@@ -1513,14 +1703,23 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 /*  instp is always 1 byte back, so we need +1
                     when we use it. See the final increment
                     of this for loop. */
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_def_cfa_sf\n");
+                    return;
+                }
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
                 {
-                    Dwarf_Signed sval2 =
-                        local_dwarf_decode_s_leb128(instp + 1,
-                            &uleblen);
+                    Dwarf_Signed sval2 = 0;
+                    res = local_dwarf_decode_s_leb128_chk(instp + 1, &uleblen,
+                        &sval2,endpoint);
+                    if (res != DW_DLV_OK) {
+                        printf("ERROR reading leb in DW_CFA_def_cfa_sf\n");
+                        return;
+                    }
 
                     instp += uleblen;
                     len -= uleblen;
@@ -1538,9 +1737,13 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                     /*  instp is always 1 byte back, so we need +1
                         when we use it. See the final increment
                         of this for loop. */
-                    Dwarf_Signed sval =
-                        local_dwarf_decode_s_leb128(instp + 1,
-                            &uleblen);
+                    Dwarf_Signed sval = 0;
+                    res = local_dwarf_decode_s_leb128_chk(instp + 1, &uleblen,
+                        &sval,endpoint);
+                    if (res != DW_DLV_OK) {
+                        printf("ERROR reading leb in DW_CFA_def_cfa_sf\n");
+                        return;
+                    }
 
                     instp += uleblen;
                     len -= uleblen;
@@ -1557,14 +1760,24 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 /*  instp is always 1 byte back, so we need +1
                     when we use it. See the final increment
                     of this for loop. */
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_val_offset\n");
+                    return;
+                }
+
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
                 {
-                    Dwarf_Signed sval2 =
-                        local_dwarf_decode_s_leb128(instp + 1,
-                            &uleblen);
+                    Dwarf_Signed sval2 = 0;
+                    res = local_dwarf_decode_s_leb128_chk(instp + 1, &uleblen,
+                        &sval2,endpoint);
+                    if (res != DW_DLV_OK) {
+                        printf("ERROR reading leb in DW_CFA_val_offset\n");
+                        return;
+                    }
                     instp += uleblen;
                     len -= uleblen;
                     off += uleblen;
@@ -1586,14 +1799,23 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 /*  instp is always 1 byte back, so we need +1
                     when we use it. See the final increment
                     of this for loop. */
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_val_offset_sf\n");
+                    return;
+                }
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
                 {
-                    Dwarf_Signed sval2 =
-                        local_dwarf_decode_s_leb128(instp + 1,
-                            &uleblen);
+                    Dwarf_Signed sval2 = 0;
+                    res = local_dwarf_decode_s_leb128_chk(instp + 1, &uleblen,
+                        &sval2,endpoint);
+                    if (res != DW_DLV_OK) {
+                        printf("ERROR reading leb in DW_CFA_val_offset\n");
+                        return;
+                    }
 
                     instp += uleblen;
                     len -= uleblen;
@@ -1614,14 +1836,23 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 /*  instp is always 1 byte back, so we need +1
                     when we use it. See the final increment
                     of this for loop. */
-                uval = local_dwarf_decode_u_leb128(instp + 1, &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &uval,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_val_expression\n");
+                    return;
+                }
                 instp += uleblen;
                 len -= uleblen;
                 off += uleblen;
                 {
-                    Dwarf_Unsigned block_len =
-                        local_dwarf_decode_u_leb128(instp + 1,
-                            &uleblen);
+                    Dwarf_Unsigned block_len = 0;
+                    res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                        &block_len,endpoint);
+                    if (res != DW_DLV_OK) {
+                        printf("ERROR reading leb in DW_CFA_val_expression\n");
+                        return;
+                    }
 
                     instp += uleblen;
                     len -= uleblen;
@@ -1631,6 +1862,10 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                         " expr block len %" DW_PR_DUu "\n",
                         loff,  uval,
                         block_len);
+                    if (( instp + 1 + block_len) >endpoint) {
+                        printf("ERROR expression length too long in DW_CFA_val_expression\n");
+                        return;
+                    }
                     dump_block("\t\t", (char *) instp+1,
                         (Dwarf_Signed) block_len);
                     printf("\n");
@@ -1659,8 +1894,12 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 /*  instp is always 1 byte back, so we need +1
                     when we use it. See the final increment
                     of this for loop. */
-                val = local_dwarf_decode_u_leb128(instp + 1,
-                    &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &val,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_METAWARE_info\n");
+                    return;
+                }
                 printf("\t%2u DW_CFA_METAWARE_info value: %"
                     DW_PR_DUu "\n",
                     loff, val);
@@ -1694,8 +1933,12 @@ print_frame_inst_bytes(Dwarf_Debug dbg,
                 /*  instp is always 1 byte back, so we need +1
                     when we use it. See the final increment
                     of this for loop. */
-                lreg = local_dwarf_decode_u_leb128(instp + 1,
-                    &uleblen);
+                res = local_dwarf_decode_u_leb128_chk(instp + 1, &uleblen,
+                    &lreg,endpoint);
+                if (res != DW_DLV_OK) {
+                    printf("ERROR reading leb in DW_CFA_GNU_args_size\n");
+                    return;
+                }
                 printf("\t%2u DW_CFA_GNU_args_size arg size: %"
                     DW_PR_DUu "\n",
                     loff, lreg);
diff --git a/dwarfdump/print_sections.c b/dwarfdump/print_sections.c
index 06f26c8f2..f946d8a48 100644
--- a/dwarfdump/print_sections.c
+++ b/dwarfdump/print_sections.c
@@ -106,71 +106,6 @@ get_info_max_offset(Dwarf_Debug dbg)
     return debug_info_size;
 }
 
-/*
-    decode ULEB
-*/
-Dwarf_Unsigned
-local_dwarf_decode_u_leb128(unsigned char *leb128,
-    unsigned int *leb128_length)
-{
-    unsigned char byte = 0;
-    Dwarf_Unsigned number = 0;
-    unsigned int shift = 0;
-    unsigned int byte_length = 1;
-
-    byte = *leb128;
-    for (;;) {
-        number |= (byte & 0x7f) << shift;
-        shift += 7;
-
-        if ((byte & 0x80) == 0) {
-            if (leb128_length != NULL)
-                *leb128_length = byte_length;
-            return (number);
-        }
-
-        byte_length++;
-        byte = *(++leb128);
-    }
-}
-
-#define BITSINBYTE 8
-Dwarf_Signed
-local_dwarf_decode_s_leb128(unsigned char *leb128,
-    unsigned int *leb128_length)
-{
-    Dwarf_Signed number = 0;
-    Dwarf_Bool sign = 0;
-    unsigned shift = 0;
-    unsigned char byte = *leb128;
-    Dwarf_Signed byte_length = 1;
-
-    /*  byte_length being the number of bytes of data absorbed so far in
-        turning the leb into a Dwarf_Signed. */
-
-    for (;;) {
-        sign = byte & 0x40;
-        number |= ((Dwarf_Signed) ((byte & 0x7f))) << shift;
-        shift += 7;
-
-        if ((byte & 0x80) == 0) {
-            break;
-        }
-        ++leb128;
-        byte = *leb128;
-        byte_length++;
-    }
-
-    if ((shift < sizeof(Dwarf_Signed) * BITSINBYTE) && sign) {
-        number |= -((Dwarf_Signed) 1 << shift);
-    }
-
-    if (leb128_length != NULL)
-        *leb128_length = byte_length;
-    return (number);
-}
-
-
 /* Dumping a dwarf-expression as a byte stream. */
 void
 dump_block(char *prefix, char *data, Dwarf_Signed len)
diff --git a/libdwarf/ChangeLog b/libdwarf/ChangeLog
index 2e9f38d02..500b0770e 100644
--- a/libdwarf/ChangeLog
+++ b/libdwarf/ChangeLog
@@ -1,3 +1,18 @@
+2016-05-10 David Anderson
+    * dwarf_arange.c,dwarf_die_deliv.c: All read operations check for overrun.
+    * dwarf_errmsg_list.c: DW_DLE_HEADER_LEN_BIGGER_THAN_SECSIZE,
+      DW_DLE_LOCEXPR_OFF_SECTION_END, and DW_DLE_POINTER_SECTION_UNKNOWN
+      added to error values.
+    * dwarf_form.c,dwarf_frame.c,dwarf_frame2.c,dwarf_global.c,dwarf_line.c,
+      dwarf_line_table_reader_common.c,dwarf_loc.c,dwarf_loc2.c,
+      dwarf_macro5.c,dwarf_print_lines.c,dwarf_query.c,
+      dwarf_ranges.c,dwarf_util.c, dwarf_xu_index.c: All read 
+      operations check for overrun.
+    * dwarf_opaque.h: Put the 4 SGI-only section data
+      items next to each other to make it clear they
+      are such.
+    * dwarf_util.h: Added some checks to READ_AREA_LENGTH_CK
+    * libdwarf.h.in: Defined the new error names.
 2016-05-07-b David Anderson
     * libdwarf2.1.mm,libdwarf2p.1.mm: Fixed spelling errors.
     * libdwarf2.1.pdf,libdwarf2p.1.pdf: Regenerated.
diff --git a/libdwarf/dwarf_arange.c b/libdwarf/dwarf_arange.c
index 2be5ba722..fb9ff29cb 100644
--- a/libdwarf/dwarf_arange.c
+++ b/libdwarf/dwarf_arange.c
@@ -69,6 +69,7 @@ dwarf_get_aranges_list(Dwarf_Debug dbg,
     Dwarf_Signed arange_count = 0;
 
     Dwarf_Arange arange = 0;
+    Dwarf_Unsigned section_size = 0;
     Dwarf_Byte_Ptr arange_end_section = 0;
 
     /*  Used to chain Dwarf_Aranges structs. */
@@ -82,7 +83,8 @@ dwarf_get_aranges_list(Dwarf_Debug dbg,
 
     arange_ptr = dbg->de_debug_aranges.dss_data;
     arange_ptr_start = arange_ptr;
-    arange_end_section = arange_ptr + dbg->de_debug_aranges.dss_size;
+    section_size = dbg->de_debug_aranges.dss_size;
+    arange_end_section = arange_ptr + section_size;
 
     do {
         /*  Length of current set of aranges.
@@ -100,7 +102,9 @@ dwarf_get_aranges_list(Dwarf_Debug dbg,
         /* READ_AREA_LENGTH updates arange_ptr for consumed bytes */
         READ_AREA_LENGTH_CK(dbg, area_length, Dwarf_Unsigned,
             arange_ptr, local_length_size,
-            local_extension_size,error,arange_end_section);
+            local_extension_size,error,
+            section_size,
+            arange_end_section);
         /*  arange_ptr has been incremented appropriately past
             the length field by READ_AREA_LENGTH. */
         if ((area_length + local_length_size + local_extension_size) >
@@ -471,6 +475,8 @@ dwarf_get_cu_die_offset(Dwarf_Arange arange,
 {
     Dwarf_Debug dbg = 0;
     Dwarf_Off offset = 0;
+    Dwarf_Unsigned headerlen = 0;
+    int cres = 0;
 
     if (arange == NULL) {
         _dwarf_error(NULL, error, DW_DLE_ARANGE_NULL);
@@ -486,7 +492,13 @@ dwarf_get_cu_die_offset(Dwarf_Arange arange,
             return res;
         }
     }
-    *returned_offset = offset + _dwarf_length_of_cu_header(dbg, offset, true);
+
+    cres = _dwarf_length_of_cu_header(dbg, offset,
+        true, &headerlen,error);
+    if (cres != DW_DLV_OK) {
+        return cres;
+    }
+    *returned_offset =  headerlen + offset;
     return DW_DLV_OK;
 }
 
@@ -552,7 +564,9 @@ dwarf_get_arange_info(Dwarf_Arange arange,
         *length = arange->ar_length;
     if (cu_die_offset != NULL) {
         Dwarf_Debug dbg = arange->ar_dbg;
+        Dwarf_Off headerlen = 0;
         Dwarf_Off offset = arange->ar_info_offset;
+        int cres = 0;
 
         /* This applies to debug_info only, not to debug_types. */
         if (!dbg->de_debug_info.dss_data) {
@@ -561,8 +575,13 @@ dwarf_get_arange_info(Dwarf_Arange arange,
                 return res;
             }
         }
-        *cu_die_offset =
-            offset + _dwarf_length_of_cu_header(dbg, offset,true);
+
+        cres = _dwarf_length_of_cu_header(dbg, offset,
+            true, &headerlen,error);
+        if (cres != DW_DLV_OK) {
+            return cres;
+        }
+        *cu_die_offset = headerlen + offset;
     }
     return (DW_DLV_OK);
 }
@@ -597,6 +616,8 @@ dwarf_get_arange_info_b(Dwarf_Arange arange,
     if (cu_die_offset != NULL) {
         Dwarf_Debug dbg = arange->ar_dbg;
         Dwarf_Off offset = arange->ar_info_offset;
+        Dwarf_Unsigned headerlen = 0;
+        int cres = 0;
 
         /* This applies to debug_info only, not to debug_types. */
         if (!dbg->de_debug_info.dss_data) {
@@ -605,8 +626,13 @@ dwarf_get_arange_info_b(Dwarf_Arange arange,
                 return res;
             }
         }
-        *cu_die_offset =
-            offset + _dwarf_length_of_cu_header(dbg, offset,true);
+        cres = _dwarf_length_of_cu_header(dbg, offset,
+            true, &headerlen,error);
+        if (cres != DW_DLV_OK) {
+            return cres;
+        }
+        *cu_die_offset = offset + headerlen;
+
     }
     return (DW_DLV_OK);
 }
diff --git a/libdwarf/dwarf_die_deliv.c b/libdwarf/dwarf_die_deliv.c
index c6483558c..697746eb1 100644
--- a/libdwarf/dwarf_die_deliv.c
+++ b/libdwarf/dwarf_die_deliv.c
@@ -300,7 +300,7 @@ _dwarf_make_CU_Context(Dwarf_Debug dbg,
     /* READ_AREA_LENGTH updates cu_ptr for consumed bytes */
     READ_AREA_LENGTH_CK(dbg, length, Dwarf_Unsigned,
         cu_ptr, local_length_size, local_extension_size,
-        error,section_end_ptr);
+        error,section_size,section_end_ptr);
     cu_context->cc_length_size = local_length_size;
     cu_context->cc_extension_size = local_extension_size;
 
@@ -1280,16 +1280,19 @@ _dwarf_next_die_info_ptr(Dwarf_Byte_Ptr die_info_ptr,
                 break;
             case DW_FORM_ref2:
                 /* READ_UNALIGNED does not update info_ptr */
-                READ_UNALIGNED(dbg, offset, Dwarf_Unsigned,
-                    info_ptr, sizeof(Dwarf_Half));
+                READ_UNALIGNED_CK(dbg, offset, Dwarf_Unsigned,
+                    info_ptr, sizeof(Dwarf_Half),
+                    error,die_info_end);
                 break;
             case DW_FORM_ref4:
-                READ_UNALIGNED(dbg, offset, Dwarf_Unsigned,
-                    info_ptr, sizeof(Dwarf_ufixed));
+                READ_UNALIGNED_CK(dbg, offset, Dwarf_Unsigned,
+                    info_ptr, sizeof(Dwarf_ufixed),
+                    error,die_info_end);
                 break;
             case DW_FORM_ref8:
-                READ_UNALIGNED(dbg, offset, Dwarf_Unsigned,
-                    info_ptr, sizeof(Dwarf_Unsigned));
+                READ_UNALIGNED_CK(dbg, offset, Dwarf_Unsigned,
+                    info_ptr, sizeof(Dwarf_Unsigned),
+                    error,die_info_end);
                 break;
             case DW_FORM_ref_udata:
                 DECODE_LEB128_UWORD_CK(info_ptr, offset,
@@ -1444,6 +1447,7 @@ dwarf_siblingof_b(Dwarf_Debug dbg,
         Dwarf_Off off2;
         Dwarf_CU_Context context=0;
         Dwarf_Unsigned headerlen = 0;
+        int cres = 0;
 
         /*  If we've not loaded debug_info
             de_cu_context will be NULL. */
@@ -1456,7 +1460,11 @@ dwarf_siblingof_b(Dwarf_Debug dbg,
 
         off2 = context->cc_debug_offset;
         cu_info_start = dataptr + off2;
-        headerlen = _dwarf_length_of_cu_header(dbg, off2,is_info);
+        cres = _dwarf_length_of_cu_header(dbg, off2,is_info,
+            &headerlen,error);
+        if (cres != DW_DLV_OK) {
+            return cres;
+        }
         die_info_ptr = cu_info_start + headerlen;
         die_info_end = _dwarf_calculate_info_section_end_ptr(context);
         /*  Recording the CU die pointer so we can later access
diff --git a/libdwarf/dwarf_errmsg_list.c b/libdwarf/dwarf_errmsg_list.c
index 6baf99f23..1d3e726e4 100644
--- a/libdwarf/dwarf_errmsg_list.c
+++ b/libdwarf/dwarf_errmsg_list.c
@@ -418,6 +418,9 @@ const char *_dwarf_errmsgs[] = {
     "DW_DLE_CIE_INSTR_PTR_ERROR (339)",
     "DW_DLE_FDE_INSTR_PTR_ERROR (340)",
     "DW_DLE_FISSION_ADDITION_ERROR (341) Corrupt dwarf",
+    "DW_DLE_HEADER_LEN_BIGGER_THAN_SECSIZE (342) Corrupt dwarf",
+    "DW_DLE_LOCEXPR_OFF_SECTION_END (343) Corrupt dwarf",
+    "DW_DLE_POINTER_SECTION_UNKNOWN (344)",
 };
 
 #ifdef TESTING
diff --git a/libdwarf/dwarf_form.c b/libdwarf/dwarf_form.c
index 59d753c9a..b356c2969 100644
--- a/libdwarf/dwarf_form.c
+++ b/libdwarf/dwarf_form.c
@@ -353,18 +353,21 @@ dwarf_formref(Dwarf_Attribute attr,
         break;
 
     case DW_FORM_ref2:
-        READ_UNALIGNED(dbg, offset, Dwarf_Unsigned,
-            attr->ar_debug_ptr, sizeof(Dwarf_Half));
+        READ_UNALIGNED_CK(dbg, offset, Dwarf_Unsigned,
+            attr->ar_debug_ptr, sizeof(Dwarf_Half),
+            error,section_end);
         break;
 
     case DW_FORM_ref4:
-        READ_UNALIGNED(dbg, offset, Dwarf_Unsigned,
-            attr->ar_debug_ptr, sizeof(Dwarf_ufixed));
+        READ_UNALIGNED_CK(dbg, offset, Dwarf_Unsigned,
+            attr->ar_debug_ptr, sizeof(Dwarf_ufixed),
+            error,section_end);
         break;
 
     case DW_FORM_ref8:
-        READ_UNALIGNED(dbg, offset, Dwarf_Unsigned,
-            attr->ar_debug_ptr, sizeof(Dwarf_Unsigned));
+        READ_UNALIGNED_CK(dbg, offset, Dwarf_Unsigned,
+            attr->ar_debug_ptr, sizeof(Dwarf_Unsigned),
+            error,section_end);
         break;
 
     case DW_FORM_ref_udata: {
@@ -524,18 +527,21 @@ dwarf_global_formref(Dwarf_Attribute attr,
         goto fixoffset;
 
     case DW_FORM_ref2:
-        READ_UNALIGNED(dbg, offset, Dwarf_Unsigned,
-            attr->ar_debug_ptr, sizeof(Dwarf_Half));
+        READ_UNALIGNED_CK(dbg, offset, Dwarf_Unsigned,
+            attr->ar_debug_ptr, sizeof(Dwarf_Half),
+            error,section_end);
         goto fixoffset;
 
     case DW_FORM_ref4:
-        READ_UNALIGNED(dbg, offset, Dwarf_Unsigned,
-            attr->ar_debug_ptr, sizeof(Dwarf_ufixed));
+        READ_UNALIGNED_CK(dbg, offset, Dwarf_Unsigned,
+            attr->ar_debug_ptr, sizeof(Dwarf_ufixed),
+            error,section_end);
         goto fixoffset;
 
     case DW_FORM_ref8:
-        READ_UNALIGNED(dbg, offset, Dwarf_Unsigned,
-            attr->ar_debug_ptr, sizeof(Dwarf_Unsigned));
+        READ_UNALIGNED_CK(dbg, offset, Dwarf_Unsigned,
+            attr->ar_debug_ptr, sizeof(Dwarf_Unsigned),
+            error,section_end);
         goto fixoffset;
 
     case DW_FORM_ref_udata:
@@ -572,8 +578,9 @@ dwarf_global_formref(Dwarf_Attribute attr,
             _dwarf_error(dbg, error, DW_DLE_NOT_REF_FORM);
             return (DW_DLV_ERROR);
         }
-        READ_UNALIGNED(dbg, offset, Dwarf_Unsigned,
-            attr->ar_debug_ptr, sizeof(Dwarf_ufixed));
+        READ_UNALIGNED_CK(dbg, offset, Dwarf_Unsigned,
+            attr->ar_debug_ptr, sizeof(Dwarf_ufixed),
+            error, section_end);
         /* The offset is global. */
         break;
     case DW_FORM_data8:
@@ -581,8 +588,9 @@ dwarf_global_formref(Dwarf_Attribute attr,
             _dwarf_error(dbg, error, DW_DLE_NOT_REF_FORM);
             return (DW_DLV_ERROR);
         }
-        READ_UNALIGNED(dbg, offset, Dwarf_Unsigned,
-            attr->ar_debug_ptr, sizeof(Dwarf_Unsigned));
+        READ_UNALIGNED_CK(dbg, offset, Dwarf_Unsigned,
+            attr->ar_debug_ptr, sizeof(Dwarf_Unsigned),
+            error,section_end);
         /* The offset is global. */
         break;
     case DW_FORM_ref_addr:
@@ -598,11 +606,13 @@ dwarf_global_formref(Dwarf_Attribute attr,
                 length_size = cu_context->cc_length_size;
             }
             if (length_size == 4) {
-                READ_UNALIGNED(dbg, offset, Dwarf_Unsigned,
-                    attr->ar_debug_ptr, sizeof(Dwarf_ufixed));
+                READ_UNALIGNED_CK(dbg, offset, Dwarf_Unsigned,
+                    attr->ar_debug_ptr, sizeof(Dwarf_ufixed),
+                    error,section_end);
             } else if (length_size == 8) {
-                READ_UNALIGNED(dbg, offset, Dwarf_Unsigned,
-                    attr->ar_debug_ptr, sizeof(Dwarf_Unsigned));
+                READ_UNALIGNED_CK(dbg, offset, Dwarf_Unsigned,
+                    attr->ar_debug_ptr, sizeof(Dwarf_Unsigned),
+                    error,section_end);
             } else {
                 _dwarf_error(dbg, error, DW_DLE_FORM_SEC_OFFSET_LENGTH_BAD);
                 return (DW_DLV_ERROR);
@@ -621,11 +631,13 @@ dwarf_global_formref(Dwarf_Attribute attr,
                 the offset is not going to refer to .debug_info! */
             unsigned length_size = cu_context->cc_length_size;
             if (length_size == 4) {
-                READ_UNALIGNED(dbg, offset, Dwarf_Unsigned,
-                    attr->ar_debug_ptr, sizeof(Dwarf_ufixed));
+                READ_UNALIGNED_CK(dbg, offset, Dwarf_Unsigned,
+                    attr->ar_debug_ptr, sizeof(Dwarf_ufixed),
+                    error,section_end);
             } else if (length_size == 8) {
-                READ_UNALIGNED(dbg, offset, Dwarf_Unsigned,
-                    attr->ar_debug_ptr, sizeof(Dwarf_Unsigned));
+                READ_UNALIGNED_CK(dbg, offset, Dwarf_Unsigned,
+                    attr->ar_debug_ptr, sizeof(Dwarf_Unsigned),
+                    error,section_end);
             } else {
                 _dwarf_error(dbg, error, DW_DLE_FORM_SEC_OFFSET_LENGTH_BAD);
                 return (DW_DLV_ERROR);
@@ -773,10 +785,13 @@ dwarf_formaddr(Dwarf_Attribute attr,
             it is a reference inside the debug_info section. No longer
             allowed. */
         ) {
+        Dwarf_Small *section_end =
+            _dwarf_calculate_info_section_end_ptr(cu_context);
 
-        READ_UNALIGNED(dbg, ret_addr, Dwarf_Addr,
+        READ_UNALIGNED_CK(dbg, ret_addr, Dwarf_Addr,
             attr->ar_debug_ptr,
-            cu_context->cc_address_size);
+            cu_context->cc_address_size,
+            error,section_end);
         *return_addr = ret_addr;
         return (DW_DLV_OK);
     }
@@ -845,8 +860,9 @@ dwarf_formudata(Dwarf_Attribute attr,
     switch (attr->ar_attribute_form) {
 
     case DW_FORM_data1:
-        READ_UNALIGNED(dbg, ret_value, Dwarf_Unsigned,
-            attr->ar_debug_ptr, sizeof(Dwarf_Small));
+        READ_UNALIGNED_CK(dbg, ret_value, Dwarf_Unsigned,
+            attr->ar_debug_ptr, sizeof(Dwarf_Small),
+            error,section_end);
         *return_uval = ret_value;
         return DW_DLV_OK;
 
@@ -854,24 +870,27 @@ dwarf_formudata(Dwarf_Attribute attr,
         the right number bits and generates host order.
         So we can just assign to *return_uval. */
     case DW_FORM_data2:{
-        READ_UNALIGNED(dbg, ret_value, Dwarf_Unsigned,
-            attr->ar_debug_ptr, sizeof(Dwarf_Half));
+        READ_UNALIGNED_CK(dbg, ret_value, Dwarf_Unsigned,
+            attr->ar_debug_ptr, sizeof(Dwarf_Half),
+            error,section_end);
         *return_uval = ret_value;
         return DW_DLV_OK;
         }
 
     case DW_FORM_data4:{
-        READ_UNALIGNED(dbg, ret_value, Dwarf_Unsigned,
+        READ_UNALIGNED_CK(dbg, ret_value, Dwarf_Unsigned,
             attr->ar_debug_ptr,
-            sizeof(Dwarf_ufixed));
+            sizeof(Dwarf_ufixed),
+            error,section_end);
         *return_uval = ret_value;
         return DW_DLV_OK;
         }
 
     case DW_FORM_data8:{
-        READ_UNALIGNED(dbg, ret_value, Dwarf_Unsigned,
+        READ_UNALIGNED_CK(dbg, ret_value, Dwarf_Unsigned,
             attr->ar_debug_ptr,
-            sizeof(Dwarf_Unsigned));
+            sizeof(Dwarf_Unsigned),
+            error,section_end);
         *return_uval = ret_value;
         return DW_DLV_OK;
         }
@@ -922,26 +941,29 @@ dwarf_formsdata(Dwarf_Attribute attr,
         So we have to use a cast to get the
         value sign extended in the right way for each case. */
     case DW_FORM_data2:{
-        READ_UNALIGNED(dbg, ret_value, Dwarf_Signed,
+        READ_UNALIGNED_CK(dbg, ret_value, Dwarf_Signed,
             attr->ar_debug_ptr,
-            sizeof(Dwarf_Shalf));
+            sizeof(Dwarf_Shalf),
+            error,section_end);
         *return_sval = (Dwarf_Shalf) ret_value;
         return DW_DLV_OK;
 
         }
 
     case DW_FORM_data4:{
-        READ_UNALIGNED(dbg, ret_value, Dwarf_Signed,
+        READ_UNALIGNED_CK(dbg, ret_value, Dwarf_Signed,
             attr->ar_debug_ptr,
-            sizeof(Dwarf_sfixed));
+            sizeof(Dwarf_sfixed),
+            error,section_end);
         *return_sval = (Dwarf_sfixed) ret_value;
         return DW_DLV_OK;
         }
 
     case DW_FORM_data8:{
-        READ_UNALIGNED(dbg, ret_value, Dwarf_Signed,
+        READ_UNALIGNED_CK(dbg, ret_value, Dwarf_Signed,
             attr->ar_debug_ptr,
-            sizeof(Dwarf_Signed));
+            sizeof(Dwarf_Signed),
+            error,section_end);
         *return_sval = (Dwarf_Signed) ret_value;
         return DW_DLV_OK;
         }
diff --git a/libdwarf/dwarf_frame.c b/libdwarf/dwarf_frame.c
index 2a37a3c66..b6fda5c67 100644
--- a/libdwarf/dwarf_frame.c
+++ b/libdwarf/dwarf_frame.c
@@ -466,8 +466,9 @@ _dwarf_exec_frame_instr(Dwarf_Bool make_instr,
 
         case DW_CFA_advance_loc2:
             {
-                READ_UNALIGNED(dbg, adv_loc, Dwarf_Unsigned,
-                    instr_ptr, sizeof(Dwarf_Half));
+                READ_UNALIGNED_CK(dbg, adv_loc, Dwarf_Unsigned,
+                    instr_ptr, sizeof(Dwarf_Half),
+                    error,final_instr_ptr);
                 instr_ptr += sizeof(Dwarf_Half);
                 fp_offset = adv_loc;
 
@@ -488,8 +489,9 @@ _dwarf_exec_frame_instr(Dwarf_Bool make_instr,
 
         case DW_CFA_advance_loc4:
             {
-                READ_UNALIGNED(dbg, adv_loc, Dwarf_Unsigned,
-                    instr_ptr, sizeof(Dwarf_ufixed));
+                READ_UNALIGNED_CK(dbg, adv_loc, Dwarf_Unsigned,
+                    instr_ptr, sizeof(Dwarf_ufixed),
+                    error,final_instr_ptr);
                 instr_ptr += sizeof(Dwarf_ufixed);
                 fp_offset = adv_loc;
 
diff --git a/libdwarf/dwarf_frame2.c b/libdwarf/dwarf_frame2.c
index 560a0d092..e741707a2 100644
--- a/libdwarf/dwarf_frame2.c
+++ b/libdwarf/dwarf_frame2.c
@@ -1070,7 +1070,8 @@ dwarf_read_cie_fde_prefix(Dwarf_Debug dbg,
     /* READ_AREA_LENGTH updates frame_ptr for consumed bytes */
     READ_AREA_LENGTH_CK(dbg, length, Dwarf_Unsigned,
         frame_ptr, local_length_size,
-        local_extension_size,error,section_end);
+        local_extension_size,error,
+        section_length_in,section_end);
 
     if (length == 0) {
         /*  nul bytes at end of section, seen at end of egcs eh_frame
diff --git a/libdwarf/dwarf_global.c b/libdwarf/dwarf_global.c
index e72f47fce..523bbb5ca 100644
--- a/libdwarf/dwarf_global.c
+++ b/libdwarf/dwarf_global.c
@@ -221,17 +221,18 @@ _dwarf_internal_get_pubnames_like_data(Dwarf_Debug dbg,
         }
         /*  READ_AREA_LENGTH updates pubnames_like_ptr for consumed
             bytes. */
-        READ_AREA_LENGTH(dbg, length, Dwarf_Unsigned,
+        READ_AREA_LENGTH_CK(dbg, length, Dwarf_Unsigned,
             pubnames_like_ptr, local_length_size,
-            local_extension_size);
+            local_extension_size,error,section_length,section_end_ptr);
         pubnames_context->pu_length_size = local_length_size;
         pubnames_context->pu_extension_size = local_extension_size;
         pubnames_context->pu_dbg = dbg;
 
         pubnames_ptr_past_end_cu = pubnames_like_ptr + length;
 
-        READ_UNALIGNED(dbg, version, Dwarf_Half,
-            pubnames_like_ptr, sizeof(Dwarf_Half));
+        READ_UNALIGNED_CK(dbg, version, Dwarf_Half,
+            pubnames_like_ptr, sizeof(Dwarf_Half),
+            error,section_end_ptr);
         pubnames_like_ptr += sizeof(Dwarf_Half);
         /* ASSERT: DW_PUBNAMES_VERSION2 == DW_PUBTYPES_VERSION2 */
         if (version != DW_PUBNAMES_VERSION2) {
@@ -240,9 +241,10 @@ _dwarf_internal_get_pubnames_like_data(Dwarf_Debug dbg,
         }
 
         /* Offset of CU header in debug section. */
-        READ_UNALIGNED(dbg, pubnames_context->pu_offset_of_cu_header,
+        READ_UNALIGNED_CK(dbg, pubnames_context->pu_offset_of_cu_header,
             Dwarf_Off, pubnames_like_ptr,
-            pubnames_context->pu_length_size);
+            pubnames_context->pu_length_size,
+            error,section_end_ptr);
         pubnames_like_ptr += pubnames_context->pu_length_size;
 
         FIX_UP_OFFSET_IRIX_BUG(dbg,
@@ -250,9 +252,10 @@ _dwarf_internal_get_pubnames_like_data(Dwarf_Debug dbg,
             "pubnames cu header offset");
 
 
-        READ_UNALIGNED(dbg, pubnames_context->pu_info_length,
+        READ_UNALIGNED_CK(dbg, pubnames_context->pu_info_length,
             Dwarf_Unsigned, pubnames_like_ptr,
-            pubnames_context->pu_length_size);
+            pubnames_context->pu_length_size,
+            error,section_end_ptr);
         pubnames_like_ptr += pubnames_context->pu_length_size;
 
         if (pubnames_like_ptr > (section_data_ptr + section_length)) {
@@ -262,9 +265,10 @@ _dwarf_internal_get_pubnames_like_data(Dwarf_Debug dbg,
 
         /*  Read initial offset (of DIE within CU) of a pubname, final
             entry is not a pair, just a zero offset. */
-        READ_UNALIGNED(dbg, die_offset_in_cu, Dwarf_Off,
+        READ_UNALIGNED_CK(dbg, die_offset_in_cu, Dwarf_Off,
             pubnames_like_ptr,
-            pubnames_context->pu_length_size);
+            pubnames_context->pu_length_size,
+            error,section_end_ptr);
         pubnames_like_ptr += pubnames_context->pu_length_size;
         FIX_UP_OFFSET_IRIX_BUG(dbg,
             die_offset_in_cu, "offset of die in cu");
@@ -297,7 +301,6 @@ _dwarf_internal_get_pubnames_like_data(Dwarf_Debug dbg,
             pubnames_like_ptr = pubnames_like_ptr +
                 strlen((char *) pubnames_like_ptr) + 1;
 
-
             /* Finish off current entry chain */
             curr_chain =
                 (Dwarf_Chain) _dwarf_get_alloc(dbg, DW_DLA_CHAIN, 1);
@@ -317,13 +320,12 @@ _dwarf_internal_get_pubnames_like_data(Dwarf_Debug dbg,
             }
 
             /* Fead offset for the *next* entry */
-            READ_UNALIGNED(dbg, die_offset_in_cu, Dwarf_Off,
-                pubnames_like_ptr, pubnames_context->pu_length_size);
-
+            READ_UNALIGNED_CK(dbg, die_offset_in_cu, Dwarf_Off,
+                pubnames_like_ptr, pubnames_context->pu_length_size,
+                error,section_end_ptr);
             pubnames_like_ptr += pubnames_context->pu_length_size;
             FIX_UP_OFFSET_IRIX_BUG(dbg,
                 die_offset_in_cu, "offset of next die in cu");
-
             if (pubnames_like_ptr > (section_data_ptr + section_length)) {
                 _dwarf_error(dbg, error, length_err_num);
                 return (DW_DLV_ERROR);
@@ -510,6 +512,8 @@ dwarf_global_name_offsets(Dwarf_Global global,
 
     if (cu_die_offset != NULL) {
         /* Globals cannot refer to debug_types */
+        int cres = 0;
+        Dwarf_Unsigned headerlen = 0;
         int res = _dwarf_load_debug_info(dbg, error);
 
         if (res != DW_DLV_OK) {
@@ -524,10 +528,13 @@ dwarf_global_name_offsets(Dwarf_Global global,
             _dwarf_error(NULL, error, DW_DLE_OFFSET_BAD);
             return (DW_DLV_ERROR);
         }
-        *cu_die_offset = off + _dwarf_length_of_cu_header(dbg, off,true);
+        cres = _dwarf_length_of_cu_header(dbg, off,true,
+            &headerlen,error);
+        if(cres != DW_DLV_OK) {
+            return cres;
+        }
+        *cu_die_offset = off + headerlen;
     }
-
-
     return DW_DLV_OK;
 }
 
@@ -536,7 +543,9 @@ dwarf_global_name_offsets(Dwarf_Global global,
 
     New June, 2001.
     Used by SGI IRIX debuggers.
-    No error is possible.
+    No error used to be possible.
+    As of May 2016 an error is possible if the DWARF is
+    corrupted! (IRIX debuggers are no longer built ...)
 
     See also dwarf_CU_dieoffset_given_die().
 
@@ -552,12 +561,15 @@ dwarf_get_cu_die_offset_given_cu_header_offset(Dwarf_Debug dbg,
     Dwarf_Off * out_cu_die_offset,
     UNUSEDARG Dwarf_Error * err)
 {
-    Dwarf_Off len =
-        _dwarf_length_of_cu_header(dbg, in_cu_header_offset,true);
-
-    Dwarf_Off newoff = in_cu_header_offset + len;
+    Dwarf_Off headerlen = 0;
+    int cres = 0;
 
-    *out_cu_die_offset = newoff;
+    cres = _dwarf_length_of_cu_header(dbg, in_cu_header_offset,true,
+        &headerlen,err);
+    if (cres != DW_DLV_OK) {
+        return cres;
+    }
+    *out_cu_die_offset = in_cu_header_offset + headerlen;
     return DW_DLV_OK;
 }
 
@@ -577,12 +589,15 @@ dwarf_get_cu_die_offset_given_cu_header_offset_b(Dwarf_Debug dbg,
     Dwarf_Off * out_cu_die_offset,
     UNUSEDARG Dwarf_Error * err)
 {
-    Dwarf_Off len =
-        _dwarf_length_of_cu_header(dbg, in_cu_header_offset,is_info);
+    Dwarf_Off headerlen = 0;
+    int cres = 0;
 
-    Dwarf_Off newoff = in_cu_header_offset + len;
-
-    *out_cu_die_offset = newoff;
+    cres = _dwarf_length_of_cu_header(dbg, in_cu_header_offset,is_info,
+        &headerlen,err);
+    if (cres != DW_DLV_OK) {
+        return cres;
+    }
+    *out_cu_die_offset = in_cu_header_offset + headerlen;
     return DW_DLV_OK;
 }
 /*  dwarf_CU_dieoffset_given_die returns
diff --git a/libdwarf/dwarf_line.c b/libdwarf/dwarf_line.c
index 16d7715f9..03d8c13f0 100644
--- a/libdwarf/dwarf_line.c
+++ b/libdwarf/dwarf_line.c
@@ -306,6 +306,7 @@ dwarf_srcfiles(Dwarf_Die die,
     int lres = DW_DLV_ERROR;
     unsigned i = 0;
     int res = DW_DLV_ERROR;
+    Dwarf_Small *section_start = 0;
 
     /*  ***** BEGIN CODE ***** */
     /*  Reset error. */
@@ -334,7 +335,7 @@ dwarf_srcfiles(Dwarf_Die die,
     if (!dbg->de_debug_line.dss_size) {
         return (DW_DLV_NO_ENTRY);
     }
-
+    section_start = dbg->de_debug_line.dss_data;
 
     lres = dwarf_whatform(stmt_list_attr,&attrform,error);
     if (lres != DW_DLV_OK) {
@@ -392,6 +393,7 @@ dwarf_srcfiles(Dwarf_Die die,
         Dwarf_Small *line_ptr_out = 0;
         int dres = _dwarf_read_line_table_header(dbg,
             context,
+            section_start,
             line_ptr,
             dbg->de_debug_line.dss_size,
             &line_ptr_out,
@@ -640,7 +642,9 @@ _dwarf_internal_srclines(Dwarf_Die die,
         Dwarf_Small *newlinep = 0;
         int resp = _dwarf_read_line_table_header(dbg,
             cu_context,
-            line_ptr, dbg->de_debug_line.dss_size,
+            section_start,
+            line_ptr,
+            dbg->de_debug_line.dss_size,
             &newlinep,
             line_context,
             NULL,NULL,
@@ -1798,7 +1802,8 @@ _dwarf_decode_line_string_form(Dwarf_Debug dbg,
         secstart = dbg->de_debug_line_str.dss_data;
         secend = secstart + dbg->de_debug_line_str.dss_size;
 
-        READ_UNALIGNED(dbg, offset, Dwarf_Unsigned,offsetptr, offset_size);
+        READ_UNALIGNED_CK(dbg, offset, Dwarf_Unsigned,offsetptr, offset_size,
+            error,line_ptr_end);
         *line_ptr += offset_size;
         strptr = secstart + offset;
         res = _dwarf_check_string_valid(dbg,
diff --git a/libdwarf/dwarf_line_table_reader_common.c b/libdwarf/dwarf_line_table_reader_common.c
index 7bfa1bd53..e917545c7 100644
--- a/libdwarf/dwarf_line_table_reader_common.c
+++ b/libdwarf/dwarf_line_table_reader_common.c
@@ -133,8 +133,9 @@ operandmismatch(unsigned char * table,unsigned table_length,
 static int
 _dwarf_read_line_table_header(Dwarf_Debug dbg,
     Dwarf_CU_Context cu_context,
+    Dwarf_Small * section_start,
     Dwarf_Small * data_start,
-    Dwarf_Unsigned data_length,
+    Dwarf_Unsigned section_length,
     Dwarf_Small ** updated_data_start_out,
     Dwarf_Line_Context  line_context,
     Dwarf_Small ** bogus_bytes_ptr,
@@ -148,8 +149,8 @@ _dwarf_read_line_table_header(Dwarf_Debug dbg,
     int local_length_size = 0;
     int local_extension_size = 0;
     Dwarf_Unsigned prologue_length = 0;
-
     Dwarf_Half version = 0;
+    Dwarf_Small *section_end = section_start + section_length;
     Dwarf_Small *line_ptr_end = 0;
     Dwarf_Small *lp_begin = 0;
     int res = 0;
@@ -159,29 +160,27 @@ _dwarf_read_line_table_header(Dwarf_Debug dbg,
 
     line_context->lc_line_ptr_start = starting_line_ptr;
     /* READ_AREA_LENGTH updates line_ptr for consumed bytes */
-    READ_AREA_LENGTH(dbg, total_length, Dwarf_Unsigned,
-        line_ptr, local_length_size, local_extension_size);
+    READ_AREA_LENGTH_CK(dbg, total_length, Dwarf_Unsigned,
+        line_ptr, local_length_size, local_extension_size,
+        err, section_length,section_end);
 
     line_ptr_end = line_ptr + total_length;
     line_context->lc_line_ptr_end = line_ptr_end;
     line_context->lc_length_field_length = local_length_size +
         local_extension_size;
-    line_context->lc_section_offset = starting_line_ptr - dbg->de_debug_line.dss_data;
+    line_context->lc_section_offset = starting_line_ptr -
+        dbg->de_debug_line.dss_data;
     /*  ASSERT: line_context->lc_length_field_length == line_ptr
         -line_context->lc_line_ptr_start; */
-    if (line_ptr_end > dbg->de_debug_line.dss_data +
-        dbg->de_debug_line.dss_size) {
-        _dwarf_error(dbg, err, DW_DLE_DEBUG_LINE_LENGTH_BAD);
-        return (DW_DLV_ERROR);
-    }
-    if (line_ptr_end > starting_line_ptr + data_length) {
+    if (line_ptr_end > section_end) {
         _dwarf_error(dbg, err, DW_DLE_DEBUG_LINE_LENGTH_BAD);
         return (DW_DLV_ERROR);
     }
     line_context->lc_total_length = total_length;
 
-    READ_UNALIGNED(dbg, version, Dwarf_Half,
-        line_ptr, sizeof(Dwarf_Half));
+    READ_UNALIGNED_CK(dbg, version, Dwarf_Half,
+        line_ptr, sizeof(Dwarf_Half),
+        err,line_ptr_end);
     line_context->lc_version_number = version;
     line_ptr += sizeof(Dwarf_Half);
     if (version != DW_LINE_VERSION2 &&
@@ -204,11 +203,16 @@ _dwarf_read_line_table_header(Dwarf_Debug dbg,
             cu_context->cc_segment_selector_size;
     }
 
-    READ_UNALIGNED(dbg, prologue_length, Dwarf_Unsigned,
-        line_ptr, local_length_size);
+    READ_UNALIGNED_CK(dbg, prologue_length, Dwarf_Unsigned,
+        line_ptr, local_length_size,
+        err,line_ptr_end);
     line_context->lc_prologue_length = prologue_length;
     line_ptr += local_length_size;
     line_context->lc_line_prologue_start = line_ptr;
+    if(line_ptr >= line_ptr_end) {
+        _dwarf_error(dbg, err, DW_DLE_LINE_OFFSET_BAD);
+        return DW_DLV_ERROR;
+    }
 
 
     line_context->lc_minimum_instruction_length =
@@ -227,6 +231,10 @@ _dwarf_read_line_table_header(Dwarf_Debug dbg,
 
     line_context->lc_line_base = *(signed char *) line_ptr;
     line_ptr = line_ptr + sizeof(Dwarf_Sbyte);
+    if(line_ptr >= line_ptr_end) {
+        _dwarf_error(dbg, err, DW_DLE_LINE_OFFSET_BAD);
+        return DW_DLV_ERROR;
+    }
 
     line_context->lc_line_range = *(unsigned char *) line_ptr;
     if (!line_context->lc_line_range) {
@@ -234,6 +242,10 @@ _dwarf_read_line_table_header(Dwarf_Debug dbg,
         return DW_DLV_ERROR;
     }
     line_ptr = line_ptr + sizeof(Dwarf_Small);
+    if(line_ptr >= line_ptr_end) {
+        _dwarf_error(dbg, err, DW_DLE_LINE_OFFSET_BAD);
+        return DW_DLV_ERROR;
+    }
     line_context->lc_opcode_base = *(unsigned char *) line_ptr;
     line_ptr = line_ptr + sizeof(Dwarf_Small);
     /*  Set up the array of standard opcode lengths. */
@@ -245,6 +257,10 @@ _dwarf_read_line_table_header(Dwarf_Debug dbg,
     /*  lc_opcode_base is one greater than the size of the array. */
     line_ptr += line_context->lc_opcode_base - 1;
     line_context->lc_std_op_count = line_context->lc_opcode_base -1;
+    if(line_ptr >= line_ptr_end) {
+        _dwarf_error(dbg, err, DW_DLE_LINE_OFFSET_BAD);
+        return DW_DLV_ERROR;
+    }
     {
         /*  Determine (as best we can) whether the
             lc_opcode_length_table holds 9 or 12 standard-conforming
@@ -322,6 +338,10 @@ _dwarf_read_line_table_header(Dwarf_Debug dbg,
         }
     }
     /*  At this point we no longer need to check operand counts. */
+    if(line_ptr >= line_ptr_end) {
+        _dwarf_error(dbg, err, DW_DLE_LINE_OFFSET_BAD);
+        return DW_DLV_ERROR;
+    }
 
     if (version < DW_LINE_VERSION5){
         Dwarf_Unsigned directories_count = 0;
@@ -379,6 +399,10 @@ _dwarf_read_line_table_header(Dwarf_Debug dbg,
     } else {
         /* No old style directory entries. */
     }
+    if(line_ptr > line_ptr_end) {
+        _dwarf_error(dbg, err, DW_DLE_LINE_OFFSET_BAD);
+        return DW_DLV_ERROR;
+    }
     if (version < DW_LINE_VERSION5) {
         if (line_ptr >= line_ptr_end) {
             _dwarf_error(dbg, err, DW_DLE_LINE_NUMBER_HEADER_ERROR);
@@ -442,6 +466,10 @@ _dwarf_read_line_table_header(Dwarf_Debug dbg,
     } else {
         /* No old style filenames entries. */
     }
+    if(line_ptr > line_ptr_end) {
+        _dwarf_error(dbg, err, DW_DLE_LINE_OFFSET_BAD);
+        return DW_DLV_ERROR;
+    }
 
     if (version == EXPERIMENTAL_LINE_TABLES_VERSION) {
         static unsigned char expbytes[5] = {0,0xff,0xff,0x7f, 0x7f };
@@ -456,14 +484,18 @@ _dwarf_read_line_table_header(Dwarf_Debug dbg,
             }
             line_ptr++;
         }
-        READ_UNALIGNED(dbg, logicals_table_offset, Dwarf_Unsigned,
-            line_ptr, local_length_size);
+        READ_UNALIGNED_CK(dbg, logicals_table_offset, Dwarf_Unsigned,
+            line_ptr, local_length_size,err,line_ptr_end);
         line_context->lc_logicals_table_offset = logicals_table_offset;
         line_ptr += local_length_size;
-        READ_UNALIGNED(dbg, actuals_table_offset, Dwarf_Unsigned,
-            line_ptr, local_length_size);
+        READ_UNALIGNED_CK(dbg, actuals_table_offset, Dwarf_Unsigned,
+            line_ptr, local_length_size,err,line_ptr_end);
         line_context->lc_actuals_table_offset = actuals_table_offset;
         line_ptr += local_length_size;
+        if(line_ptr > line_ptr_end) {
+            _dwarf_error(dbg, err, DW_DLE_LINE_OFFSET_BAD);
+            return DW_DLV_ERROR;
+        }
     }
 
     if (version == DW_LINE_VERSION5 ||
@@ -491,10 +523,13 @@ _dwarf_read_line_table_header(Dwarf_Debug dbg,
             return (DW_DLV_ERROR);
         }
         for (i = 0; i < directory_format_count; i++) {
-            DECODE_LEB128_UWORD_CK(line_ptr, directory_entry_types[i],dbg,err,line_ptr_end);
-            DECODE_LEB128_UWORD_CK(line_ptr, directory_entry_forms[i],dbg,err,line_ptr_end);
+            DECODE_LEB128_UWORD_CK(line_ptr, directory_entry_types[i],
+                dbg,err,line_ptr_end);
+            DECODE_LEB128_UWORD_CK(line_ptr, directory_entry_forms[i],
+                dbg,err,line_ptr_end);
         }
-        DECODE_LEB128_UWORD_CK(line_ptr, directories_count,dbg,err,line_ptr_end);
+        DECODE_LEB128_UWORD_CK(line_ptr, directories_count,
+            dbg,err,line_ptr_end);
         line_context->lc_include_directories =
             malloc(sizeof(Dwarf_Small *) * directories_count);
         if (line_context->lc_include_directories == NULL) {
@@ -531,7 +566,7 @@ _dwarf_read_line_table_header(Dwarf_Debug dbg,
                     return (DW_DLV_ERROR);
                 }
             }
-            if (line_ptr >= line_ptr_end) {
+            if (line_ptr > line_ptr_end) {
                 free(directory_entry_types);
                 free(directory_entry_forms);
                 _dwarf_error(dbg, err,
@@ -653,8 +688,7 @@ _dwarf_read_line_table_header(Dwarf_Debug dbg,
                     _dwarf_error(dbg, err, DW_DLE_LINE_NUMBER_HEADER_ERROR);
                     return (DW_DLV_ERROR);
                 }
-                /*  Should this be just > ??? */
-                if (line_ptr >= line_ptr_end) {
+                if (line_ptr > line_ptr_end) {
                     free(filename_entry_types);
                     free(filename_entry_forms);
                     _dwarf_error(dbg, err, DW_DLE_LINE_NUMBER_HEADER_ERROR);
@@ -674,6 +708,10 @@ _dwarf_read_line_table_header(Dwarf_Debug dbg,
         Dwarf_Unsigned i = 0;
         Dwarf_Unsigned j = 0;
 
+        if (line_ptr > line_ptr_end) {
+            _dwarf_error(dbg, err, DW_DLE_LINE_NUMBER_HEADER_ERROR);
+            return (DW_DLV_ERROR);
+        }
         subprog_format_count = *(unsigned char *) line_ptr;
         line_ptr = line_ptr + sizeof(Dwarf_Small);
         subprog_entry_types = malloc(sizeof(Dwarf_Unsigned) *
@@ -779,6 +817,10 @@ _dwarf_read_line_table_header(Dwarf_Debug dbg,
         lp_begin = line_context->lc_line_prologue_start +
             line_context->lc_prologue_length;
     }
+    if(line_ptr > line_ptr_end) {
+        _dwarf_error(dbg, err, DW_DLE_LINE_OFFSET_BAD);
+        return DW_DLV_ERROR;
+    }
     if (line_ptr != lp_begin) {
         if (line_ptr > lp_begin) {
             _dwarf_error(dbg, err, DW_DLE_LINE_PROLOG_LENGTH_BAD);
@@ -1194,8 +1236,8 @@ read_line_table_program(Dwarf_Debug dbg,
                 }
                 break;
             case DW_LNS_fixed_advance_pc:{
-                READ_UNALIGNED(dbg, fixed_advance_pc, Dwarf_Half,
-                    line_ptr, sizeof(Dwarf_Half));
+                READ_UNALIGNED_CK(dbg, fixed_advance_pc, Dwarf_Half,
+                    line_ptr, sizeof(Dwarf_Half),error,line_ptr_end);
                 line_ptr += sizeof(Dwarf_Half);
                 regs.lr_address = regs.lr_address + fixed_advance_pc;
                 regs.lr_op_index = 0;
@@ -1440,8 +1482,8 @@ read_line_table_program(Dwarf_Debug dbg,
                 break;
 
             case DW_LNE_set_address:{
-                READ_UNALIGNED(dbg, regs.lr_address, Dwarf_Addr,
-                    line_ptr, address_size);
+                READ_UNALIGNED_CK(dbg, regs.lr_address, Dwarf_Addr,
+                    line_ptr, address_size,error,line_ptr_end);
                 /* Mark a line record as being DW_LNS_set_address */
                 is_addr_set = true;
 #ifdef PRINTING_DETAILS
diff --git a/libdwarf/dwarf_loc.c b/libdwarf/dwarf_loc.c
index 27c96ee92..bb970425f 100644
--- a/libdwarf/dwarf_loc.c
+++ b/libdwarf/dwarf_loc.c
@@ -41,7 +41,9 @@
     The address then follows immediately for
     that number of bytes. */
 static int
-read_encoded_addr(Dwarf_Small *loc_ptr, Dwarf_Debug dbg,
+read_encoded_addr(Dwarf_Small *loc_ptr,
+   Dwarf_Debug dbg,
+   Dwarf_Small *section_end_ptr,
    Dwarf_Unsigned * val_out,
    int * len_out,
    Dwarf_Error *error)
@@ -61,17 +63,20 @@ read_encoded_addr(Dwarf_Small *loc_ptr, Dwarf_Debug dbg,
         break;
 
     case 2:
-        READ_UNALIGNED(dbg, operand, Dwarf_Unsigned, loc_ptr, 2);
+        READ_UNALIGNED_CK(dbg, operand, Dwarf_Unsigned, loc_ptr, 2,
+            error,section_end_ptr);
         *val_out = operand;
         len +=2;
         break;
     case 4:
-        READ_UNALIGNED(dbg, operand, Dwarf_Unsigned, loc_ptr, 4);
+        READ_UNALIGNED_CK(dbg, operand, Dwarf_Unsigned, loc_ptr, 4,
+            error,section_end_ptr);
         *val_out = operand;
         len +=4;
         break;
     case 8:
-        READ_UNALIGNED(dbg, operand, Dwarf_Unsigned, loc_ptr, 8);
+        READ_UNALIGNED_CK(dbg, operand, Dwarf_Unsigned, loc_ptr, 8,
+            error,section_end_ptr);
         *val_out = operand;
         len +=8;
         break;
@@ -84,9 +89,6 @@ read_encoded_addr(Dwarf_Small *loc_ptr, Dwarf_Debug dbg,
     return DW_DLV_OK;
 }
 
-
-
-
 /*  Return DW_DLV_NO_ENTRY when at the end of
     the ops for this block (a single Dwarf_Loccesc
     and multiple Dwarf_Locs will eventually result
@@ -108,6 +110,7 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
     Dwarf_Half address_size, /* 2,4, 8  */
     Dwarf_Signed startoffset_in, /* offset in block,
         not section offset */
+    Dwarf_Small *section_end,
 
     /* nextoffset_out so caller knows next entry startoffset */
     Dwarf_Unsigned *nextoffset_out,
@@ -131,7 +134,10 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
     if (offset == loc_len) {
         return DW_DLV_NO_ENTRY;
     }
-
+    if ((loc_ptr+1) > section_end) {
+        _dwarf_error(dbg,error,DW_DLE_LOCEXPR_OFF_SECTION_END);
+        return DW_DLV_ERROR;
+    }
     memset(curr_loc,0,sizeof(*curr_loc));
 
     curr_loc->lr_opnumber = opnumber;
@@ -178,8 +184,8 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
         break;
 
     case DW_OP_regx:
-        operand1 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand1,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
         break;
 
@@ -219,8 +225,9 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
         break;
 
     case DW_OP_addr:
-        READ_UNALIGNED(dbg, operand1, Dwarf_Unsigned,
-            loc_ptr, address_size);
+        READ_UNALIGNED_CK(dbg, operand1, Dwarf_Unsigned,
+            loc_ptr, address_size,
+            error,section_end);
         loc_ptr += address_size;
         offset += address_size;
         break;
@@ -228,6 +235,10 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
     case DW_OP_const1u:
         operand1 = *(Dwarf_Small *) loc_ptr;
         loc_ptr = loc_ptr + 1;
+        if (loc_ptr > section_end) {
+            _dwarf_error(dbg,error,DW_DLE_LOCEXPR_OFF_SECTION_END);
+            return DW_DLV_ERROR;
+        }
         offset = offset + 1;
         break;
 
@@ -235,62 +246,72 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
         operand1 = *(Dwarf_Sbyte *) loc_ptr;
         SIGN_EXTEND(operand1,1);
         loc_ptr = loc_ptr + 1;
+        if (loc_ptr > section_end) {
+            _dwarf_error(dbg,error,DW_DLE_LOCEXPR_OFF_SECTION_END);
+            return DW_DLV_ERROR;
+        }
         offset = offset + 1;
         break;
 
     case DW_OP_const2u:
-        READ_UNALIGNED(dbg, operand1, Dwarf_Unsigned, loc_ptr, 2);
+        READ_UNALIGNED_CK(dbg, operand1, Dwarf_Unsigned, loc_ptr, 2,
+            error,section_end);
         loc_ptr = loc_ptr + 2;
         offset = offset + 2;
         break;
 
     case DW_OP_const2s:
-        READ_UNALIGNED(dbg, operand1, Dwarf_Unsigned, loc_ptr, 2);
+        READ_UNALIGNED_CK(dbg, operand1, Dwarf_Unsigned, loc_ptr, 2,
+            error, section_end);
         SIGN_EXTEND(operand1,2);
         loc_ptr = loc_ptr + 2;
         offset = offset + 2;
         break;
 
     case DW_OP_const4u:
-        READ_UNALIGNED(dbg, operand1, Dwarf_Unsigned, loc_ptr, 4);
+        READ_UNALIGNED_CK(dbg, operand1, Dwarf_Unsigned, loc_ptr, 4,
+            error, section_end);
         loc_ptr = loc_ptr + 4;
         offset = offset + 4;
         break;
 
     case DW_OP_const4s:
-        READ_UNALIGNED(dbg, operand1, Dwarf_Unsigned, loc_ptr, 4);
+        READ_UNALIGNED_CK(dbg, operand1, Dwarf_Unsigned, loc_ptr, 4,
+            error, section_end);
         SIGN_EXTEND(operand1,4);
         loc_ptr = loc_ptr + 4;
         offset = offset + 4;
         break;
 
     case DW_OP_const8u:
-        READ_UNALIGNED(dbg, operand1, Dwarf_Unsigned, loc_ptr, 8);
+        READ_UNALIGNED_CK(dbg, operand1, Dwarf_Unsigned, loc_ptr, 8,
+            error, section_end);
         loc_ptr = loc_ptr + 8;
         offset = offset + 8;
         break;
 
     case DW_OP_const8s:
-        READ_UNALIGNED(dbg, operand1, Dwarf_Unsigned, loc_ptr, 8);
+        READ_UNALIGNED_CK(dbg, operand1, Dwarf_Unsigned, loc_ptr, 8,
+            error, section_end);
         loc_ptr = loc_ptr + 8;
         offset = offset + 8;
         break;
 
     case DW_OP_constu:
-        operand1 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand1,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
         break;
 
     case DW_OP_consts:
-        operand1 = _dwarf_decode_s_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_SWORD_LEN_CK(loc_ptr, operand1,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
         break;
 
     case DW_OP_fbreg:
-        operand1 = _dwarf_decode_s_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_SWORD_LEN_CK(loc_ptr, operand1,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
         break;
 
@@ -326,19 +347,19 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
     case DW_OP_breg29:
     case DW_OP_breg30:
     case DW_OP_breg31:
-        operand1 = _dwarf_decode_s_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_SWORD_LEN_CK(loc_ptr, operand1,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
         break;
 
     case DW_OP_bregx:
         /* uleb reg num followed by sleb offset */
-        operand1 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand1,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
 
-        operand2 = _dwarf_decode_s_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_SWORD_LEN_CK(loc_ptr, operand2,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
         break;
 
@@ -349,6 +370,10 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
     case DW_OP_pick:
         operand1 = *(Dwarf_Small *) loc_ptr;
         loc_ptr = loc_ptr + 1;
+        if (loc_ptr > section_end) {
+            _dwarf_error(dbg,error,DW_DLE_LOCEXPR_OFF_SECTION_END);
+            return DW_DLV_ERROR;
+        }
         offset = offset + 1;
         break;
 
@@ -361,6 +386,10 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
     case DW_OP_deref_size:
         operand1 = *(Dwarf_Small *) loc_ptr;
         loc_ptr = loc_ptr + 1;
+        if (loc_ptr > section_end) {
+            _dwarf_error(dbg,error,DW_DLE_LOCEXPR_OFF_SECTION_END);
+            return DW_DLV_ERROR;
+        }
         offset = offset + 1;
         break;
 
@@ -370,9 +399,13 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
     case DW_OP_xderef_type:        /* DWARF5 */
         operand1 = *(Dwarf_Small *) loc_ptr;
         loc_ptr = loc_ptr + 1;
+        if (loc_ptr > section_end) {
+            _dwarf_error(dbg,error,DW_DLE_LOCEXPR_OFF_SECTION_END);
+            return DW_DLV_ERROR;
+        }
         offset = offset + 1;
-        operand2 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand2,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
 
         break;
@@ -380,6 +413,10 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
     case DW_OP_xderef_size:
         operand1 = *(Dwarf_Small *) loc_ptr;
         loc_ptr = loc_ptr + 1;
+        if (loc_ptr > section_end) {
+            _dwarf_error(dbg,error,DW_DLE_LOCEXPR_OFF_SECTION_END);
+            return DW_DLV_ERROR;
+        }
         offset = offset + 1;
         break;
 
@@ -396,8 +433,8 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
         break;
 
     case DW_OP_plus_uconst:
-        operand1 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand1,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
         break;
 
@@ -417,14 +454,15 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
 
     case DW_OP_skip:
     case DW_OP_bra:
-        READ_UNALIGNED(dbg, operand1, Dwarf_Unsigned, loc_ptr, 2);
+        READ_UNALIGNED_CK(dbg, operand1, Dwarf_Unsigned, loc_ptr, 2,
+            error,section_end);
         loc_ptr = loc_ptr + 2;
         offset = offset + 2;
         break;
 
     case DW_OP_piece:
-        operand1 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand1,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
         break;
 
@@ -433,19 +471,22 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
     case DW_OP_push_object_address: /* DWARF3 */
         break;
     case DW_OP_call2:       /* DWARF3 */
-        READ_UNALIGNED(dbg, operand1, Dwarf_Unsigned, loc_ptr, 2);
+        READ_UNALIGNED_CK(dbg, operand1, Dwarf_Unsigned, loc_ptr, 2,
+            error,section_end);
         loc_ptr = loc_ptr + 2;
         offset = offset + 2;
         break;
 
     case DW_OP_call4:       /* DWARF3 */
-        READ_UNALIGNED(dbg, operand1, Dwarf_Unsigned, loc_ptr, 4);
+        READ_UNALIGNED_CK(dbg, operand1, Dwarf_Unsigned, loc_ptr, 4,
+            error,section_end);
         loc_ptr = loc_ptr + 4;
         offset = offset + 4;
         break;
     case DW_OP_call_ref:    /* DWARF3 */
-        READ_UNALIGNED(dbg, operand1, Dwarf_Unsigned, loc_ptr,
-            offset_size);
+        READ_UNALIGNED_CK(dbg, operand1, Dwarf_Unsigned, loc_ptr,
+            offset_size,
+            error,section_end);
         loc_ptr = loc_ptr + offset_size;
         offset = offset + offset_size;
         break;
@@ -456,12 +497,12 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
         break;
     case DW_OP_bit_piece:   /* DWARF3f */
         /* uleb size in bits followed by uleb offset in bits */
-        operand1 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand1,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
 
-        operand2 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand2,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
         break;
 
@@ -477,19 +518,23 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
     case DW_OP_GNU_deref_type: /* 0xf6 */
         operand1 = *(Dwarf_Small *) loc_ptr;
         loc_ptr = loc_ptr + 1;
+        if (loc_ptr > section_end) {
+            _dwarf_error(dbg,error,DW_DLE_LOCEXPR_OFF_SECTION_END);
+            return DW_DLV_ERROR;
+        }
         offset = offset + 1;
 
         /* die offset (uleb128). */
-        operand2 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand2,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
         break;
 
     case DW_OP_implicit_value: /* DWARF4 0xa0 */
         /*  uleb length of value bytes followed by that
             number of bytes of the value. */
-        operand1 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand1,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
 
         /*  Second operand is block of 'operand1' bytes of stuff. */
@@ -499,6 +544,10 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
         operand2 = (Dwarf_Unsigned)loc_ptr;
         offset = offset + operand1;
         loc_ptr = loc_ptr + operand1;
+        if (loc_ptr > section_end) {
+            _dwarf_error(dbg,error,DW_DLE_LOCEXPR_OFF_SECTION_END);
+            return DW_DLV_ERROR;
+        }
         break;
     case DW_OP_stack_value:  /* DWARF4 */
         break;
@@ -515,12 +564,17 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
             The address then follows immediately for
             that number of bytes. */
         int length = 0;
-            int reares = read_encoded_addr(loc_ptr,dbg,&operand1,
-                &length,error);
+            int reares = read_encoded_addr(loc_ptr,dbg,
+                section_end,
+                &operand1, &length,error);
             if (reares != DW_DLV_OK) {
                 return reares;
             }
             loc_ptr += length;
+            if (loc_ptr > section_end) {
+                _dwarf_error(dbg,error,DW_DLE_LOCEXPR_OFF_SECTION_END);
+                return DW_DLV_ERROR;
+            }
             offset  += length;
         }
         break;
@@ -538,13 +592,17 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
         if (version_stamp == DW_CU_VERSION2 /* 2 */ ) {
             iplen = address_size;
         }
-        READ_UNALIGNED(dbg, operand1, Dwarf_Unsigned, loc_ptr,
-            iplen);
+        READ_UNALIGNED_CK(dbg, operand1, Dwarf_Unsigned, loc_ptr,
+            iplen,error,section_end);
         loc_ptr = loc_ptr + iplen;
+        if (loc_ptr > section_end) {
+            _dwarf_error(dbg,error,DW_DLE_LOCEXPR_OFF_SECTION_END);
+            return DW_DLV_ERROR;
+        }
         offset = offset + iplen;
 
-        operand2 = _dwarf_decode_s_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_SWORD_LEN_CK(loc_ptr, operand2,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
         }
 
@@ -559,8 +617,8 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
 
         /*  uleb length of value bytes followed by that
             number of bytes of the value. */
-        operand1 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand1,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
 
         /*  Second operand is block of 'operand1' bytes of stuff. */
@@ -570,13 +628,17 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
         operand2 = (Dwarf_Unsigned)loc_ptr;
         offset = offset + operand1;
         loc_ptr = loc_ptr + operand1;
+        if (loc_ptr > section_end) {
+            _dwarf_error(dbg,error,DW_DLE_LOCEXPR_OFF_SECTION_END);
+            return DW_DLV_ERROR;
+        }
         break;
     case DW_OP_const_type:           /* DWARF5 */
     case DW_OP_GNU_const_type:       /* 0xf4 */
         {
         /* die offset as uleb. */
-        operand1 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand1,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
 
         /*  Next byte is size of following data block.  */
@@ -589,6 +651,10 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
         /*  This gets an ugly compiler warning. Sorry. */
         operand3 = (Dwarf_Unsigned) loc_ptr;
         loc_ptr = loc_ptr + operand2;
+        if (loc_ptr > section_end) {
+            _dwarf_error(dbg,error,DW_DLE_LOCEXPR_OFF_SECTION_END);
+            return DW_DLV_ERROR;
+        }
         offset = offset + operand2;
         }
         break;
@@ -596,12 +662,12 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
     case DW_OP_regval_type:           /* DWARF5 */
     case DW_OP_GNU_regval_type:       /* 0xf5 */
         /* reg num uleb*/
-        operand1 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand1,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
         /* cu die off uleb*/
-        operand2 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand2,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
         break;
     case DW_OP_convert:           /* DWARF5 */
@@ -609,13 +675,14 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
     case DW_OP_reinterpret:       /* DWARF5 */
     case DW_OP_GNU_reinterpret:       /* 0xf9 */
         /* die offset  or zero */
-        operand1 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand1,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
         break;
     case DW_OP_GNU_parameter_ref :       /* 0xfa */
         /* 4 byte unsigned int */
-        READ_UNALIGNED(dbg, operand1, Dwarf_Unsigned, loc_ptr, 4);
+        READ_UNALIGNED_CK(dbg, operand1, Dwarf_Unsigned, loc_ptr, 4,
+            error,section_end);;
         loc_ptr = loc_ptr + 4;
         offset = offset + 4;
         break;
@@ -623,23 +690,26 @@ _dwarf_read_loc_expr_op(Dwarf_Debug dbg,
     case DW_OP_GNU_addr_index :  /* 0xfb DebugFission */
         /*  Index into .debug_addr. The value in .debug_addr
             is an address. */
-        operand1 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand1,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
         break;
     case DW_OP_constx :          /* DWARF5 */
     case DW_OP_GNU_const_index : /* 0xfc DebugFission */
         /*  Index into .debug_addr. The value in .debug_addr
             is a constant that fits in an address. */
-        operand1 = _dwarf_decode_u_leb128(loc_ptr, &leb128_length);
-        loc_ptr = loc_ptr + leb128_length;
+        DECODE_LEB128_UWORD_LEN_CK(loc_ptr, operand1,leb128_length,
+            dbg,error,section_end);
         offset = offset + leb128_length;
         break;
     default:
         _dwarf_error(dbg, error, DW_DLE_LOC_EXPR_BAD);
         return DW_DLV_ERROR;
     }
-
+    if (loc_ptr > section_end) {
+        _dwarf_error(dbg,error,DW_DLE_LOCEXPR_OFF_SECTION_END);
+        return DW_DLV_ERROR;
+    }
     /* If offset == loc_len this would be normal end-of-expression. */
     if (offset > loc_len) {
         /*  We stepped past the end of the expression.
@@ -686,6 +756,7 @@ _dwarf_get_locdesc(Dwarf_Debug dbg,
     Dwarf_Small version_stamp,
     Dwarf_Addr lowpc,
     Dwarf_Addr highpc,
+    Dwarf_Small * section_end,
     Dwarf_Locdesc ** locdesc_out,
     Dwarf_Error * error)
 {
@@ -719,6 +790,7 @@ _dwarf_get_locdesc(Dwarf_Debug dbg,
     if (res != DW_DLV_OK) {
         return res;
     }
+
     /* OLD loop getting Loc operators. No DWARF5 */
     while (offset <= loc_block->bl_len) {
         Dwarf_Unsigned nextoffset = 0;
@@ -730,6 +802,7 @@ _dwarf_get_locdesc(Dwarf_Debug dbg,
             offset_size,
             address_size,
             offset,
+            section_end,
             &nextoffset,
             &temp_loc,
             error);
@@ -820,6 +893,7 @@ _dwarf_read_loc_section(Dwarf_Debug dbg,
     Dwarf_Error * error)
 {
     Dwarf_Small *beg = dbg->de_debug_loc.dss_data + sec_offset;
+    Dwarf_Small *loc_section_end = beg + dbg->de_debug_loc.dss_size;
 
     /*  start_addr and end_addr are actually offsets
         of the applicable base address of the CU.
@@ -842,9 +916,11 @@ _dwarf_read_loc_section(Dwarf_Debug dbg,
     }
 
 
-    READ_UNALIGNED(dbg, start_addr, Dwarf_Addr, beg, address_size);
-    READ_UNALIGNED(dbg, end_addr, Dwarf_Addr,
-        beg + address_size, address_size);
+    READ_UNALIGNED_CK(dbg, start_addr, Dwarf_Addr, beg, address_size,
+        error,loc_section_end);
+    READ_UNALIGNED_CK(dbg, end_addr, Dwarf_Addr,
+        beg + address_size, address_size,
+        error,loc_section_end);
     if (start_addr == 0 && end_addr == 0) {
         /*  If start_addr and end_addr are 0, it's the end and no
             exprblock_size field follows. */
@@ -856,8 +932,9 @@ _dwarf_read_loc_section(Dwarf_Debug dbg,
         exprblock_size = 0;
         exprblock_off -= sizeof(Dwarf_Half);
     } else {
-        READ_UNALIGNED(dbg, exprblock_size, Dwarf_Half,
-            beg + 2 * address_size, sizeof(Dwarf_Half));
+        READ_UNALIGNED_CK(dbg, exprblock_size, Dwarf_Half,
+            beg + 2 * address_size, sizeof(Dwarf_Half),
+            error,loc_section_end);
         /* exprblock_size can be zero, means no expression */
         if ((sec_offset +exprblock_off + exprblock_size) >
             dbg->de_debug_loc.dss_size) {
@@ -1034,7 +1111,7 @@ dwarf_loclist_n(Dwarf_Attribute attr,
     Dwarf_Locdesc *** llbuf_out,
     Dwarf_Signed * listlen_out, Dwarf_Error * error)
 {
-    Dwarf_Debug dbg;
+    Dwarf_Debug dbg = 0;
 
     /*  Dwarf_Attribute that describes the DW_AT_location in die, if
         present. */
@@ -1058,12 +1135,14 @@ dwarf_loclist_n(Dwarf_Attribute attr,
 
     int blkres = DW_DLV_ERROR;
     int setup_res = DW_DLV_ERROR;
+    Dwarf_Small * info_section_end = 0;
 
     /* ***** BEGIN CODE ***** */
     setup_res = _dwarf_setup_loc(attr, &dbg,&cucontext, &form, error);
     if (setup_res != DW_DLV_OK) {
         return setup_res;
     }
+    info_section_end = _dwarf_calculate_info_section_end_ptr(cucontext);
     cuvstamp = cucontext->cc_version_stamp;
     address_size = cucontext->cc_address_size;
     /*  If this is a form_block then it's a location expression. If it's
@@ -1080,6 +1159,7 @@ dwarf_loclist_n(Dwarf_Attribute attr,
 
         /*  A reference to .debug_loc, with an offset in .debug_loc of a
             loclist */
+        Dwarf_Small *loc_section_end = 0;
         Dwarf_Unsigned loclist_offset = 0;
         int off_res  = DW_DLV_ERROR;
         int count_res = DW_DLV_ERROR;
@@ -1113,8 +1193,11 @@ dwarf_loclist_n(Dwarf_Attribute attr,
             return (DW_DLV_ERROR);
         }
 
+        loc_section_end = dbg->de_debug_loc.dss_data+
+            dbg->de_debug_loc.dss_size;
         for (lli = 0; lli < loclist_count; ++lli) {
             int lres = 0;
+
             blkres = _dwarf_read_loc_section(dbg, &loc_block,
                 &lowpc,
                 &highpc,
@@ -1125,11 +1208,14 @@ dwarf_loclist_n(Dwarf_Attribute attr,
                 _dwarf_cleanup_llbuf(dbg, llbuf, lli);
                 return (blkres);
             }
+            loc_section_end = dbg->de_debug_loc.dss_data+
+                dbg->de_debug_loc.dss_size;
             lres = _dwarf_get_locdesc(dbg, &loc_block,
                 address_size,
                 cucontext->cc_length_size,
                 cucontext->cc_version_stamp,
                 lowpc, highpc,
+                loc_section_end,
                 &locdesc,
                 error);
             if (lres != DW_DLV_OK) {
@@ -1183,6 +1269,7 @@ dwarf_loclist_n(Dwarf_Attribute attr,
             cucontext->cc_length_size,
             cucontext->cc_version_stamp,
             lowpc, highpc,
+            info_section_end,
             &locdesc,
             error);
         if (blkres != DW_DLV_OK) {
@@ -1236,6 +1323,7 @@ dwarf_loclist(Dwarf_Attribute attr,
     /*  A pointer to the current Dwarf_Locdesc read. */
     Dwarf_Locdesc *locdesc = 0;
 
+    Dwarf_Small *info_section_end = 0;
     Dwarf_Half form = 0;
     Dwarf_Addr lowpc = 0;
     Dwarf_Addr highpc = 0;
@@ -1251,6 +1339,7 @@ dwarf_loclist(Dwarf_Attribute attr,
     if (setup_res != DW_DLV_OK) {
         return setup_res;
     }
+    info_section_end = _dwarf_calculate_info_section_end_ptr(cucontext);
     cuvstamp = cucontext->cc_version_stamp;
     address_size = cucontext->cc_address_size;
     /*  If this is a form_block then it's a location expression. If it's
@@ -1327,6 +1416,7 @@ dwarf_loclist(Dwarf_Attribute attr,
         cucontext->cc_length_size,
         cucontext->cc_version_stamp,
         lowpc, highpc,
+        info_section_end,
         &locdesc,
         error);
     if (blkres != DW_DLV_OK) {
@@ -1442,6 +1532,19 @@ dwarf_loclist_from_expr_b(Dwarf_Debug dbg,
     Dwarf_Addr highpc = (Dwarf_Unsigned) (-1LL);
     Dwarf_Small version_stamp = dwarf_version;
     int res = 0;
+    /* We do not know what the end is in this interface. */
+    Dwarf_Small *section_start = 0;
+    Dwarf_Unsigned section_size = 0;
+    Dwarf_Small *section_end = 0;
+    const char *section_name = 0;
+
+    res = _dwarf_what_section_are_we(dbg,
+        expression_in,&section_name,&section_start,
+        &section_size,&section_end,error);
+    if (res != DW_DLV_OK) {
+        _dwarf_error(dbg, error,DW_DLE_POINTER_SECTION_UNKNOWN);
+        return DW_DLV_ERROR;
+    }
 
     memset(&loc_block,0,sizeof(loc_block));
     loc_block.bl_len = expression_length;
@@ -1460,16 +1563,17 @@ dwarf_loclist_from_expr_b(Dwarf_Debug dbg,
         offset_size,
         version_stamp,
         lowpc, highpc,
+        section_end,
         &locdesc,
         error);
     if (res != DW_DLV_OK) {
         /* low level error already set: let it be passed back */
-        return (DW_DLV_ERROR);
+        return res;
     }
 
     *llbuf = locdesc;
     *listlen = 1;
-    return (DW_DLV_OK);
+    return DW_DLV_OK;
 }
 
 /* Usable to read a single loclist or to read a block of them
diff --git a/libdwarf/dwarf_loc2.c b/libdwarf/dwarf_loc2.c
index 1e4774fab..169a8bb19 100644
--- a/libdwarf/dwarf_loc2.c
+++ b/libdwarf/dwarf_loc2.c
@@ -79,18 +79,28 @@ _dwarf_get_locdesc_c(Dwarf_Debug dbg,
 
     /* Contiguous block of Dwarf_Loc's for Dwarf_Locdesc. */
     Dwarf_Loc_c block_loc = 0;
-
     Dwarf_Locdesc_c locdesc = loc_head->ll_locdesc + locdesc_index;
-
     Dwarf_Unsigned i = 0;
     int res = 0;
+    Dwarf_Small *section_start = 0;
+    Dwarf_Unsigned section_size = 0;
+    Dwarf_Small *section_end = 0;
+    const char *section_name = 0;
+    Dwarf_Small *blockdataptr = 0;
 
     /* ***** BEGIN CODE ***** */
+    blockdataptr = loc_block->bl_data;
+    res = _dwarf_what_section_are_we(dbg,
+        blockdataptr,&section_name,&section_start,
+        &section_size,&section_end,error);
+    if (res != DW_DLV_OK) {
+        _dwarf_error(dbg, error,DW_DLE_POINTER_SECTION_UNKNOWN);
+        return DW_DLV_ERROR;
+    }
     res = _dwarf_loc_block_sanity_check(dbg,loc_block,error);
     if (res != DW_DLV_OK) {
         return res;
     }
-
     /* New loop getting Loc operators. Non DWO */
     while (offset <= loc_block->bl_len) {
         Dwarf_Unsigned nextoffset = 0;
@@ -102,6 +112,7 @@ _dwarf_get_locdesc_c(Dwarf_Debug dbg,
             offset_size,
             address_size,
             offset,
+            section_end,
             &nextoffset,
             &temp_loc,
             error);
@@ -244,8 +255,9 @@ _dwarf_read_loc_section_dwo(Dwarf_Debug dbg,
         *lowpc=addr_indexs;
         *highpc=addr_indexe;
 
-        READ_UNALIGNED(dbg, exprlen, Dwarf_Half, locptr,
-            sizeof(exprlen));
+        READ_UNALIGNED_CK(dbg, exprlen, Dwarf_Half, locptr,
+            sizeof(exprlen),
+            error,section_end);
         locptr += sizeof(exprlen);
         expr_offset += sizeof(exprlen);
 
@@ -270,13 +282,15 @@ _dwarf_read_loc_section_dwo(Dwarf_Debug dbg,
             dbg,error,section_end);
         expr_offset +=leb128_length;
 
-        READ_UNALIGNED(dbg, range_length, Dwarf_ufixed, locptr,
-            sizeof(range_length));
+        READ_UNALIGNED_CK(dbg, range_length, Dwarf_ufixed, locptr,
+            sizeof(range_length),
+            error,section_end);
         locptr += sizeof(range_length);
         expr_offset += sizeof(range_length);
 
-        READ_UNALIGNED(dbg, exprlen, Dwarf_Half, locptr,
-            sizeof(exprlen));
+        READ_UNALIGNED_CK(dbg, exprlen, Dwarf_Half, locptr,
+            sizeof(exprlen),
+            error,section_end);
         locptr += sizeof(exprlen);
         expr_offset += sizeof(exprlen);
 
@@ -299,20 +313,23 @@ _dwarf_read_loc_section_dwo(Dwarf_Debug dbg,
         Dwarf_ufixed  endoffset = 0;
         Dwarf_Half exprlen = 0;
 
-        READ_UNALIGNED(dbg, startoffset, Dwarf_ufixed, locptr,
-            sizeof(startoffset));
+        READ_UNALIGNED_CK(dbg, startoffset, Dwarf_ufixed, locptr,
+            sizeof(startoffset),
+            error,section_end);
         locptr += sizeof(startoffset);
         expr_offset += sizeof(startoffset);
 
-        READ_UNALIGNED(dbg, endoffset, Dwarf_ufixed, locptr,
-            sizeof(endoffset));
+        READ_UNALIGNED_CK(dbg, endoffset, Dwarf_ufixed, locptr,
+            sizeof(endoffset),
+            error,section_end);
         locptr += sizeof(endoffset);
         expr_offset += sizeof(endoffset);
         *lowpc= startoffset;
         *highpc = endoffset;
 
-        READ_UNALIGNED(dbg, exprlen, Dwarf_Half, locptr,
-            sizeof(exprlen));
+        READ_UNALIGNED_CK(dbg, exprlen, Dwarf_Half, locptr,
+            sizeof(exprlen),
+            error,section_end);
         locptr += sizeof(exprlen);
         expr_offset += sizeof(exprlen);
 
@@ -682,6 +699,8 @@ dwarf_get_loclist_c(Dwarf_Attribute attr,
     *listlen_out = listlen;
     return (DW_DLV_OK);
 }
+
+/* An interface giving us no cu context! */
 int
 dwarf_loclist_from_expr_c(Dwarf_Debug dbg,
     Dwarf_Ptr expression_in,
diff --git a/libdwarf/dwarf_macro5.c b/libdwarf/dwarf_macro5.c
index 73f40c71e..8add0d41e 100644
--- a/libdwarf/dwarf_macro5.c
+++ b/libdwarf/dwarf_macro5.c
@@ -162,15 +162,17 @@ _dwarf_skim_forms(Dwarf_Debug dbg,
             mdata += v+1;
             break;
         case DW_FORM_block2:
-            READ_UNALIGNED(dbg, ret_value, Dwarf_Unsigned,
-                mdata, sizeof(Dwarf_Half));
+            READ_UNALIGNED_CK(dbg, ret_value, Dwarf_Unsigned,
+                mdata, sizeof(Dwarf_Half),
+                error,section_end);
             v = ret_value + sizeof(Dwarf_Half);
             totallen += v;
             mdata += v;
             break;
         case DW_FORM_block4:
-            READ_UNALIGNED(dbg, ret_value, Dwarf_Unsigned,
-                mdata, sizeof(Dwarf_ufixed));
+            READ_UNALIGNED_CK(dbg, ret_value, Dwarf_Unsigned,
+                mdata, sizeof(Dwarf_ufixed),
+                error,section_end);
             v = ret_value + sizeof(Dwarf_ufixed);
             totallen += v;
             mdata += v;
@@ -509,8 +511,9 @@ dwarf_get_macro_defundef(Dwarf_Macro_Context macro_context,
 
         DECODE_LEB128_UWORD_CK(mdata,linenum,
             dbg, error,endptr);
-        READ_UNALIGNED(dbg,stringoffset,Dwarf_Unsigned,
-            mdata,macro_context->mc_offset_size);
+        READ_UNALIGNED_CK(dbg,stringoffset,Dwarf_Unsigned,
+            mdata,macro_context->mc_offset_size,
+            error,endptr);
         mdata += macro_context->mc_offset_size;
         res = _dwarf_extract_local_debug_str_string_given_offset(dbg,
             form1,
@@ -596,8 +599,9 @@ dwarf_get_macro_defundef(Dwarf_Macro_Context macro_context,
 
         DECODE_LEB128_UWORD_CK(mdata,linenum,
             dbg, error,endptr);
-        READ_UNALIGNED(dbg,supoffset,Dwarf_Unsigned,
-            mdata,macro_context->mc_offset_size);
+        READ_UNALIGNED_CK(dbg,supoffset,Dwarf_Unsigned,
+            mdata,macro_context->mc_offset_size,
+            error,endptr);
         mdata += macro_context->mc_offset_size;
         *line_number = linenum;
         *index = 0;
@@ -758,14 +762,39 @@ dwarf_get_macro_startend_file(Dwarf_Macro_Context macro_context,
             FOR DWARF 5 do not decrement. */
         if(macro_context->mc_version_number >= 5) {
             trueindex = srcindex;
-            if (trueindex >= 0 &&
-                trueindex < macro_context->mc_srcfiles_count) {
+            if (trueindex < 0) {
+                *src_file_name = "<source-file-index-low-no-name-available>";
+                return DW_DLV_OK;
+            }
+            if (trueindex < macro_context->mc_srcfiles_count) {
                 *src_file_name = macro_context->mc_srcfiles[trueindex];
+                return DW_DLV_OK;
             } else {
-                *src_file_name = "<no-source-file-name-available>";
+                *src_file_name = 
+                    "<src-index-high-no-source-file-name-available>";
+                return DW_DLV_OK;
             }
         } else {
-            trueindex = srcindex-1;
+            /* Unsigned to signed here. */
+            trueindex = srcindex;
+            /* Protects against crazy big srcindex, overflow territory. */
+            if (trueindex < 0 ) {
+                /* Something insane here. */
+                *src_file_name = "<source-file-index-low-no-name-available>";
+                return DW_DLV_OK;
+            }
+            /* Protects against crazy big srcindex, overflow territory. */
+            if (trueindex > (macro_context->mc_srcfiles_count+1)) {
+                /* Something insane here. */
+                *src_file_name = 
+                    "<source-file-index-high-no-name-available>";
+                return DW_DLV_OK;
+            }
+            --trueindex;
+            if (trueindex > macro_context->mc_srcfiles_count) {
+                *src_file_name = 
+                    "<adjusted-source-file-index-high-no-name-available>";
+            }
             if (srcindex > 0 &&
                 trueindex < macro_context->mc_srcfiles_count) {
                 *src_file_name = macro_context->mc_srcfiles[trueindex];
@@ -800,6 +829,8 @@ dwarf_get_macro_import(Dwarf_Macro_Context macro_context,
     unsigned macop = 0;
     struct Dwarf_Macro_Operator_s *curop = 0;
     Dwarf_Small *mdata = 0;
+    Dwarf_Byte_Ptr startptr =  0;
+    Dwarf_Byte_Ptr endptr =  0;
 
     if (!macro_context || macro_context->mc_sentinel != 0xada) {
         if(macro_context) {
@@ -808,6 +839,8 @@ dwarf_get_macro_import(Dwarf_Macro_Context macro_context,
         _dwarf_error(dbg, error,DW_DLE_BAD_MACRO_HEADER_POINTER);
         return DW_DLV_ERROR;
     }
+    startptr = macro_context->mc_macro_header;
+    endptr = startptr + macro_context->mc_total_length;
     dbg = macro_context->mc_dbg;
     if (op_number >= macro_context->mc_macro_ops_count) {
         _dwarf_error(dbg, error,DW_DLE_BAD_MACRO_INDEX);
@@ -819,8 +852,9 @@ dwarf_get_macro_import(Dwarf_Macro_Context macro_context,
     if (macop != DW_MACRO_import && macop != DW_MACRO_import_sup) {
         return DW_DLV_NO_ENTRY;
     }
-    READ_UNALIGNED(dbg,supoffset,Dwarf_Unsigned,
-        mdata,macro_context->mc_offset_size);
+    READ_UNALIGNED_CK(dbg,supoffset,Dwarf_Unsigned,
+        mdata,macro_context->mc_offset_size,
+        error,endptr);
     *target_offset = supoffset;
     return DW_DLV_OK;
 }
@@ -976,8 +1010,9 @@ read_operands_table(Dwarf_Macro_Context macro_context,
             _dwarf_error(dbg, error, DW_DLE_MACRO_OFFSET_BAD);
             return (DW_DLV_ERROR);
         }
-        READ_UNALIGNED(dbg,opcode_number,Dwarf_Small,
-            macro_data,sizeof(Dwarf_Small));
+        READ_UNALIGNED_CK(dbg,opcode_number,Dwarf_Small,
+            macro_data,sizeof(Dwarf_Small),
+            error,endptr);
         macro_data += sizeof(Dwarf_Small);
         DECODE_LEB128_UWORD_CK(macro_data,formcount,
             dbg, error, endptr);
diff --git a/libdwarf/dwarf_opaque.h b/libdwarf/dwarf_opaque.h
index ad32cef42..08125f4a2 100644
--- a/libdwarf/dwarf_opaque.h
+++ b/libdwarf/dwarf_opaque.h
@@ -591,13 +591,14 @@ struct Dwarf_Debug_s {
 
     struct Dwarf_Section_s de_debug_pubtypes; /* DWARF3 .debug_pubtypes */
 
-    struct Dwarf_Section_s de_debug_funcnames;
 
-    /* SGI IRIX extension essentially
-        identical to DWARF3 .debug_pubtypes. */
+    /*  Four SGI IRIX extensions essentially
+        identical to DWARF3 .debug_pubtypes.
+        Only on SGI IRIX. */
+    struct Dwarf_Section_s de_debug_funcnames;
     struct Dwarf_Section_s de_debug_typenames;
-    struct Dwarf_Section_s de_debug_varnames; /* SGI IRIX only. */
-    struct Dwarf_Section_s de_debug_weaknames; /* SGI IRIX only. */
+    struct Dwarf_Section_s de_debug_varnames;
+    struct Dwarf_Section_s de_debug_weaknames;
 
     struct Dwarf_Section_s de_debug_ranges;
     /*  Following two part of DebugFission. */
diff --git a/libdwarf/dwarf_print_lines.c b/libdwarf/dwarf_print_lines.c
index 4caf51f46..f400c7f59 100644
--- a/libdwarf/dwarf_print_lines.c
+++ b/libdwarf/dwarf_print_lines.c
@@ -278,6 +278,7 @@ _dwarf_internal_printlines(Dwarf_Die die,
         _dwarf_error(dbg, error, DW_DLE_LINE_OFFSET_BAD);
         return (DW_DLV_ERROR);
     }
+    section_start =  dbg->de_debug_line.dss_data;
     {
         Dwarf_Unsigned fission_size = 0;
         int resfis = _dwarf_get_fission_addition_die(die, DW_SECT_LINE,
@@ -287,7 +288,6 @@ _dwarf_internal_printlines(Dwarf_Die die,
         }
     }
 
-    section_start =  dbg->de_debug_line.dss_data;
     orig_line_ptr = section_start + line_offset + fission_offset;
     line_ptr = orig_line_ptr;
     dwarf_dealloc(dbg, stmt_list_attr, DW_DLA_ATTR);
@@ -322,7 +322,9 @@ _dwarf_internal_printlines(Dwarf_Die die,
         Dwarf_Small *newlinep = 0;
         int dres = _dwarf_read_line_table_header(dbg,
             cu_context,
-            line_ptr,dbg->de_debug_line.dss_size,
+            section_start,
+            line_ptr,
+            dbg->de_debug_line.dss_size,
             &newlinep,
             line_context,
             &bogus_bytes_ptr,
diff --git a/libdwarf/dwarf_query.c b/libdwarf/dwarf_query.c
index 1022f381d..a8bbd08c1 100644
--- a/libdwarf/dwarf_query.c
+++ b/libdwarf/dwarf_query.c
@@ -648,6 +648,7 @@ _dwarf_extract_address_from_debug_addr(Dwarf_Debug dbg,
     Dwarf_Unsigned ret_addr = 0;
     int res = 0;
     Dwarf_Byte_Ptr  sectionstart = 0;
+    Dwarf_Byte_Ptr  sectionend = 0;
     Dwarf_Unsigned  sectionsize  = 0;
 
     res = _dwarf_get_address_base_attr_value(dbg,context,
@@ -672,20 +673,20 @@ _dwarf_extract_address_from_debug_addr(Dwarf_Debug dbg,
     /*  DW_FORM_GNU_addr_index  relies on DW_AT_GNU_addr_base
         which is in the CU die. */
 
+    sectionstart = dbg->de_debug_addr.dss_data;
     addr_offset = address_base + (addrindex * context->cc_address_size);
-
-
     /*  The offsets table is a series of address-size entries
         but with a base. */
     sectionsize = dbg->de_debug_addr.dss_size;
+    sectionend = sectionstart + sectionsize;
     if ((addr_offset + context->cc_address_size) > sectionsize) {
         _dwarf_error(dbg, error, DW_DLE_ATTR_FORM_SIZE_BAD);
         return (DW_DLV_ERROR);
     }
-    sectionstart = dbg->de_debug_addr.dss_data;
-    READ_UNALIGNED(dbg,ret_addr,Dwarf_Addr,
+    READ_UNALIGNED_CK(dbg,ret_addr,Dwarf_Addr,
         sectionstart + addr_offset,
-        context->cc_address_size);
+        context->cc_address_size,
+        error,sectionend);
     *addr_out = ret_addr;
     return DW_DLV_OK;
 }
@@ -771,7 +772,6 @@ _dwarf_look_in_local_and_tied(Dwarf_Half attr_form,
     /*  We get the index. It might apply here
         or in tied object. Checking that next. */
     dbg = context->cc_dbg;
-
     res2 = _dwarf_get_addr_index_itself(attr_form,
         info_ptr,dbg,context, &index_to_addr,error);
     if(res2 != DW_DLV_OK) {
@@ -799,6 +799,7 @@ dwarf_lowpc(Dwarf_Die die,
     enum Dwarf_Form_Class class = DW_FORM_CLASS_UNKNOWN;
     int res = 0;
     Dwarf_CU_Context context = die->di_cu_context;
+    Dwarf_Small *die_info_end = 0;
 
     CHECK_DIE(die, DW_DLV_ERROR);
 
@@ -832,8 +833,10 @@ dwarf_lowpc(Dwarf_Die die,
             error);
         return res;
     }
-    READ_UNALIGNED(dbg, ret_addr, Dwarf_Addr,
-        info_ptr, address_size);
+    die_info_end = _dwarf_calculate_info_section_end_ptr(context);
+    READ_UNALIGNED_CK(dbg, ret_addr, Dwarf_Addr,
+        info_ptr, address_size,
+        error,die_info_end);
 
     *return_addr = ret_addr;
     return (DW_DLV_OK);
@@ -1218,8 +1221,9 @@ dwarf_highpc_b(Dwarf_Die die,
             return (DW_DLV_OK);
         }
 
-        READ_UNALIGNED(dbg, addr, Dwarf_Addr,
-            info_ptr, address_size);
+        READ_UNALIGNED_CK(dbg, addr, Dwarf_Addr,
+            info_ptr, address_size,
+            error,die_info_end);
         *return_value = addr;
     } else {
         int res3 = 0;
@@ -1405,20 +1409,23 @@ _dwarf_die_attr_unsigned_constant(Dwarf_Die die,
         return (DW_DLV_OK);
 
     case DW_FORM_data2:
-        READ_UNALIGNED(dbg, ret_value, Dwarf_Unsigned,
-            info_ptr, sizeof(Dwarf_Shalf));
+        READ_UNALIGNED_CK(dbg, ret_value, Dwarf_Unsigned,
+            info_ptr, sizeof(Dwarf_Shalf),
+            error,die_info_end);
         *return_val = ret_value;
         return (DW_DLV_OK);
 
     case DW_FORM_data4:
-        READ_UNALIGNED(dbg, ret_value, Dwarf_Unsigned,
-            info_ptr, sizeof(Dwarf_sfixed));
+        READ_UNALIGNED_CK(dbg, ret_value, Dwarf_Unsigned,
+            info_ptr, sizeof(Dwarf_sfixed),
+            error,die_info_end);
         *return_val = ret_value;
         return (DW_DLV_OK);
 
     case DW_FORM_data8:
-        READ_UNALIGNED(dbg, ret_value, Dwarf_Unsigned,
-            info_ptr, sizeof(Dwarf_Unsigned));
+        READ_UNALIGNED_CK(dbg, ret_value, Dwarf_Unsigned,
+            info_ptr, sizeof(Dwarf_Unsigned),
+            error,die_info_end);
         *return_val = ret_value;
         return (DW_DLV_OK);
 
diff --git a/libdwarf/dwarf_ranges.c b/libdwarf/dwarf_ranges.c
index 0c2005b4b..5b441e585 100644
--- a/libdwarf/dwarf_ranges.c
+++ b/libdwarf/dwarf_ranges.c
@@ -124,13 +124,15 @@ int dwarf_get_ranges_a(Dwarf_Debug dbg,
             return (DW_DLV_ERROR);
         }
         entry_count++;
-        READ_UNALIGNED(localdbg,re->cur.dwr_addr1,
+        READ_UNALIGNED_CK(localdbg,re->cur.dwr_addr1,
             Dwarf_Addr, rangeptr,
-            address_size);
+            address_size,
+            error,section_end);
         rangeptr +=  address_size;
-        READ_UNALIGNED(localdbg,re->cur.dwr_addr2 ,
+        READ_UNALIGNED_CK(localdbg,re->cur.dwr_addr2 ,
             Dwarf_Addr, rangeptr,
-            address_size);
+            address_size,
+            error,section_end);
         rangeptr +=  address_size;
         if (!base) {
             base = re;
diff --git a/libdwarf/dwarf_util.c b/libdwarf/dwarf_util.c
index 7d79962fd..fd9676eeb 100644
--- a/libdwarf/dwarf_util.c
+++ b/libdwarf/dwarf_util.c
@@ -751,20 +751,29 @@ _dwarf_memcpy_swap_bytes(void *s1, const void *s2, size_t len)
     given a known cu header location ( an offset in .debug_info
     or debug_types).  */
 /* ARGSUSED */
-Dwarf_Unsigned
+int
 _dwarf_length_of_cu_header(Dwarf_Debug dbg, Dwarf_Unsigned offset,
-    Dwarf_Bool is_info)
+    Dwarf_Bool is_info,
+    Dwarf_Unsigned *area_length_out,
+    Dwarf_Error *error)
 {
     int local_length_size = 0;
     int local_extension_size = 0;
     Dwarf_Unsigned length = 0;
     Dwarf_Unsigned final_size = 0;
-    Dwarf_Small *cuptr =
-        is_info? dbg->de_debug_info.dss_data + offset:
-            dbg->de_debug_types.dss_data+ offset;
-
-    READ_AREA_LENGTH(dbg, length, Dwarf_Unsigned,
-        cuptr, local_length_size, local_extension_size);
+    Dwarf_Small *section_start =
+        is_info? dbg->de_debug_info.dss_data:
+            dbg->de_debug_types.dss_data;
+    Dwarf_Small *cuptr = section_start + offset;
+    Dwarf_Unsigned section_length =
+        is_info? dbg->de_debug_info.dss_size:
+            dbg->de_debug_types.dss_size;
+    Dwarf_Small * section_end_ptr =
+        section_start + section_length;
+
+    READ_AREA_LENGTH_CK(dbg, length, Dwarf_Unsigned,
+        cuptr, local_length_size, local_extension_size,
+        error,section_length,section_end_ptr);
 
     final_size = local_extension_size +  /* initial extension, if present */
         local_length_size +     /* Size of cu length field. */
@@ -779,7 +788,8 @@ _dwarf_length_of_cu_header(Dwarf_Debug dbg, Dwarf_Unsigned offset,
             /* type offset size */
             local_length_size;
     }
-    return final_size;
+    *area_length_out = final_size;
+    return DW_DLV_OK;
 }
 
 /*  Pretend we know nothing about the CU
@@ -1053,3 +1063,101 @@ _dwarf_error_mv_s_to_t(Dwarf_Debug dbgs,Dwarf_Error *errs,
     }
 }
 
+static int
+inthissection(struct Dwarf_Section_s *sec,Dwarf_Small *ptr)
+{
+    if (!sec->dss_data) {
+        return FALSE;
+    }
+    if (ptr < sec->dss_data ) {
+        return FALSE;
+    }
+    if (ptr >= (sec->dss_data + sec->dss_size) ) {
+        return FALSE;
+    }
+    return TRUE;
+}
+
+#define FINDSEC(m_s,m_p,n,st,l,e)    \
+do {                                 \
+    if (inthissection((m_s),(m_p))) { \
+        *(n) = (m_s)->dss_name;      \
+        *(st)= (m_s)->dss_data;      \
+        *(l) = (m_s)->dss_size;      \
+        *(e) = (m_s)->dss_data + (m_s)->dss_size; \
+        return DW_DLV_OK;            \
+    }                                \
+} while (0)
+
+
+/* So we can know a section end even when we do not
+    have the section info apriori  It's only
+    needed for a subset of sections. */
+int
+_dwarf_what_section_are_we(Dwarf_Debug dbg,
+    Dwarf_Small    *  our_pointer,
+    const char     ** section_name_out,
+    Dwarf_Small    ** sec_start_ptr_out,
+    Dwarf_Unsigned *  sec_len_out,
+    Dwarf_Small    ** sec_end_ptr_out,
+    UNUSEDARG Dwarf_Error    *  error)
+{
+    FINDSEC(&dbg->de_debug_info,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_loc,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_line,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_aranges,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_macro,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_ranges,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_str_offsets,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_addr,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_pubtypes,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_gdbindex,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_abbrev,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_cu_index,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_tu_index,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_line_str,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_types,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_sup,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_frame,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    FINDSEC(&dbg->de_debug_frame_eh_gnu,
+        our_pointer, section_name_out,
+        sec_start_ptr_out, sec_len_out, sec_end_ptr_out);
+    return DW_DLV_NO_ENTRY;
+}
+
+
+
diff --git a/libdwarf/dwarf_util.h b/libdwarf/dwarf_util.h
index de1552fb5..ebd7aa1d8 100644
--- a/libdwarf/dwarf_util.h
+++ b/libdwarf/dwarf_util.h
@@ -199,6 +199,8 @@
    This code is ENDIAN DEPENDENT
    The memcpy args are the endian issue.
 
+   Does not update the 'source' field.
+
    for READ_UNALIGNED_CK the error code refers to host endianness.
 */
 typedef Dwarf_Unsigned BIGGEST_UINT;
@@ -261,7 +263,7 @@ typedef Dwarf_Unsigned BIGGEST_UINT;
         BIGGEST_UINT _ltmp = 0;                           \
         Dwarf_Byte_Ptr readend = source+length;           \
         if (readend > endptr) {                           \
-            _dwarf_error(dbg, error, DW_DLE_READ_BIGENDIAN_ERROR);\
+            _dwarf_error(dbg, error, DW_DLE_READ_LITTLEENDIAN_ERROR);\
             return DW_DLV_ERROR;                          \
         }                                                 \
         dbg->de_copy_word( (char *)(&_ltmp) ,             \
@@ -331,6 +333,7 @@ typedef Dwarf_Unsigned BIGGEST_UINT;
     does not seem necessary (none of the 64bit length seems
     appropriate unless it's  ident[EI_CLASS] == ELFCLASS64).
 */
+#if 0
 #define READ_AREA_LENGTH(r_dbg,w_target,r_targtype,                      \
     rw_src_data_p,w_length_size,w_exten_size)                            \
     do {                                                                 \
@@ -371,9 +374,13 @@ typedef Dwarf_Unsigned BIGGEST_UINT;
             }                                                            \
         }                                                                \
     } while (0)
-
+#endif /* 0 */
+/*  The w_target > r_sectionlen compare is done without adding in case
+    the w_target value read is so large any addition would overflow.
+    A basic value sanity check. */
 #define READ_AREA_LENGTH_CK(r_dbg,w_target,r_targtype,                   \
-    rw_src_data_p,w_length_size,w_exten_size,w_error,r_endptr)           \
+    rw_src_data_p,w_length_size,w_exten_size,w_error,                    \
+    r_sectionlen,r_endptr)                                               \
     do {                                                                 \
         READ_UNALIGNED_CK(r_dbg,w_target,r_targtype,                     \
             rw_src_data_p, ORIGINAL_DWARF_OFFSET_SIZE,                   \
@@ -386,6 +393,11 @@ typedef Dwarf_Unsigned BIGGEST_UINT;
             READ_UNALIGNED_CK(r_dbg,w_target,r_targtype,                 \
                 rw_src_data_p, DISTINGUISHED_VALUE_OFFSET_SIZE,          \
                 w_error,r_endptr);                                       \
+            if (w_target > r_sectionlen) {                               \
+                _dwarf_error(r_dbg,w_error,                              \
+                    DW_DLE_HEADER_LEN_BIGGER_THAN_SECSIZE);              \
+                return DW_DLV_ERROR;                                     \
+            }                                                            \
             rw_src_data_p += DISTINGUISHED_VALUE_OFFSET_SIZE;            \
         } else {                                                         \
             if (w_target == 0 && r_dbg->de_big_endian_object) {          \
@@ -398,6 +410,11 @@ typedef Dwarf_Unsigned BIGGEST_UINT;
                     READ_UNALIGNED_CK(r_dbg,w_target,r_targtype,         \
                         rw_src_data_p, DISTINGUISHED_VALUE_OFFSET_SIZE,  \
                         w_error,r_endptr);                               \
+                    if (w_target > r_sectionlen) {                       \
+                        _dwarf_error(r_dbg,w_error,                      \
+                            DW_DLE_HEADER_LEN_BIGGER_THAN_SECSIZE);      \
+                        return DW_DLV_ERROR;                             \
+                    }                                                    \
                     w_length_size  = DISTINGUISHED_VALUE_OFFSET_SIZE;    \
                     rw_src_data_p += DISTINGUISHED_VALUE_OFFSET_SIZE;    \
                     w_exten_size = 0;                                    \
@@ -408,6 +425,11 @@ typedef Dwarf_Unsigned BIGGEST_UINT;
                     w_exten_size = 0;                                    \
                 }                                                        \
             } else {                                                     \
+                if (w_target > r_sectionlen) {                           \
+                    _dwarf_error(r_dbg,w_error,                          \
+                        DW_DLE_HEADER_LEN_BIGGER_THAN_SECSIZE);          \
+                    return DW_DLV_ERROR;                                 \
+                }                                                        \
                 /* Standard 32 bit dwarf2/dwarf3 */                      \
                 w_exten_size   = 0;                                      \
                 w_length_size  = ORIGINAL_DWARF_OFFSET_SIZE;             \
@@ -487,8 +509,11 @@ int _dwarf_get_abbrev_for_code(Dwarf_CU_Context cu_context,
 int _dwarf_check_string_valid(Dwarf_Debug dbg,void *areaptr,
     void *startptr, void *endptr, Dwarf_Error *error);
 
-Dwarf_Unsigned _dwarf_length_of_cu_header(Dwarf_Debug,
-    Dwarf_Unsigned offset,Dwarf_Bool dinfo);
+int _dwarf_length_of_cu_header(Dwarf_Debug dbg, Dwarf_Unsigned offset,
+    Dwarf_Bool is_info,
+    Dwarf_Unsigned *area_length_out,
+    Dwarf_Error *error);
+
 Dwarf_Unsigned _dwarf_length_of_cu_header_simple(Dwarf_Debug,Dwarf_Bool dinfo);
 
 int  _dwarf_load_debug_info(Dwarf_Debug dbg, Dwarf_Error *error);
@@ -506,4 +531,13 @@ int _dwarf_internal_get_die_comp_dir(Dwarf_Die die, const char **compdir_out,
     const char **comp_name_out,
     Dwarf_Error *error);
 
+int _dwarf_what_section_are_we(Dwarf_Debug dbg,
+    Dwarf_Small *our_pointer,
+    const char **      section_name_out,
+    Dwarf_Small    **sec_start_ptr_out,
+    Dwarf_Unsigned *sec_len_out,
+    Dwarf_Small    **sec_end_ptr_out,
+    Dwarf_Error *error);
+
+
 #endif /* DWARF_UTIL_H */
diff --git a/libdwarf/dwarf_xu_index.c b/libdwarf/dwarf_xu_index.c
index 6ac5b8f7f..b83e39950 100644
--- a/libdwarf/dwarf_xu_index.c
+++ b/libdwarf/dwarf_xu_index.c
@@ -73,6 +73,7 @@ dwarf_get_xu_index_header(Dwarf_Debug dbg,
     Dwarf_Unsigned section_offsets_tab_offset = 0;
     Dwarf_Unsigned section_sizes_tab_offset = 0;
     unsigned datalen32 = LEN32BIT;
+    Dwarf_Small *section_end = 0;
 
     if (!strcmp(section_type,"cu") ) {
         sect = &dbg->de_debug_cu_index;
@@ -94,22 +95,27 @@ dwarf_get_xu_index_header(Dwarf_Debug dbg,
     }
 
     data = sect->dss_data;
+    section_end = data + sect->dss_size;
 
     if (sect->dss_size < (4*datalen32) ) {
         _dwarf_error(dbg, error, DW_DLE_ERRONEOUS_GDB_INDEX_SECTION);
         return (DW_DLV_ERROR);
     }
-    READ_UNALIGNED(dbg,local_version, Dwarf_Unsigned,
-        data,datalen32);
+    READ_UNALIGNED_CK(dbg,local_version, Dwarf_Unsigned,
+        data,datalen32,
+        error,section_end);
     data += datalen32;
-    READ_UNALIGNED(dbg,num_col, Dwarf_Unsigned,
-        data,datalen32);
+    READ_UNALIGNED_CK(dbg,num_col, Dwarf_Unsigned,
+        data,datalen32,
+        error,section_end);
     data += datalen32;
-    READ_UNALIGNED(dbg,num_CUs, Dwarf_Unsigned,
-        data,datalen32);
+    READ_UNALIGNED_CK(dbg,num_CUs, Dwarf_Unsigned,
+        data,datalen32,
+        error,section_end);
     data += datalen32;
-    READ_UNALIGNED(dbg,num_slots, Dwarf_Unsigned,
-        data,datalen32);
+    READ_UNALIGNED_CK(dbg,num_slots, Dwarf_Unsigned,
+        data,datalen32,
+        error,section_end);
     data += datalen32;
     hash_tab_offset = datalen32*4;
     indexes_tab_offset = hash_tab_offset + (num_slots * HASHSIGNATURELEN);
@@ -192,6 +198,8 @@ int dwarf_get_xu_hash_entry(Dwarf_Xu_Index_Header xuhdr,
     Dwarf_Small *hashentry = 0;
     Dwarf_Sig8 hashval;
     Dwarf_Unsigned indexval = 0;
+    Dwarf_Small *section_end = xuhdr->gx_section_data +
+        xuhdr->gx_section_length;
 
     memset(&hashval,0,sizeof(hashval));
     if (xuhdr->gx_slots_in_hash > 0) {
@@ -209,8 +217,9 @@ int dwarf_get_xu_hash_entry(Dwarf_Xu_Index_Header xuhdr,
     indexentry = indextab + (index * LEN32BIT);
     memcpy(hash_value,&hashval,sizeof(hashval));
 
-    READ_UNALIGNED(dbg,indexval,Dwarf_Unsigned, indexentry,
-        LEN32BIT);
+    READ_UNALIGNED_CK(dbg,indexval,Dwarf_Unsigned, indexentry,
+        LEN32BIT,
+        err,section_end);
     if (indexval > xuhdr->gx_units_in_index) {
         _dwarf_error(dbg, err,  DW_DLE_XU_HASH_INDEX_ERROR);
         return DW_DLV_ERROR;
@@ -245,6 +254,10 @@ dwarf_get_xu_section_names(Dwarf_Xu_Index_Header xuhdr,
     Dwarf_Error *   err)
 {
     Dwarf_Unsigned sec_num = 0;
+    Dwarf_Small *section_end = xuhdr->gx_section_data +
+        xuhdr->gx_section_length;
+
+
     Dwarf_Debug dbg = xuhdr->gx_dbg;
     Dwarf_Small *namerow =  xuhdr->gx_section_offsets_offset +
         xuhdr->gx_section_data;
@@ -254,8 +267,9 @@ dwarf_get_xu_section_names(Dwarf_Xu_Index_Header xuhdr,
         return DW_DLV_ERROR;
     }
     nameloc = namerow + LEN32BIT *column_index;
-    READ_UNALIGNED(dbg,sec_num,Dwarf_Unsigned, nameloc,
-        LEN32BIT);
+    READ_UNALIGNED_CK(dbg,sec_num,Dwarf_Unsigned, nameloc,
+        LEN32BIT,
+        err,section_end);
     if (sec_num > DW_SECT_MACRO) {
         _dwarf_error(dbg, err, DW_DLE_XU_NAME_COL_ERROR);
         return DW_DLV_ERROR;
@@ -292,6 +306,9 @@ dwarf_get_xu_section_offset(Dwarf_Xu_Index_Header xuhdr,
     Dwarf_Unsigned offset = 0;
     Dwarf_Unsigned size = 0;
     Dwarf_Unsigned column_count = xuhdr->gx_column_count_sections;
+    Dwarf_Small *section_end = xuhdr->gx_section_data +
+        xuhdr->gx_section_length;
+
 
     if( row_index > xuhdr->gx_units_in_index) {
         _dwarf_error(dbg, err, DW_DLE_XU_NAME_COL_ERROR);
@@ -312,10 +329,10 @@ dwarf_get_xu_section_offset(Dwarf_Xu_Index_Header xuhdr,
     sizerow = sizerow + ((row_index-1)*column_count * LEN32BIT);
     sizeentry = sizerow + (column_index *  LEN32BIT);
 
-    READ_UNALIGNED(dbg,offset,Dwarf_Unsigned, offsetentry,
-        LEN32BIT);
-    READ_UNALIGNED(dbg,size,Dwarf_Unsigned, sizeentry,
-        LEN32BIT);
+    READ_UNALIGNED_CK(dbg,offset,Dwarf_Unsigned, offsetentry,
+        LEN32BIT,err,section_end);
+    READ_UNALIGNED_CK(dbg,size,Dwarf_Unsigned, sizeentry,
+        LEN32BIT,err,section_end);
     *sec_offset = offset;
     *sec_size =  size;
     return DW_DLV_OK;
diff --git a/libdwarf/libdwarf.h.in b/libdwarf/libdwarf.h.in
index e46bd63d5..ffcce39ee 100644
--- a/libdwarf/libdwarf.h.in
+++ b/libdwarf/libdwarf.h.in
@@ -1258,9 +1258,12 @@ struct Dwarf_Obj_Access_Interface_s {
 #define DW_DLE_CIE_INSTR_PTR_ERROR             339
 #define DW_DLE_FDE_INSTR_PTR_ERROR             340
 #define DW_DLE_FISSION_ADDITION_ERROR          341
+#define DW_DLE_HEADER_LEN_BIGGER_THAN_SECSIZE  342
+#define DW_DLE_LOCEXPR_OFF_SECTION_END         343
+#define DW_DLE_POINTER_SECTION_UNKNOWN         344
 
     /* DW_DLE_LAST MUST EQUAL LAST ERROR NUMBER */
-#define DW_DLE_LAST        341
+#define DW_DLE_LAST        344
 #define DW_DLE_LO_USER     0x10000
 
     /*  Taken as meaning 'undefined value', this is not
