{
    "0": "+    if ((memcmp(p_cb->loc_publ_key.x, p_cb->peer_publ_key.x, sizeof(BT_OCTET32)) == 0) && (memcmp(p_cb->loc_publ_key.y, p_cb->peer_publ_key.y, sizeof(BT_OCTET32)) == 0)) {\n+        p_cb->status = SMP_PAIR_AUTH_FAIL;\n+        p_cb->failure = SMP_PAIR_AUTH_FAIL;\n+        reason = SMP_PAIR_AUTH_FAIL;\n+        SMP_TRACE_ERROR(\"%s, Peer and own device cannot have same public key.\", __func__);\n+        smp_sm_event(p_cb, SMP_PAIRG_FAILED_EVT, &reason);\n+        return ;\n+    }\n\n",
    "1": "-    if ((memcmp(p_cb->loc_publ_key.x, p_cb->peer_publ_key.x, sizeof(BT_OCTET32)) == 0) && (memcmp(p_cb->loc_publ_key.y, p_cb->peer_publ_key.y, sizeof(BT_OCTET32)) == 0)) {\n-        p_cb->status = SMP_PAIR_AUTH_FAIL;\n-        p_cb->failure = SMP_PAIR_AUTH_FAIL;\n-        reason = SMP_PAIR_AUTH_FAIL;\n-        SMP_TRACE_ERROR(\"%s, Peer and own device cannot have same public key.\", __func__);\n-        smp_sm_event(p_cb, SMP_PAIRG_FAILED_EVT, &reason);\n-        return ;\n-    }\n\n"
}