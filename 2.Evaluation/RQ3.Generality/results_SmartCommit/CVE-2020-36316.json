{
    "0": "-    int result = RLC_OK;\n\n+    int result = RLC_ERR;\n\n-            if (!bn_is_zero(t)) {\n-                result = RLC_ERR;\n-            }\n\n+            if (bn_is_zero(t)) {\n\n-                pad |= h1[i] - h2[i];\n-            }\n-            if (result == RLC_OK) {\n-                result = (pad ? RLC_ERR : RLC_OK);\n\n+                    pad |= h1[i] ^ h2[i];\n\n-            if (bn_cmp_dig(t, 1) != RLC_EQ) {\n-                result = RLC_ERR;\n\n+                if (pad == 0 && bn_cmp_dig(t, 1) == RLC_EQ) {\n+                    result = RLC_OK;\n\n-            if (bn_cmp_dig(t, RSA_PSS) != RLC_EQ) {\n-                result = RLC_ERR;\n-            } else {\n\n+            pad = (uint8_t)t->dp[0];\n+            if (pad == RSA_PSS) {\n+                int r = 1;\n\n-                        result = RLC_ERR;\n\n+                        r = 0;\n\n-                if (!bn_is_zero(m)) {\n-                    result = RLC_ERR;\n\n+                if (r == 1 && bn_is_zero(m)) {\n+                    result = RLC_OK;\n\n-    int result = RLC_ERR;\n\n+    int result = RLC_OK;\n\n-            result = RLC_OK;\n\n-            result = RLC_OK;\n\n-            if (bn_is_zero(t)) {\n\n+            if (!bn_is_zero(t)) {\n+                result = RLC_ERR;\n+            }\n\n-                    pad |= h1[i] ^ h2[i];\n\n+                pad |= h1[i] - h2[i];\n+            }\n+            if (result == RLC_OK) {\n+                result = (pad ? RLC_ERR : RLC_OK);\n\n-                if (pad == 0 && bn_cmp_dig(t, 1) == RLC_EQ) {\n-                    result = RLC_OK;\n\n+            if (bn_cmp_dig(t, 1) != RLC_EQ) {\n+                result = RLC_ERR;\n\n-            }\n\n-            result = RLC_OK;\n\n-            result = RLC_OK;\n\n-            pad = (uint8_t)t->dp[0];\n-            if (pad == RSA_PSS) {\n-                int r = 1;\n\n+            if (bn_cmp_dig(t, RSA_PSS) != RLC_EQ) {\n+                result = RLC_ERR;\n+            } else {\n\n-                        r = 0;\n\n+                        result = RLC_ERR;\n\n-                if (r == 1 && bn_is_zero(m)) {\n-                    result = RLC_OK;\n\n+                if (!bn_is_zero(m)) {\n+                    result = RLC_ERR;\n\n-            if (!bn_is_zero(t)) {\n-                result = RLC_ERR;\n-            }\n\n+            if (bn_is_zero(t)) {\n\n-            if (pad != RSA_PUB) {\n-                result = RLC_ERR;\n-            }\n\n+                if (pad == RSA_PUB) {\n\n-            if (!bn_is_zero(t)) {\n-                result = RLC_ERR;\n-            }\n\n+            if (bn_is_zero(t)) {\n\n-            if (pad != RSA_PRV) {\n-                result = RLC_ERR;\n-            }\n\n+                if (pad == RSA_PRV) {\n+                    int counter = 0;\n\n-            } while (pad != 0 && m_len > 0);\n-            if (m_len == 0) {\n-                result = RLC_ERR;\n-            }\n\n+                    } while (pad == RSA_PAD && m_len > 0);\n\n-                r |= pad - id[len - i - 1];\n\n+                        r |= pad ^ id[len - i - 1];\n\n-            result = (r == 0 ? RLC_OK : RLC_ERR);\n\n+                    if (r && m_len > 0 && counter >= 8) {\n+                        result = RLC_OK;\n+                    }\n+                }\n+            }\n\n-            if (!bn_is_zero(t)) {\n-                result = RLC_ERR;\n-            }\n\n+            if (bn_is_zero(t)) {\n\n-            if (pad != RSA_PRV) {\n-                result = RLC_ERR;\n-            }\n\n+                if (pad == RSA_PRV) {\n+                    int counter = 0;\n\n-            } while (pad != 0 && m_len > 0);\n-            if (m_len == 0) {\n-                result = RLC_ERR;\n-            }\n\n+                    } while (pad == RSA_PAD && m_len > 0);\n\n-    int len, result = RLC_ERR;\n\n+    int len, result = RLC_OK;\n\n-            result = RLC_OK;\n\n-            if (bn_is_zero(t)) {\n\n+            if (!bn_is_zero(t)) {\n+                result = RLC_ERR;\n+            }\n\n-                if (pad == RSA_PUB) {\n\n+            if (pad != RSA_PUB) {\n+                result = RLC_ERR;\n+            }\n\n-                    result = (m_len > 0 ? RLC_OK : RLC_ERR);\n-                }\n-            }\n\n-            result = RLC_OK;\n\n-            result = RLC_OK;\n\n-            if (bn_is_zero(t)) {\n\n+            if (!bn_is_zero(t)) {\n+                result = RLC_ERR;\n+            }\n\n-                if (pad == RSA_PRV) {\n-                    int counter = 0;\n\n+            if (pad != RSA_PRV) {\n+                result = RLC_ERR;\n+            }\n\n-                        counter++;\n\n-                    } while (pad == RSA_PAD && m_len > 0);\n\n+            } while (pad != 0 && m_len > 0);\n+            if (m_len == 0) {\n+                result = RLC_ERR;\n+            }\n\n-                        r |= pad ^ id[len - i - 1];\n\n+                r |= pad - id[len - i - 1];\n\n-                    if (r && m_len > 0 && counter >= 8) {\n-                        result = RLC_OK;\n-                    }\n-                }\n-            }\n\n+            result = (r == 0 ? RLC_OK : RLC_ERR);\n\n-            if (bn_is_zero(t)) {\n\n+            if (!bn_is_zero(t)) {\n+                result = RLC_ERR;\n+            }\n\n-                if (pad == RSA_PRV) {\n-                    int counter = 0;\n\n+            if (pad != RSA_PRV) {\n+                result = RLC_ERR;\n+            }\n\n-                        counter++;\n\n-                    } while (pad == RSA_PAD && m_len > 0);\n\n+            } while (pad != 0 && m_len > 0);\n+            if (m_len == 0) {\n+                result = RLC_ERR;\n+            }\n\n-                    if (m_len > 0 && counter >= 8) {\n-                        result = RLC_OK;\n-                    }\n-                }\n-            }\n\n-            if (!bn_is_zero(t)) {\n-                result = RLC_ERR;\n-            }\n\n+            if (bn_is_zero(t)) {\n\n-            if (pad != RSA_PAD) {\n-                result = RLC_ERR;\n\n+                if (pad == RSA_PAD) {\n+                    result = RLC_OK;\n\n-    int result = RLC_ERR;\n\n+    int result = RLC_OK;\n\n-            result = RLC_OK;\n\n-            if (bn_is_zero(t)) {\n\n+            if (!bn_is_zero(t)) {\n+                result = RLC_ERR;\n+            }\n\n-                if (pad == RSA_PAD) {\n-                    result = RLC_OK;\n\n+            if (pad != RSA_PAD) {\n+                result = RLC_ERR;\n\n-            }\n\n",
    "1": "+            result = RLC_OK;\n\n",
    "2": "+            result = RLC_OK;\n\n",
    "3": "+            }\n\n",
    "4": "+            result = RLC_OK;\n\n",
    "5": "+            result = RLC_OK;\n\n",
    "6": "-    int len, result = RLC_OK;\n\n+    int len, result = RLC_ERR;\n\n",
    "7": "+            result = RLC_OK;\n\n",
    "8": "+                    result = (m_len > 0 ? RLC_OK : RLC_ERR);\n+                }\n+            }\n\n",
    "9": "+            result = RLC_OK;\n\n",
    "10": "+            result = RLC_OK;\n\n",
    "11": "+                        counter++;\n\n",
    "12": "+                        counter++;\n\n",
    "13": "+                    if (m_len > 0 && counter >= 8) {\n+                        result = RLC_OK;\n+                    }\n+                }\n+            }\n\n",
    "14": "-    int result = RLC_OK;\n\n+    int result = RLC_ERR;\n\n",
    "15": "+            result = RLC_OK;\n\n",
    "16": "+            }\n\n"
}