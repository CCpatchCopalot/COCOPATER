{
    "0": "-    _username = usernameSlice.copyString();\n\n+    std::string const username = usernameSlice.copyString();\n\n-    } else if (um->checkPassword(_username, password)) {\n\n+    } else if (um->checkPassword(username, password)) {\n\n-            std::string jwt = generateJwt(_username, password);\n-            resultBuilder.add(\"jwt\", VPackValue(jwt));\n\n+            resultBuilder.add(\"jwt\", VPackValue(generateJwt(username)));\n\n-        _isValid = true;\n\n+        isValid = true;\n\n-    std::string const username = usernameSlice.copyString();\n\n+    _username = usernameSlice.copyString();\n\n-    bool isValid = false;\n-    auto guard = scopeGuard([&]() {\n-        try {\n-            if (isValid) {\n-                events::LoggedIn(*_request, username);\n-            } else {\n-                events::CredentialsBad(*_request, username);\n-            }\n-        } catch (...) {\n-        }\n-    });\n\n-    } else if (um->checkPassword(username, password)) {\n\n+    } else if (um->checkPassword(_username, password)) {\n\n-            resultBuilder.add(\"jwt\", VPackValue(generateJwt(username)));\n\n+            std::string jwt = generateJwt(_username, password);\n+            resultBuilder.add(\"jwt\", VPackValue(jwt));\n\n-        isValid = true;\n\n+        _isValid = true;\n\n",
    "1": "+    bool isValid = false;\n+    auto guard = scopeGuard([&]() {\n+        try {\n+            if (isValid) {\n+                events::LoggedIn(*_request, username);\n+            } else {\n+                events::CredentialsBad(*_request, username);\n+            }\n+        } catch (...) {\n+        }\n+    });\n\n",
    "2": "+std::string RestAuthHandler::generateJwt(std::string const& username) const {\n+    AuthenticationFeature* af = AuthenticationFeature::instance();\n+    TRI_ASSERT(af != nullptr);\n+    return fuerte::jwt::generateUserToken( af->tokenCache().jwtSecret(), username, std::chrono::seconds(uint64_t(af->sessionTimeout())));\n+}\n\n",
    "3": "+    if (_sessionTimeout <= 1.0) {\n+        LOG_TOPIC(\"85046\", FATAL, arangodb::Logger::AUTHENTICATION)\n+                << \"--server.session-timeout has an invalid value: \" << _sessionTimeout;\n+        FATAL_ERROR_EXIT();\n+    }\n\n",
    "4": "-    if (_sessionTimeout <= 1.0) {\n-        LOG_TOPIC(\"85046\", FATAL, arangodb::Logger::AUTHENTICATION)\n-                << \"--server.session-timeout has an invalid value: \" << _sessionTimeout;\n-        FATAL_ERROR_EXIT();\n-    }\n\n",
    "5": "-    options->addObsoleteOption( \"--server.session-timeout\", \"timeout of web interface server sessions (in seconds)\", true);\n\n",
    "6": "+    options->addObsoleteOption( \"--server.session-timeout\", \"timeout of web interface server sessions (in seconds)\", true);\n\n",
    "7": "-    options->addOption(\"--server.local-authentication\", \"enable authentication using the local user database\", new BooleanParameter(&_localAuthentication));\n\n+    options->addOption(\"--server.session-timeout\", \"timeout in seconds for web interface JWT sessions\", new DoubleParameter(&_sessionTimeout),\n+                       arangodb::options::makeFlags( arangodb::options::Flags::DefaultNoComponents, arangodb::options::Flags::OnCoordinator, arangodb::options::Flags::OnSingle))\n+    .setIntroducedIn(30900);\n+    options->addOption(\"--server.local-authentication\", \"enable authentication using the local user database\", new BooleanParameter(&_localAuthentication),\n+                       arangodb::options::makeFlags( arangodb::options::Flags::DefaultNoComponents, arangodb::options::Flags::OnCoordinator, arangodb::options::Flags::OnSingle));\n\n-    options->addOption(\"--server.authentication-unix-sockets\", \"authentication for requests via UNIX domain sockets\", new BooleanParameter(&_authenticationUnixSockets));\n\n+    options->addOption(\"--server.authentication-unix-sockets\", \"authentication for requests via UNIX domain sockets\", new BooleanParameter(&_authenticationUnixSockets),\n+                       arangodb::options::makeFlags( arangodb::options::Flags::DefaultNoOs, arangodb::options::Flags::OsLinux, arangodb::options::Flags::OsMac));\n\n-    options->addOption(\"--server.session-timeout\", \"timeout in seconds for web interface JWT sessions\", new DoubleParameter(&_sessionTimeout),\n-                       arangodb::options::makeFlags( arangodb::options::Flags::DefaultNoComponents, arangodb::options::Flags::OnCoordinator, arangodb::options::Flags::OnSingle))\n-    .setIntroducedIn(30900);\n-    options->addOption(\"--server.local-authentication\", \"enable authentication using the local user database\", new BooleanParameter(&_localAuthentication),\n-                       arangodb::options::makeFlags( arangodb::options::Flags::DefaultNoComponents, arangodb::options::Flags::OnCoordinator, arangodb::options::Flags::OnSingle));\n\n+    options->addOption(\"--server.local-authentication\", \"enable authentication using the local user database\", new BooleanParameter(&_localAuthentication));\n\n-    options->addOption(\"--server.authentication-unix-sockets\", \"authentication for requests via UNIX domain sockets\", new BooleanParameter(&_authenticationUnixSockets),\n-                       arangodb::options::makeFlags( arangodb::options::Flags::DefaultNoOs, arangodb::options::Flags::OsLinux, arangodb::options::Flags::OsMac));\n\n+    options->addOption(\"--server.authentication-unix-sockets\", \"authentication for requests via UNIX domain sockets\", new BooleanParameter(&_authenticationUnixSockets));\n\n"
}