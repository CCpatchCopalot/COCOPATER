{
    "0": "-    char *ext_name = NULL;\n-    struct sshbuf *b = NULL;\n\n",
    "1": "-            goto err;\n\n+            goto out;\n\n-                goto err;\n\n+                r = SSH_ERR_VALID_FORMAT;\n+                goto out;\n\n-                goto err;\n\n+                goto out;\n\n-                goto err;\n\n+                r = SSH_ERR_VALID_FORMAT;\n+                goto out;\n\n-                goto err;\n\n+                r = SSH_ERR_VALID_FORMAT;\n+                goto out;\n\n-                goto err;\n\n+                r = SSH_ERR_VALID_FORMAT;\n+                goto out;\n\n-                goto err;\n\n+                goto out;\n\n-                goto err;\n\n+                goto out;\n\n-            if ((r = sshbuf_get_cstring(m, &ext_name, NULL)) != 0) {\n-                error_fr(r, \"parse constraint extension\");\n-                goto err;\n-            }\n-            debug_f(\"constraint ext %s\", ext_name);\n-            if (strcmp(ext_name, \"sk-provider@openssh.com\") == 0) {\n-                if (sk_providerp == NULL) {\n-                    error_f(\"%s not valid here\", ext_name);\n-                    goto err;\n-                }\n-                if (*sk_providerp != NULL) {\n-                    error_f(\"%s already set\", ext_name);\n-                    goto err;\n-                }\n-                if ((r = sshbuf_get_cstring(m, sk_providerp, NULL)) != 0) {\n-                    error_fr(r, \"parse %s\", ext_name);\n-                    goto err;\n-                }\n-            } else {\n-                error_f(\"unsupported constraint \\\"%s\\\"\", ext_name);\n-                goto err;\n\n+            if ((r = parse_key_constraint_extension(m, sk_providerp)) != 0) {\n+                goto out;\n\n-err:\n-            free(ext_name);\n-            sshbuf_free(b);\n-            return -1;\n\n+            r = SSH_ERR_FEATURE_UNSUPPORTED;\n+            goto out;\n\n-    return 0;\n\n+    r = 0;\n+out:\n+    return r;\n\n+    char *ext_name = NULL;\n+    struct sshbuf *b = NULL;\n\n-            goto out;\n\n+            goto err;\n\n-                r = SSH_ERR_VALID_FORMAT;\n-                goto out;\n\n+                goto err;\n\n-                goto out;\n\n+                goto err;\n\n-                r = SSH_ERR_VALID_FORMAT;\n-                goto out;\n\n+                goto err;\n\n-                r = SSH_ERR_VALID_FORMAT;\n-                goto out;\n\n+                goto err;\n\n-                r = SSH_ERR_VALID_FORMAT;\n-                goto out;\n\n+                goto err;\n\n-                goto out;\n\n+                goto err;\n\n-                goto out;\n\n+                goto err;\n\n-            if ((r = parse_key_constraint_extension(m, sk_providerp)) != 0) {\n-                goto out;\n\n+            if ((r = sshbuf_get_cstring(m, &ext_name, NULL)) != 0) {\n+                error_fr(r, \"parse constraint extension\");\n+                goto err;\n\n+            debug_f(\"constraint ext %s\", ext_name);\n+            if (strcmp(ext_name, \"sk-provider@openssh.com\") == 0) {\n+                if (sk_providerp == NULL) {\n+                    error_f(\"%s not valid here\", ext_name);\n+                    goto err;\n+                }\n+                if (*sk_providerp != NULL) {\n+                    error_f(\"%s already set\", ext_name);\n+                    goto err;\n+                }\n+                if ((r = sshbuf_get_cstring(m, sk_providerp, NULL)) != 0) {\n+                    error_fr(r, \"parse %s\", ext_name);\n+                    goto err;\n+                }\n+            } else {\n+                error_f(\"unsupported constraint \\\"%s\\\"\", ext_name);\n+                goto err;\n+            }\n+            free(ext_name);\n\n-            r = SSH_ERR_FEATURE_UNSUPPORTED;\n-            goto out;\n\n+err:\n+            free(ext_name);\n+            sshbuf_free(b);\n+            return -1;\n\n-    r = 0;\n-out:\n-    return r;\n\n+    return 0;\n\n",
    "2": "-            free(ext_name);\n\n"
}