{
    "0": "-        const float in_min = context->input(2).flat<float>()(0);\n-        const float in_max = context->input(3).flat<float>()(0);\n\n+        const auto& in_min_tensor = context->input(2);\n+        OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_min_tensor.shape()), errors::InvalidArgument(\"min must be a scalar\"));\n+        const float in_min = in_min_tensor.flat<float>()(0);\n+        const auto& in_max_tensor = context->input(3);\n+        OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_max_tensor.shape()), errors::InvalidArgument(\"max must be a scalar\"));\n+        const float in_max = in_max_tensor.flat<float>()(0);\n\n-        const auto& in_min_tensor = context->input(2);\n-        OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_min_tensor.shape()), errors::InvalidArgument(\"min must be a scalar\"));\n-        const float in_min = in_min_tensor.flat<float>()(0);\n-        const auto& in_max_tensor = context->input(3);\n-        OP_REQUIRES(context, TensorShapeUtils::IsScalar(in_max_tensor.shape()), errors::InvalidArgument(\"max must be a scalar\"));\n-        const float in_max = in_max_tensor.flat<float>()(0);\n\n+        const float in_min = context->input(2).flat<float>()(0);\n+        const float in_max = context->input(3).flat<float>()(0);\n\n"
}