{
    "0": "-        FILE *fp;\n\n+        FILE *fp_read, *fp_write;\n\n",
    "1": "-                    fp = fdopen(conn, \"r+\");\n-                    if (fp == NULL) {\n-                        exit(EXIT_FAILURE);\n\n+                    fp_read = fdopen(conn, \"r\");\n+                    if (fp_read == NULL) {\n+                        return EXIT_FAILURE;\n+                    }\n+                    fp_write = fdopen(dup(conn), \"w\");\n+                    if (fp_write == NULL) {\n+                        return EXIT_FAILURE;\n\n-                    fds[0].fd = conn;\n-                    fds[0].events = POLL;\n-                    if (poll(fds, 1, timeout * 1000) <= 0) {\n\n+                    errno = 0;\n+                    alarm(timeout);\n+                    if (errno != 0) {\n\n-                    line = fgets(linebuf, sizeof(linebuf), fp);\n-                    while (line) {\n-                        fseek(fp, 0, SEEK_CUR);\n\n+                    while ((line = fgets(linebuf, sizeof(linebuf), fp_read))) {\n\n-                            fprintf(fp, \"500 Invalid request\\n\");\n-                            fflush(fp);\n\n+                            fprintf(fp_write, \"500 Invalid request\\n\");\n+                            fflush(fp_write);\n\n-                            fprintf(fp, \"500 Invalid request\\n\");\n-                            fflush(fp);\n\n+                            fprintf(fp_write, \"500 Invalid request\\n\");\n+                            fflush(fp_write);\n\n-                            fprintf(fp, \"500 Invalid request\\n\");\n-                            fflush(fp);\n\n+                            fprintf(fp_write, \"500 Invalid request\\n\");\n+                            fflush(fp_write);\n\n-                        handler[sc](srs, fp, key, domain, excludes);\n-                        fflush(fp);\n-                        if (poll(fds, 1, timeout * 1000) <= 0) {\n-                            break;\n\n+                        handler[sc](srs, fp_write, key, domain, excludes);\n+                        fflush(fp_write);\n+                        errno = 0;\n+                        alarm(timeout);\n+                        if (errno != 0) {\n+                            return EXIT_FAILURE;\n\n-                    fclose(fp);\n\n+                    fclose(fp_write);\n+                    fclose(fp_read);\n\n-                    fp_read = fdopen(conn, \"r\");\n-                    if (fp_read == NULL) {\n-                        return EXIT_FAILURE;\n-                    }\n-                    fp_write = fdopen(dup(conn), \"w\");\n-                    if (fp_write == NULL) {\n-                        return EXIT_FAILURE;\n\n+                    fp = fdopen(conn, \"r+\");\n+                    if (fp == NULL) {\n+                        exit(EXIT_FAILURE);\n\n-                    errno = 0;\n-                    alarm(timeout);\n-                    if (errno != 0) {\n\n+                    fds[0].fd = conn;\n+                    fds[0].events = POLL;\n+                    if (poll(fds, 1, timeout * 1000) <= 0) {\n\n-                    while ((line = fgets(linebuf, sizeof(linebuf), fp_read))) {\n\n+                    line = fgets(linebuf, sizeof(linebuf), fp);\n+                    while (line) {\n+                        fseek(fp, 0, SEEK_CUR);\n\n-                        alarm(0);\n-                        if (strlen(line) >= sizeof(linebuf) - 1) {\n-                            fprintf(fp_write, \"500 Invalid request\\n\");\n-                            fflush(fp_write);\n-                            return EXIT_FAILURE;\n-                        }\n\n-                            fprintf(fp_write, \"500 Invalid request\\n\");\n-                            fflush(fp_write);\n\n+                            fprintf(fp, \"500 Invalid request\\n\");\n+                            fflush(fp);\n\n-                            fprintf(fp_write, \"500 Invalid request\\n\");\n-                            fflush(fp_write);\n\n+                            fprintf(fp, \"500 Invalid request\\n\");\n+                            fflush(fp);\n\n-                            fprintf(fp_write, \"500 Invalid request\\n\");\n-                            fflush(fp_write);\n\n+                            fprintf(fp, \"500 Invalid request\\n\");\n+                            fflush(fp);\n\n-                        handler[sc](srs, fp_write, key, domain, excludes);\n-                        fflush(fp_write);\n-                        errno = 0;\n-                        alarm(timeout);\n-                        if (errno != 0) {\n-                            return EXIT_FAILURE;\n\n+                        handler[sc](srs, fp, key, domain, excludes);\n+                        fflush(fp);\n+                        if (poll(fds, 1, timeout * 1000) <= 0) {\n+                            break;\n\n+                        line = fgets(linebuf, sizeof(linebuf), fp);\n\n-                    fclose(fp_write);\n-                    fclose(fp_read);\n\n+                    fclose(fp);\n\n",
    "2": "+                        alarm(0);\n+                        if (strlen(line) >= sizeof(linebuf) - 1) {\n+                            fprintf(fp_write, \"500 Invalid request\\n\");\n+                            fflush(fp_write);\n+                            return EXIT_FAILURE;\n+                        }\n\n",
    "3": "-                        line = fgets(linebuf, sizeof(linebuf), fp);\n\n",
    "4": "-        FILE *fp_read, *fp_write;\n\n+        FILE *fp;\n\n"
}