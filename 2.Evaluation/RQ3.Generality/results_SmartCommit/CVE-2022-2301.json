{
    "0": "-    const guint32 *p = (const guint32 *) &in;\n\n+    const XwdHeader *inp;\n\n-    h->header_size = g_ntohl (*(p++));\n-    h->file_version = g_ntohl (*(p++));\n-    h->pixmap_format = g_ntohl (*(p++));\n-    h->pixmap_depth = g_ntohl (*(p++));\n-    h->pixmap_width = g_ntohl (*(p++));\n-    h->pixmap_height = g_ntohl (*(p++));\n-    h->x_offset = g_ntohl (*(p++));\n-    h->byte_order = g_ntohl (*(p++));\n-    h->bitmap_unit = g_ntohl (*(p++));\n-    h->bitmap_bit_order = g_ntohl (*(p++));\n-    h->bitmap_pad = g_ntohl (*(p++));\n-    h->bits_per_pixel = g_ntohl (*(p++));\n-    h->bytes_per_line = g_ntohl (*(p++));\n-    h->visual_class = g_ntohl (*(p++));\n-    h->red_mask = g_ntohl (*(p++));\n-    h->green_mask = g_ntohl (*(p++));\n-    h->blue_mask = g_ntohl (*(p++));\n-    h->bits_per_rgb = g_ntohl (*(p++));\n-    h->color_map_entries = g_ntohl (*(p++));\n-    h->n_colors = g_ntohl (*(p++));\n-    h->window_width = g_ntohl (*(p++));\n-    h->window_height = g_ntohl (*(p++));\n-    h->window_x = g_ntohl (*(p++));\n-    h->window_y = g_ntohl (*(p++));\n-    h->window_border_width = g_ntohl (*(p++));\n\n+    inp = &in;\n+    UNPACK_FIELD_U32 (h, inp, header_size);\n+    UNPACK_FIELD_U32 (h, inp, file_version);\n+    UNPACK_FIELD_U32 (h, inp, pixmap_format);\n+    UNPACK_FIELD_U32 (h, inp, pixmap_depth);\n+    UNPACK_FIELD_U32 (h, inp, pixmap_width);\n+    UNPACK_FIELD_U32 (h, inp, pixmap_height);\n+    UNPACK_FIELD_U32 (h, inp, x_offset);\n+    UNPACK_FIELD_U32 (h, inp, byte_order);\n+    UNPACK_FIELD_U32 (h, inp, bitmap_unit);\n+    UNPACK_FIELD_U32 (h, inp, bitmap_bit_order);\n+    UNPACK_FIELD_U32 (h, inp, bitmap_pad);\n+    UNPACK_FIELD_U32 (h, inp, bits_per_pixel);\n+    UNPACK_FIELD_U32 (h, inp, bytes_per_line);\n+    UNPACK_FIELD_U32 (h, inp, visual_class);\n+    UNPACK_FIELD_U32 (h, inp, red_mask);\n+    UNPACK_FIELD_U32 (h, inp, green_mask);\n+    UNPACK_FIELD_U32 (h, inp, blue_mask);\n+    UNPACK_FIELD_U32 (h, inp, bits_per_rgb);\n+    UNPACK_FIELD_U32 (h, inp, color_map_entries);\n+    UNPACK_FIELD_U32 (h, inp, n_colors);\n+    UNPACK_FIELD_U32 (h, inp, window_width);\n+    UNPACK_FIELD_U32 (h, inp, window_height);\n+    UNPACK_FIELD_S32 (h, inp, window_x);\n+    UNPACK_FIELD_S32 (h, inp, window_y);\n+    UNPACK_FIELD_U32 (h, inp, window_border_width);\n\n-    ASSERT_HEADER (loader->file_data_len >= h->header_size + h->n_colors * sizeof (XwdColor)\n-                   + h->pixmap_height * h->bytes_per_line);\n-    loader->image_data = (const guint8 *) loader->file_data + h->header_size + h->n_colors * sizeof (XwdColor);\n\n+    ASSERT_HEADER (loader->file_data_len >= h->header_size + h->color_map_entries * sizeof (XwdColor)\n+                   + h->pixmap_height * (gsize) h->bytes_per_line);\n+    loader->image_data = (const guint8 *) loader->file_data + h->header_size + h->color_map_entries * sizeof (XwdColor);\n\n-    const XwdHeader *inp;\n\n+    const guint32 *p = (const guint32 *) &in;\n\n-    inp = &in;\n-    UNPACK_FIELD_U32 (h, inp, header_size);\n-    UNPACK_FIELD_U32 (h, inp, file_version);\n-    UNPACK_FIELD_U32 (h, inp, pixmap_format);\n-    UNPACK_FIELD_U32 (h, inp, pixmap_depth);\n-    UNPACK_FIELD_U32 (h, inp, pixmap_width);\n-    UNPACK_FIELD_U32 (h, inp, pixmap_height);\n-    UNPACK_FIELD_U32 (h, inp, x_offset);\n-    UNPACK_FIELD_U32 (h, inp, byte_order);\n-    UNPACK_FIELD_U32 (h, inp, bitmap_unit);\n-    UNPACK_FIELD_U32 (h, inp, bitmap_bit_order);\n-    UNPACK_FIELD_U32 (h, inp, bitmap_pad);\n-    UNPACK_FIELD_U32 (h, inp, bits_per_pixel);\n-    UNPACK_FIELD_U32 (h, inp, bytes_per_line);\n-    UNPACK_FIELD_U32 (h, inp, visual_class);\n-    UNPACK_FIELD_U32 (h, inp, red_mask);\n-    UNPACK_FIELD_U32 (h, inp, green_mask);\n-    UNPACK_FIELD_U32 (h, inp, blue_mask);\n-    UNPACK_FIELD_U32 (h, inp, bits_per_rgb);\n-    UNPACK_FIELD_U32 (h, inp, color_map_entries);\n-    UNPACK_FIELD_U32 (h, inp, n_colors);\n-    UNPACK_FIELD_U32 (h, inp, window_width);\n-    UNPACK_FIELD_U32 (h, inp, window_height);\n-    UNPACK_FIELD_S32 (h, inp, window_x);\n-    UNPACK_FIELD_S32 (h, inp, window_y);\n-    UNPACK_FIELD_U32 (h, inp, window_border_width);\n\n+    h->header_size = g_ntohl (*(p++));\n+    h->file_version = g_ntohl (*(p++));\n+    h->pixmap_format = g_ntohl (*(p++));\n+    h->pixmap_depth = g_ntohl (*(p++));\n+    h->pixmap_width = g_ntohl (*(p++));\n+    h->pixmap_height = g_ntohl (*(p++));\n+    h->x_offset = g_ntohl (*(p++));\n+    h->byte_order = g_ntohl (*(p++));\n+    h->bitmap_unit = g_ntohl (*(p++));\n+    h->bitmap_bit_order = g_ntohl (*(p++));\n+    h->bitmap_pad = g_ntohl (*(p++));\n+    h->bits_per_pixel = g_ntohl (*(p++));\n+    h->bytes_per_line = g_ntohl (*(p++));\n+    h->visual_class = g_ntohl (*(p++));\n+    h->red_mask = g_ntohl (*(p++));\n+    h->green_mask = g_ntohl (*(p++));\n+    h->blue_mask = g_ntohl (*(p++));\n+    h->bits_per_rgb = g_ntohl (*(p++));\n+    h->color_map_entries = g_ntohl (*(p++));\n+    h->n_colors = g_ntohl (*(p++));\n+    h->window_width = g_ntohl (*(p++));\n+    h->window_height = g_ntohl (*(p++));\n+    h->window_x = g_ntohl (*(p++));\n+    h->window_y = g_ntohl (*(p++));\n+    h->window_border_width = g_ntohl (*(p++));\n\n-    ASSERT_HEADER (h->header_size <= 65535);\n\n-    ASSERT_HEADER (h->color_map_entries <= 256);\n\n-    ASSERT_HEADER (h->bits_per_pixel == 24 || h->bits_per_pixel == 32);\n-    ASSERT_HEADER (h->pixmap_width >= 1 && h->pixmap_width <= 65535);\n-    ASSERT_HEADER (h->pixmap_height >= 1 && h->pixmap_height <= 65535);\n\n-    ASSERT_HEADER (h->bytes_per_line <= h->pixmap_width * (h->bits_per_pixel / 8) + 1024);\n-    ASSERT_HEADER (h->bytes_per_line * h->pixmap_height < (1UL << 31) - 65536 - 256 * 32);\n\n-    ASSERT_HEADER (loader->file_data_len >= h->header_size + h->color_map_entries * sizeof (XwdColor)\n-                   + h->pixmap_height * (gsize) h->bytes_per_line);\n-    loader->image_data = (const guint8 *) loader->file_data + h->header_size + h->color_map_entries * sizeof (XwdColor);\n\n+    ASSERT_HEADER (loader->file_data_len >= h->header_size + h->n_colors * sizeof (XwdColor)\n+                   + h->pixmap_height * h->bytes_per_line);\n+    loader->image_data = (const guint8 *) loader->file_data + h->header_size + h->n_colors * sizeof (XwdColor);\n\n",
    "1": "+    ASSERT_HEADER (h->header_size <= 65535);\n\n",
    "2": "+    ASSERT_HEADER (h->color_map_entries <= 256);\n\n",
    "3": "+    ASSERT_HEADER (h->bits_per_pixel == 24 || h->bits_per_pixel == 32);\n+    ASSERT_HEADER (h->pixmap_width >= 1 && h->pixmap_width <= 65535);\n+    ASSERT_HEADER (h->pixmap_height >= 1 && h->pixmap_height <= 65535);\n\n",
    "4": "+    ASSERT_HEADER (h->bytes_per_line <= h->pixmap_width * (h->bits_per_pixel / 8) + 1024);\n+    ASSERT_HEADER (h->bytes_per_line * h->pixmap_height < (1UL << 31) - 65536 - 256 * 32);\n\n"
}