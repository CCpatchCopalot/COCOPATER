{
    "0": "-        OP_REQUIRES(context, input.dims() == 4, errors::InvalidArgument(\"input must be 4-dimensional\", input.shape().DebugString()));\n-        OP_REQUIRES(context, filter.dims() == 4, errors::InvalidArgument(\"filter must be 4-dimensional: \", filter.shape().DebugString()));\n\n+        OP_REQUIRES(context, input.dims() == 4, errors::InvalidArgument(\"input must be rank 4 but is rank \", input.shape().dims()));\n+        OP_REQUIRES(context, filter.dims() == 4, errors::InvalidArgument(\"filter must be rank 4 but is rank \", filter.shape().dims()));\n+        OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(2).shape()), errors::InvalidArgument(\"min_input must be rank 0 but is rank \", context->input(2).shape().dims()));\n+        OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(3).shape()), errors::InvalidArgument(\"max_input must be rank 0 but is rank \", context->input(3).shape().dims()));\n+        OP_REQUIRES( context, TensorShapeUtils::IsScalar(context->input(4).shape()), errors::InvalidArgument(\"min_filter must be rank 0 but is rank \", context->input(4).shape().dims()));\n+        OP_REQUIRES( context, TensorShapeUtils::IsScalar(context->input(5).shape()), errors::InvalidArgument(\"max_filter must be rank 0 but is rank \", context->input(5).shape().dims()));\n\n-        OP_REQUIRES(context, input.dims() == 4, errors::InvalidArgument(\"input must be rank 4 but is rank \", input.shape().dims()));\n-        OP_REQUIRES(context, filter.dims() == 4, errors::InvalidArgument(\"filter must be rank 4 but is rank \", filter.shape().dims()));\n-        OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(2).shape()), errors::InvalidArgument(\"min_input must be rank 0 but is rank \", context->input(2).shape().dims()));\n-        OP_REQUIRES(context, TensorShapeUtils::IsScalar(context->input(3).shape()), errors::InvalidArgument(\"max_input must be rank 0 but is rank \", context->input(3).shape().dims()));\n-        OP_REQUIRES( context, TensorShapeUtils::IsScalar(context->input(4).shape()), errors::InvalidArgument(\"min_filter must be rank 0 but is rank \", context->input(4).shape().dims()));\n-        OP_REQUIRES( context, TensorShapeUtils::IsScalar(context->input(5).shape()), errors::InvalidArgument(\"max_filter must be rank 0 but is rank \", context->input(5).shape().dims()));\n\n+        OP_REQUIRES(context, input.dims() == 4, errors::InvalidArgument(\"input must be 4-dimensional\", input.shape().DebugString()));\n+        OP_REQUIRES(context, filter.dims() == 4, errors::InvalidArgument(\"filter must be 4-dimensional: \", filter.shape().DebugString()));\n\n"
}