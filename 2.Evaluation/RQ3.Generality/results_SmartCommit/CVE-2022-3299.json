{
    "0": "-            ogs_debug(\"[%s] %s\", request->h.method, request->h.uri);\n\n+            ogs_log_level_e level = OGS_LOG_DEBUG;\n+            if (stream->memory_overflow == true) {\n+                level = OGS_LOG_ERROR;\n+            }\n+            ogs_log_message(level, 0, \"[%s] %s\", request->h.method, request->h.uri);\n\n-                ogs_debug(\"RECEIVED: %d\", (int)request->http.content_length);\n-                ogs_debug(\"%s\", request->http.content);\n\n+                ogs_log_message(level, 0, \"RECEIVED: %d\", (int)request->http.content_length);\n+                ogs_log_message(level, 0, \"%s\", request->http.content);\n+            }\n+            if (stream->memory_overflow == true) {\n+                ogs_error(\"[DROP] Overflow\");\n+                break;\n\n-            ogs_log_level_e level = OGS_LOG_DEBUG;\n-            if (stream->memory_overflow == true) {\n-                level = OGS_LOG_ERROR;\n-            }\n-            ogs_log_message(level, 0, \"[%s] %s\", request->h.method, request->h.uri);\n\n+            ogs_debug(\"[%s] %s\", request->h.method, request->h.uri);\n\n-                ogs_log_message(level, 0, \"RECEIVED: %d\", (int)request->http.content_length);\n-                ogs_log_message(level, 0, \"%s\", request->http.content);\n-            }\n-            if (stream->memory_overflow == true) {\n-                ogs_error(\"[DROP] Overflow\");\n-                break;\n\n+                ogs_debug(\"RECEIVED: %d\", (int)request->http.content_length);\n+                ogs_debug(\"%s\", request->http.content);\n\n",
    "1": "-        ogs_fatal(\"not enough memory (realloc returned NULL)\");\n-        ogs_assert_if_reached();\n\n+        conn->memory_overflow = true;\n+        ogs_error(\"Overflow : conn->size[%d], realsize[%d]\", (int)conn->size, (int)realsize);\n+        ogs_log_hexdump(OGS_LOG_ERROR, contents, realsize);\n\n-        conn->memory_overflow = true;\n-        ogs_error(\"Overflow : conn->size[%d], realsize[%d]\", (int)conn->size, (int)realsize);\n-        ogs_log_hexdump(OGS_LOG_ERROR, contents, realsize);\n\n+        ogs_fatal(\"not enough memory (realloc returned NULL)\");\n+        ogs_assert_if_reached();\n\n",
    "2": "+                ogs_log_level_e level = OGS_LOG_DEBUG;\n\n",
    "3": "-                ogs_debug(\"[%d:%s] %s\", response->status, response->h.method, response->h.uri);\n\n+                if (content_type) {\n+                    ogs_sbi_header_set(response->http.headers, OGS_SBI_CONTENT_TYPE, content_type);\n+                }\n+                if (conn->location) {\n+                    ogs_sbi_header_set(response->http.headers, OGS_SBI_LOCATION, conn->location);\n+                }\n+                if (conn->memory_overflow == true) {\n+                    level = OGS_LOG_ERROR;\n+                }\n+                ogs_log_message(level, 0, \"[%d:%s] %s\", response->status, response->h.method, response->h.uri);\n\n-                ogs_debug(\"RECEIVED[%d]\", (int)response->http.content_length);\n\n+                ogs_log_message(level, 0, \"RECEIVED[%d]\", (int)response->http.content_length);\n\n-                    ogs_debug(\"%s\", response->http.content);\n\n+                    ogs_log_message(level, 0, \"%s\", response->http.content);\n\n-                if (content_type) {\n-                    ogs_sbi_header_set(response->http.headers, OGS_SBI_CONTENT_TYPE, content_type);\n-                }\n-                if (conn->location) {\n-                    ogs_sbi_header_set(response->http.headers, OGS_SBI_LOCATION, conn->location);\n\n+                if (conn->memory_overflow == true) {\n+                    ogs_sbi_response_free(response);\n+                    connection_remove(conn);\n+                    break;\n\n-                ogs_log_level_e level = OGS_LOG_DEBUG;\n\n-                if (content_type) {\n-                    ogs_sbi_header_set(response->http.headers, OGS_SBI_CONTENT_TYPE, content_type);\n-                }\n-                if (conn->location) {\n-                    ogs_sbi_header_set(response->http.headers, OGS_SBI_LOCATION, conn->location);\n-                }\n-                if (conn->memory_overflow == true) {\n-                    level = OGS_LOG_ERROR;\n-                }\n-                ogs_log_message(level, 0, \"[%d:%s] %s\", response->status, response->h.method, response->h.uri);\n\n+                ogs_debug(\"[%d:%s] %s\", response->status, response->h.method, response->h.uri);\n\n-                ogs_log_message(level, 0, \"RECEIVED[%d]\", (int)response->http.content_length);\n\n+                ogs_debug(\"RECEIVED[%d]\", (int)response->http.content_length);\n\n-                    ogs_log_message(level, 0, \"%s\", response->http.content);\n\n+                    ogs_debug(\"%s\", response->http.content);\n\n-                if (conn->memory_overflow == true) {\n-                    ogs_sbi_response_free(response);\n-                    connection_remove(conn);\n-                    break;\n\n+                if (content_type) {\n+                    ogs_sbi_header_set(response->http.headers, OGS_SBI_CONTENT_TYPE, content_type);\n+                }\n+                if (conn->location) {\n+                    ogs_sbi_header_set(response->http.headers, OGS_SBI_LOCATION, conn->location);\n\n",
    "4": "-        request->http.content_length = len;\n-        request->http.content = (char*)ogs_malloc(request->http.content_length + 1);\n-        ogs_assert(request->http.content);\n\n+        ogs_assert(request->http.content_length == 0);\n+        ogs_assert(offset == 0);\n+        request->http.content = (char*)ogs_malloc(len + 1);\n\n-        offset = request->http.content_length;\n-        if ((request->http.content_length + len) > OGS_HUGE_LEN) {\n\n+        ogs_assert(request->http.content_length != 0);\n+        request->http.content = (char*)ogs_realloc( request->http.content, request->http.content_length + len + 1);\n+    }\n+    if (!request->http.content) {\n+        stream->memory_overflow = true;\n\n-            ogs_assert_if_reached();\n\n+        ogs_log_hexdump(OGS_LOG_ERROR, data, len);\n+        return 0;\n\n-        ogs_assert(request->http.content_length == 0);\n-        ogs_assert(offset == 0);\n-        request->http.content = (char*)ogs_malloc(len + 1);\n\n+        request->http.content_length = len;\n+        request->http.content = (char*)ogs_malloc(request->http.content_length + 1);\n+        ogs_assert(request->http.content);\n\n-        ogs_assert(request->http.content_length != 0);\n-        request->http.content = (char*)ogs_realloc( request->http.content, request->http.content_length + len + 1);\n-    }\n-    if (!request->http.content) {\n-        stream->memory_overflow = true;\n\n+        offset = request->http.content_length;\n+        if ((request->http.content_length + len) > OGS_HUGE_LEN) {\n\n-        ogs_log_hexdump(OGS_LOG_ERROR, data, len);\n-        return 0;\n\n+            ogs_assert_if_reached();\n\n-    offset = request->http.content_length;\n\n+        request->http.content = (char *)ogs_realloc( request->http.content, request->http.content_length + 1);\n+        ogs_assert(request->http.content);\n+    }\n\n",
    "5": "+    offset = request->http.content_length;\n\n",
    "6": "-        request->http.content = (char *)ogs_realloc( request->http.content, request->http.content_length + 1);\n-        ogs_assert(request->http.content);\n-    }\n\n"
}