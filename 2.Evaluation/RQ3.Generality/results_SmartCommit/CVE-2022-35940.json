{
    "0": "-            rt_nested_splits(row + 1) = rt_nested_splits(row) + RangeSize(start, limit, delta);\n\n+            int64_t size;\n+            if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {\n+                size = 0;\n+            } else if (std::is_integral<T>::value) {\n+                size = Eigen::divup(Eigen::numext::abs(limit - start), Eigen::numext::abs(delta));\n+            } else {\n+                auto size_auto = Eigen::numext::ceil(Eigen::numext::abs((limit - start) / delta));\n+                OP_REQUIRES( context, size_auto <= std::numeric_limits<int64_t>::max(), errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \", std::numeric_limits<int64_t>::max()));\n+                size = static_cast<int64_t>(size_auto);\n+            }\n+            rt_nested_splits(row + 1) = rt_nested_splits(row) + size;\n\n-            int64_t size;\n-            if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {\n-                size = 0;\n-            } else if (std::is_integral<T>::value) {\n-                size = Eigen::divup(Eigen::numext::abs(limit - start), Eigen::numext::abs(delta));\n-            } else {\n-                auto size_auto = Eigen::numext::ceil(Eigen::numext::abs((limit - start) / delta));\n-                OP_REQUIRES( context, size_auto <= std::numeric_limits<int64_t>::max(), errors::InvalidArgument(\"Requires ((limit - start) / delta) <= \", std::numeric_limits<int64_t>::max()));\n-                size = static_cast<int64_t>(size_auto);\n-            }\n-            rt_nested_splits(row + 1) = rt_nested_splits(row) + size;\n\n+            rt_nested_splits(row + 1) = rt_nested_splits(row) + RangeSize(start, limit, delta);\n\n",
    "1": "+private:\n+    SPLITS_TYPE RangeSize(T start, T limit, T delta) {\n+        if (((delta > 0) && (limit < start)) || ((delta < 0) && (limit > start))) {\n+            return 0;\n+        }\n+        return (std::is_integral<T>::value ? ((std::abs(limit - start) + std::abs(delta) - 1) / std::abs(delta))\n+                : std::ceil(std::abs((limit - start) / delta)));\n+    }\n\n"
}