{
    "0": "-        sprintf(extra, \"%ld\", dynEntry->d_un.d_val);\n\n+        snprintf(extra, 500, \"%ld\", dynEntry->d_un.d_val);\n\n-    sprintf(buf,\"%-15s %s\", name, extra);\n\n+    snprintf(buf, 1024, \"%-15s %s\", name, extra);\n\n-        snprintf(extra, 500, \"%ld\", dynEntry->d_un.d_val);\n\n+        sprintf(extra, \"%ld\", dynEntry->d_un.d_val);\n\n-    snprintf(buf, 1024, \"%-15s %s\", name, extra);\n\n+    sprintf(buf,\"%-15s %s\", name, extra);\n\n",
    "1": "-        char * stringTable = malloc(shstr_hdr.sh_size);\n-        fseek(f, shstr_hdr.sh_offset, SEEK_SET);\n-        fread(stringTable, shstr_hdr.sh_size, 1, f);\n\n+        struct StringTable * stringTable = load_string_table(f, &shstr_hdr);\n\n-                printf(\"  [%2d] %-17.17s %-16.16s %016lx  %08lx\\n\", i, stringTable + sectionHeader.sh_name, sectionHeaderTypeToStr(sectionHeader.sh_type), sectionHeader.sh_addr, sectionHeader.sh_offset);\n\n+                printf(\"  [%2d] %-17.17s %-16.16s %016lx  %08lx\\n\", i, string_from_table(stringTable, sectionHeader.sh_name), sectionHeaderTypeToStr(sectionHeader.sh_type), sectionHeader.sh_addr,\n+                       sectionHeader.sh_offset);\n\n-                    printf(\"\\nRelocation section '%s' at offset 0x%lx contains %ld entries.\\n\", stringTable + sectionHeader.sh_name, sectionHeader.sh_offset, sectionHeader.sh_size / sizeof(Elf64_Rela));\n\n+                    printf(\"\\nRelocation section '%s' at offset 0x%lx contains %ld entries.\\n\", string_from_table(stringTable, sectionHeader.sh_name), sectionHeader.sh_offset, sectionHeader.sh_size / sizeof(Elf64_Rela));\n\n-                    char * strtab = malloc(shdr_strtab.sh_size);\n-                    fseek(f, shdr_strtab.sh_offset, SEEK_SET);\n-                    fread(strtab, shdr_strtab.sh_size, 1, f);\n\n+                    struct StringTable * strtab = load_string_table(f, &shdr_strtab);\n\n-                        Elf64_Sym * this = &symtab[ELF64_R_SYM(relocations[i].r_info)];\n-                        char * symName;\n\n+                        size_t offset = ELF64_R_SYM(relocations[i].r_info);\n+                        Elf64_Xword value = 0;\n+                        const char * symName = \"(null)\";\n+                        if (offset < shdr_symtab.sh_size) {\n+                            Elf64_Sym * this = &symtab[offset];\n\n-                            symName = stringTable + shdr.sh_name;\n\n+                                symName = string_from_table(stringTable, shdr.sh_name);\n\n-                            symName = strtab + this->st_name;\n\n+                                symName = string_from_table(strtab, this->st_name);\n\n-                    printf(\"\\nSymbol table '%s' contains %ld entries.\\n\", stringTable + sectionHeader.sh_name, sectionHeader.sh_size / sizeof(Elf64_Sym));\n\n+                    printf(\"\\nSymbol table '%s' contains %ld entries.\\n\", string_from_table(stringTable, sectionHeader.sh_name), sectionHeader.sh_size / sizeof(Elf64_Sym));\n\n-                    char * strtab = malloc(shdr_strtab.sh_size);\n-                    fseek(f, shdr_strtab.sh_offset, SEEK_SET);\n-                    fread(strtab, shdr_strtab.sh_size, 1, f);\n\n+                    struct StringTable * strtab = load_string_table(f, &shdr_strtab);\n\n-                               symtab[i].st_shndx, strtab + symtab[i].st_name);\n\n+                               symtab[i].st_shndx, string_from_table(strtab, symtab[i].st_name));\n\n-        struct StringTable * stringTable = load_string_table(f, &shstr_hdr);\n\n+        char * stringTable = malloc(shstr_hdr.sh_size);\n+        fseek(f, shstr_hdr.sh_offset, SEEK_SET);\n+        fread(stringTable, shstr_hdr.sh_size, 1, f);\n\n-                printf(\"  [%2d] %-17.17s %-16.16s %016lx  %08lx\\n\", i, string_from_table(stringTable, sectionHeader.sh_name), sectionHeaderTypeToStr(sectionHeader.sh_type), sectionHeader.sh_addr,\n-                       sectionHeader.sh_offset);\n\n+                printf(\"  [%2d] %-17.17s %-16.16s %016lx  %08lx\\n\", i, stringTable + sectionHeader.sh_name, sectionHeaderTypeToStr(sectionHeader.sh_type), sectionHeader.sh_addr, sectionHeader.sh_offset);\n\n-            if (sectionHeader.sh_size > 0x40000000) {\n-                continue;\n-            }\n\n-                    printf(\"\\nRelocation section '%s' at offset 0x%lx contains %ld entries.\\n\", string_from_table(stringTable, sectionHeader.sh_name), sectionHeader.sh_offset, sectionHeader.sh_size / sizeof(Elf64_Rela));\n\n+                    printf(\"\\nRelocation section '%s' at offset 0x%lx contains %ld entries.\\n\", stringTable + sectionHeader.sh_name, sectionHeader.sh_offset, sectionHeader.sh_size / sizeof(Elf64_Rela));\n\n-                    struct StringTable * strtab = load_string_table(f, &shdr_strtab);\n\n+                    char * strtab = malloc(shdr_strtab.sh_size);\n+                    fseek(f, shdr_strtab.sh_offset, SEEK_SET);\n+                    fread(strtab, shdr_strtab.sh_size, 1, f);\n\n-                        size_t offset = ELF64_R_SYM(relocations[i].r_info);\n-                        Elf64_Xword value = 0;\n-                        const char * symName = \"(null)\";\n-                        if (offset < shdr_symtab.sh_size) {\n-                            Elf64_Sym * this = &symtab[offset];\n\n+                        Elf64_Sym * this = &symtab[ELF64_R_SYM(relocations[i].r_info)];\n+                        char * symName;\n\n-                                symName = string_from_table(stringTable, shdr.sh_name);\n\n+                            symName = stringTable + shdr.sh_name;\n\n-                                symName = string_from_table(strtab, this->st_name);\n\n+                            symName = strtab + this->st_name;\n\n+                        Elf64_Xword value = 0;\n\n-                    printf(\"\\nSymbol table '%s' contains %ld entries.\\n\", string_from_table(stringTable, sectionHeader.sh_name), sectionHeader.sh_size / sizeof(Elf64_Sym));\n\n+                    printf(\"\\nSymbol table '%s' contains %ld entries.\\n\", stringTable + sectionHeader.sh_name, sectionHeader.sh_size / sizeof(Elf64_Sym));\n\n-                    struct StringTable * strtab = load_string_table(f, &shdr_strtab);\n\n+                    char * strtab = malloc(shdr_strtab.sh_size);\n+                    fseek(f, shdr_strtab.sh_offset, SEEK_SET);\n+                    fread(strtab, shdr_strtab.sh_size, 1, f);\n\n-                               symtab[i].st_shndx, string_from_table(strtab, symtab[i].st_name));\n\n+                               symtab[i].st_shndx, strtab + symtab[i].st_name);\n\n-        free(stringTable);\n\n",
    "2": "+            if (sectionHeader.sh_size > 0x40000000) {\n+                continue;\n+            }\n\n",
    "3": "-                        Elf64_Xword value = 0;\n\n",
    "4": "+                        }\n\n",
    "5": "+        free(stringTable);\n\n",
    "6": "-                        }\n\n"
}