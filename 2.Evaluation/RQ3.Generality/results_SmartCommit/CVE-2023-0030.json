{
    "0": "-    struct nvkm_vma *next;\n\n+    struct nvkm_vma *next = node(vma, next);\n+    struct nvkm_vma *prev = NULL;\n\n-    struct nvkm_vma *next = node(vma, next);\n-    struct nvkm_vma *prev = NULL;\n\n+    struct nvkm_vma *next;\n\n",
    "1": "-    if (vma->part) {\n-        struct nvkm_vma *prev = node(vma, prev);\n-        if (!prev->memory) {\n-            prev->size += vma->size;\n-            rb_erase(&vma->tree, &vmm->root);\n-            list_del(&vma->head);\n-            kfree(vma);\n-            vma = prev;\n-        }\n-    }\n-    next = node(vma, next);\n-    if (next && next->part) {\n-        if (!next->memory) {\n-            vma->size += next->size;\n-            rb_erase(&next->tree, &vmm->root);\n-            list_del(&next->head);\n-            kfree(next);\n\n+    if (!vma->part || ((prev = node(vma, prev)), prev->memory)) {\n+        prev = NULL;\n\n-    if (!vma->part || ((prev = node(vma, prev)), prev->memory)) {\n-        prev = NULL;\n\n+    if (vma->part) {\n+        struct nvkm_vma *prev = node(vma, prev);\n+        if (!prev->memory) {\n+            prev->size += vma->size;\n+            rb_erase(&vma->tree, &vmm->root);\n+            list_del(&vma->head);\n+            kfree(vma);\n+            vma = prev;\n+        }\n+    }\n+    next = node(vma, next);\n+    if (next && next->part) {\n+        if (!next->memory) {\n+            vma->size += next->size;\n+            rb_erase(&next->tree, &vmm->root);\n+            list_del(&next->head);\n+            kfree(next);\n\n",
    "2": "+    if (!next->part || next->memory) {\n+        next = NULL;\n\n",
    "3": "+    nvkm_vmm_node_merge(vmm, prev, vma, next, vma->size);\n\n",
    "4": "-    if (!next->part || next->memory) {\n-        next = NULL;\n\n",
    "5": "-    nvkm_vmm_node_merge(vmm, prev, vma, next, vma->size);\n\n",
    "6": "-        rb_erase(&prev->tree, &vmm->free);\n-        list_del(&prev->head);\n\n",
    "7": "-        kfree(prev);\n\n+        nvkm_vmm_free_delete(vmm, prev);\n\n-        kfree(next);\n\n+        nvkm_vmm_free_delete(vmm, next);\n\n-        nvkm_vmm_free_delete(vmm, prev);\n\n+        kfree(prev);\n\n-        nvkm_vmm_free_delete(vmm, next);\n\n+        kfree(next);\n\n",
    "8": "-        rb_erase(&next->tree, &vmm->free);\n-        list_del(&next->head);\n\n",
    "9": "+        rb_erase(&prev->tree, &vmm->free);\n+        list_del(&prev->head);\n\n",
    "10": "+        rb_erase(&next->tree, &vmm->free);\n+        list_del(&next->head);\n\n",
    "11": "-            rb_erase(&this->tree, &vmm->free);\n\n+            nvkm_vmm_free_remove(vmm, this);\n\n-            nvkm_vmm_free_remove(vmm, this);\n\n+            rb_erase(&this->tree, &vmm->free);\n\n-    rb_erase(&vma->tree, &vmm->root);\n\n+    nvkm_vmm_node_remove(vmm, vma);\n\n-    nvkm_vmm_node_remove(vmm, vma);\n\n+    rb_erase(&vma->tree, &vmm->root);\n\n",
    "12": "-        if (vma->addr != addr) {\n-            const u64 tail = vma->size + vma->addr - addr;\n-            if (ret = -ENOMEM, !(vma = nvkm_vma_tail(vma, tail))) {\n\n+        vma = nvkm_vmm_node_split(vmm, vma, addr, size);\n+        if (!vma) {\n+            ret = -ENOMEM;\n\n",
    "13": "-            vma->part = true;\n-            nvkm_vmm_node_insert(vmm, vma);\n-        }\n-        if (vma->size != size) {\n-            const u64 tail = vma->size - size;\n-            struct nvkm_vma *tmp;\n-            if (ret = -ENOMEM, !(tmp = nvkm_vma_tail(vma, tail))) {\n-                nvkm_vmm_unmap_region(vmm, vma);\n-                goto fail;\n-            }\n-            tmp->part = true;\n-            nvkm_vmm_node_insert(vmm, tmp);\n-        }\n\n",
    "14": "-        vma = nvkm_vmm_node_split(vmm, vma, addr, size);\n-        if (!vma) {\n-            ret = -ENOMEM;\n\n+        if (vma->addr != addr) {\n+            const u64 tail = vma->size + vma->addr - addr;\n+            if (ret = -ENOMEM, !(vma = nvkm_vma_tail(vma, tail))) {\n\n+            vma->part = true;\n+            nvkm_vmm_node_insert(vmm, vma);\n+        }\n+        if (vma->size != size) {\n+            const u64 tail = vma->size - size;\n+            struct nvkm_vma *tmp;\n+            if (ret = -ENOMEM, !(tmp = nvkm_vma_tail(vma, tail))) {\n+                nvkm_vmm_unmap_region(vmm, vma);\n+                goto fail;\n+            }\n+            tmp->part = true;\n+            nvkm_vmm_node_insert(vmm, tmp);\n+        }\n\n"
}