{
    "0": "-        char *out;\n\n",
    "1": "-        out = r_core_editor (core, NULL, comment);\n\n+        char *out = r_core_editor (core, NULL, comment);\n\n+        char *out;\n\n-        char *out = r_core_editor (core, NULL, comment);\n\n+        out = r_core_editor (core, NULL, comment);\n\n-            r_str_ansi_strip (out);\n\n-        r_str_ansi_strip (nc);\n\n-        r_str_ansi_strip (s);\n\n-    r_str_ansi_strip (o);\n\n-    r_str_ansi_strip (o);\n\n",
    "2": "+            r_str_ansi_strip (out);\n\n",
    "3": "+        r_str_ansi_strip (nc);\n\n",
    "4": "+        r_str_ansi_strip (s);\n\n",
    "5": "-    item->str = str ? strdup (str) : NULL;\n-    if (str && !item->str) {\n-        if (!node) {\n-            free (item);\n-        }\n-        return false;\n\n+    if (R_STR_ISNOTEMPTY (str)) {\n+        item->str = strdup (str);\n+    } else {\n+        item->str = NULL;\n\n-    if (R_STR_ISNOTEMPTY (str)) {\n-        item->str = strdup (str);\n-    } else {\n-        item->str = NULL;\n\n+    item->str = str ? strdup (str) : NULL;\n+    if (str && !item->str) {\n+        if (!node) {\n+            free (item);\n+        }\n+        return false;\n\n",
    "6": "+    char *fn = NULL;\n\n",
    "7": "-            const char *filename = (const char *)buf;\n\n",
    "8": "-            size_t len = r_str_nlen (filename, maxlen);\n\n+            free (fn);\n+            fn = r_str_ndup ((const char *)buf, maxlen);\n+            r_str_ansi_strip (fn);\n+            size_t len = strlen (fn);\n\n-                    hdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), filename);\n\n+                    hdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), fn);\n\n-    char *fn = NULL;\n\n+            const char *filename = (const char *)buf;\n\n-            free (fn);\n-            fn = r_str_ndup ((const char *)buf, maxlen);\n-            r_str_ansi_strip (fn);\n-            size_t len = strlen (fn);\n\n+            size_t len = r_str_nlen (filename, maxlen);\n\n-                    hdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), fn);\n\n+                    hdr->file_names[count].name = r_str_newf(\"%s/%s\", r_str_get (include_dir), filename);\n\n-    free (fn);\n\n",
    "9": "-                print (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\", entry_index++, id_idx, mod_time, file_len, filename);\n\n+                print (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\", entry_index++, id_idx, mod_time, file_len, fn);\n\n-                print (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\", entry_index++, id_idx, mod_time, file_len, fn);\n\n+                print (\"  %d     %\" PFMT64d \"       %\" PFMT64d \"         %\" PFMT64d \"          %s\\n\", entry_index++, id_idx, mod_time, file_len, filename);\n\n",
    "10": "+    free (fn);\n\n",
    "11": "+    r_str_ansi_strip (o);\n\n",
    "12": "+    r_str_ansi_strip (o);\n\n",
    "13": "-        value->string.content = *buf ? r_str_ndup ((const char *)buf, buf_end - buf) : NULL;\n\n+        if (*buf) {\n+            char *name = r_str_ndup ((const char *)buf, buf_end - buf);\n+            r_str_ansi_strip (name);\n+            r_str_replace_ch (name, '\\n', 0, true);\n+            r_str_replace_ch (name, '\\t', 0, true);\n+            value->string.content = name;\n+        } else {\n+            value->string.content = NULL;\n+        }\n\n-            const char *ds = (const char *)(debug_str + value->string.offset);\n-            value->string.content = strdup (ds);\n\n+            char *ds = r_str_ndup ((const char *)(debug_str + value->string.offset), debug_str_len);\n+            if (ds) {\n+                r_str_ansi_strip (ds);\n+                r_str_replace_ch (ds, '\\n', 0, true);\n+                r_str_replace_ch (ds, '\\t', 0, true);\n+                value->string.content = ds;\n+            } else {\n+                value->string.content = NULL;\n+            }\n\n-        if (*buf) {\n-            char *name = r_str_ndup ((const char *)buf, buf_end - buf);\n-            r_str_ansi_strip (name);\n-            r_str_replace_ch (name, '\\n', 0, true);\n-            r_str_replace_ch (name, '\\t', 0, true);\n-            value->string.content = name;\n-        } else {\n-            value->string.content = NULL;\n-        }\n\n+        value->string.content = *buf ? r_str_ndup ((const char *)buf, buf_end - buf) : NULL;\n\n-            char *ds = r_str_ndup ((const char *)(debug_str + value->string.offset), debug_str_len);\n-            if (ds) {\n-                r_str_ansi_strip (ds);\n-                r_str_replace_ch (ds, '\\n', 0, true);\n-                r_str_replace_ch (ds, '\\t', 0, true);\n-                value->string.content = ds;\n-            } else {\n-                value->string.content = NULL;\n-            }\n\n+            const char *ds = (const char *)(debug_str + value->string.offset);\n+            value->string.content = strdup (ds);\n\n",
    "14": "-            const char *name = attribute->string.content;\n-            sdb_set (sdb, \"DW_AT_comp_dir\", name, 0);\n\n+            char *name = strdup (attribute->string.content);\n+            r_str_ansi_strip (name);\n+            r_str_replace_ch (name, '\\n', 0, true);\n+            r_str_replace_ch (name, '\\t', 0, true);\n+            sdb_set_owned (sdb, \"DW_AT_comp_dir\", name, 0);\n\n-            char *name = strdup (attribute->string.content);\n-            r_str_ansi_strip (name);\n-            r_str_replace_ch (name, '\\n', 0, true);\n-            r_str_replace_ch (name, '\\t', 0, true);\n-            sdb_set_owned (sdb, \"DW_AT_comp_dir\", name, 0);\n\n+            const char *name = attribute->string.content;\n+            sdb_set (sdb, \"DW_AT_comp_dir\", name, 0);\n\n",
    "15": "-            r_str_cpy (str + i + 1, str + i + chlen);\n-        }\n\n+            r_str_cpy (str + i, str + i + chlen);\n+        } else {\n\n-            r_str_cpy (str + i, str + i + chlen);\n-        } else {\n-            i++;\n\n+            r_str_cpy (str + i + 1, str + i + chlen);\n\n",
    "16": "+    }\n\n",
    "17": "+        i++;\n\n",
    "18": "-    char *fileline;\n\n",
    "19": "-    fileline = r_str_newf (\"%s|%\"PFMT64d, p, line);\n\n+    char *fileline = r_str_newf (\"%s|%\"PFMT64d, p, line);\n+    r_str_ansi_strip (fileline);\n+    r_str_replace_ch (fileline, '\\n', 0, true);\n+    r_str_replace_ch (fileline, '\\t', 0, true);\n\n-    char *fileline = r_str_newf (\"%s|%\"PFMT64d, p, line);\n-    r_str_ansi_strip (fileline);\n-    r_str_replace_ch (fileline, '\\n', 0, true);\n-    r_str_replace_ch (fileline, '\\t', 0, true);\n\n+    fileline = r_str_newf (\"%s|%\"PFMT64d, p, line);\n\n",
    "20": "+    char *fileline;\n\n"
}