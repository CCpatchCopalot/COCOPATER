{
    "0": "-        fn = makeFuncCall(list_make1(makeString(\"count\")), NIL, COERCE_EXPLICIT_CALL, -1);\n\n+        fn = makeFuncCall(SystemFuncName(\"count\"), NIL, COERCE_EXPLICIT_CALL, -1);\n\n",
    "1": "-        fn = makeFuncCall(list_make1(makeString(\"count\")), NIL, -1);\n\n+        fn = makeFuncCall(SystemFuncName(\"count\"), NIL, -1);\n\n",
    "2": "-        fn = makeFuncCall(list_make1(makeString(\"sum\")), NIL, COERCE_EXPLICIT_CALL, -1);\n\n+        fn = makeFuncCall(SystemFuncName(\"sum\"), NIL, COERCE_EXPLICIT_CALL, -1);\n\n",
    "3": "-        fn = makeFuncCall(list_make1(makeString(\"sum\")), NIL, -1);\n\n+        fn = makeFuncCall(SystemFuncName(\"sum\"), NIL, -1);\n\n",
    "4": "-        fn = makeFuncCall(SystemFuncName(\"count\"), NIL, COERCE_EXPLICIT_CALL, -1);\n\n+        fn = makeFuncCall(list_make1(makeString(\"count\")), NIL, COERCE_EXPLICIT_CALL, -1);\n\n-        fn = makeFuncCall(SystemFuncName(\"count\"), NIL, -1);\n\n+        fn = makeFuncCall(list_make1(makeString(\"count\")), NIL, -1);\n\n-        fn = makeFuncCall(SystemFuncName(\"sum\"), NIL, COERCE_EXPLICIT_CALL, -1);\n\n+        fn = makeFuncCall(list_make1(makeString(\"sum\")), NIL, COERCE_EXPLICIT_CALL, -1);\n\n-        fn = makeFuncCall(SystemFuncName(\"sum\"), NIL, -1);\n\n+        fn = makeFuncCall(list_make1(makeString(\"sum\")), NIL, -1);\n\n-    fn = makeFuncCall(SystemFuncName(\"count\"), NIL, COERCE_EXPLICIT_CALL, -1);\n\n+    fn = makeFuncCall(list_make1(makeString(\"count\")), NIL, COERCE_EXPLICIT_CALL, -1);\n\n-    fn = makeFuncCall(SystemFuncName(\"count\"), NIL, -1);\n\n+    fn = makeFuncCall(list_make1(makeString(\"count\")), NIL, -1);\n\n-        fn = makeFuncCall(SystemFuncName(\"count\"), NIL, COERCE_EXPLICIT_CALL, -1);\n\n+        fn = makeFuncCall(list_make1(makeString(\"count\")), NIL, COERCE_EXPLICIT_CALL, -1);\n\n-        fn = makeFuncCall(SystemFuncName(\"count\"), NIL, -1);\n\n+        fn = makeFuncCall(list_make1(makeString(\"count\")), NIL, -1);\n\n",
    "5": "-                append_set_clause_for_avg(resname, aggs_set_old, aggs_set_new, aggs_list_buf, format_type_be(aggref->aggtype));\n\n+                append_set_clause_for_avg(resname, aggs_set_old, aggs_set_new, aggs_list_buf, format_type_be_qualified(aggref->aggtype));\n\n",
    "6": "-                append_set_clause_for_avg(resname, aggs_set_old, aggs_set_new, aggs_list_buf, format_type_be_qualified(aggref->aggtype));\n\n+                append_set_clause_for_avg(resname, aggs_set_old, aggs_set_new, aggs_list_buf, format_type_be(aggref->aggtype));\n\n",
    "7": "-    appendStringInfo(&querybuf, \"SERT TO %s (%s) SELECT %s FROM (\" \"SELECT diff.*, generate_series(1, diff.\\\"__ivm_count__\\\") AS __ivm_generate_series__ \" \"FROM %s AS diff) AS v\", matviewname,\n\n+    appendStringInfo(&querybuf, \"SERT TO %s (%s) SELECT %s FROM (\" \"SELECT diff.*, pg_catalog.generate_series(1, diff.\\\"__ivm_count__\\\") AS __ivm_generate_series__ \" \"FROM %s AS diff) AS v\", matviewname,\n\n-    appendStringInfo(&querybuf, \"SERT TO %s (%s) SELECT %s FROM (\" \"SELECT diff.*, pg_catalog.generate_series(1, diff.\\\"__ivm_count__\\\") AS __ivm_generate_series__ \" \"FROM %s AS diff) AS v\", matviewname,\n\n+    appendStringInfo(&querybuf, \"SERT TO %s (%s) SELECT %s FROM (\" \"SELECT diff.*, generate_series(1, diff.\\\"__ivm_count__\\\") AS __ivm_generate_series__ \" \"FROM %s AS diff) AS v\", matviewname,\n\n",
    "8": "-    fn = makeFuncCall(list_make1(makeString(\"count\")), NIL, COERCE_EXPLICIT_CALL, -1);\n\n+    fn = makeFuncCall(SystemFuncName(\"count\"), NIL, COERCE_EXPLICIT_CALL, -1);\n\n",
    "9": "-    fn = makeFuncCall(list_make1(makeString(\"count\")), NIL, -1);\n\n+    fn = makeFuncCall(SystemFuncName(\"count\"), NIL, -1);\n\n",
    "10": "-    appendStringInfo(&str, \"SELECT t.* FROM %s t\" \" WHERE ivm_visible_in_prestate(t.tableoid, t.ctid ,%d::oid)\", relname, matviewid);\n\n+    appendStringInfo(&str, \"SELECT t.* FROM %s t\" \" WHERE pg_catalog.ivm_visible_in_prestate(t.tableoid, t.ctid ,%d::pg_catalog.oid)\", relname, matviewid);\n\n",
    "11": "-    appendStringInfo(&str, \"SELECT t.* FROM %s t\" \" WHERE pg_catalog.ivm_visible_in_prestate(t.tableoid, t.ctid ,%d::pg_catalog.oid)\", relname, matviewid);\n\n+    appendStringInfo(&str, \"SELECT t.* FROM %s t\" \" WHERE ivm_visible_in_prestate(t.tableoid, t.ctid ,%d::oid)\", relname, matviewid);\n\n",
    "12": "-        fn = makeFuncCall(list_make1(makeString(\"count\")), NIL, COERCE_EXPLICIT_CALL, -1);\n\n+        fn = makeFuncCall(SystemFuncName(\"count\"), NIL, COERCE_EXPLICIT_CALL, -1);\n\n",
    "13": "-        fn = makeFuncCall(list_make1(makeString(\"count\")), NIL, -1);\n\n+        fn = makeFuncCall(SystemFuncName(\"count\"), NIL, -1);\n\n",
    "14": "-    appendStringInfo(&querybuf, \"DELETE FROM %s WHERE ctid  (\" \"SELECT tid FROM (SELECT row_number() over (partition by %s) AS \\\"__ivm_row_number__\\\",\" \"mv.ctid AS tid,\" \"diff.\\\"__ivm_count__\\\"\"\n-                     \"FROM %s AS mv, %s AS diff \" \"WHERE %s) v \" \"WHERE v.\\\"__ivm_row_number__\\\" OPERATOR(pg_catalog.<=) v.\\\"__ivm_count__\\\")\", matviewname, keysbuf.data, matviewname, deltaname_old, match_cond);\n\n+    appendStringInfo(&querybuf, \"DELETE FROM %s WHERE ctid  (\" \"SELECT tid FROM (SELECT pg_catalog.row_number() over (partition by %s) AS \\\"__ivm_row_number__\\\",\" \"mv.ctid AS tid,\"\n+                     \"diff.\\\"__ivm_count__\\\"\" \"FROM %s AS mv, %s AS diff \" \"WHERE %s) v \" \"WHERE v.\\\"__ivm_row_number__\\\" OPERATOR(pg_catalog.<=) v.\\\"__ivm_count__\\\")\", matviewname, keysbuf.data, matviewname,\n+                     deltaname_old, match_cond);\n\n-    appendStringInfo(&querybuf, \"DELETE FROM %s WHERE ctid  (\" \"SELECT tid FROM (SELECT pg_catalog.row_number() over (partition by %s) AS \\\"__ivm_row_number__\\\",\" \"mv.ctid AS tid,\"\n-                     \"diff.\\\"__ivm_count__\\\"\" \"FROM %s AS mv, %s AS diff \" \"WHERE %s) v \" \"WHERE v.\\\"__ivm_row_number__\\\" OPERATOR(pg_catalog.<=) v.\\\"__ivm_count__\\\")\", matviewname, keysbuf.data, matviewname,\n-                     deltaname_old, match_cond);\n\n+    appendStringInfo(&querybuf, \"DELETE FROM %s WHERE ctid  (\" \"SELECT tid FROM (SELECT row_number() over (partition by %s) AS \\\"__ivm_row_number__\\\",\" \"mv.ctid AS tid,\" \"diff.\\\"__ivm_count__\\\"\"\n+                     \"FROM %s AS mv, %s AS diff \" \"WHERE %s) v \" \"WHERE v.\\\"__ivm_row_number__\\\" OPERATOR(pg_catalog.<=) v.\\\"__ivm_count__\\\")\", matviewname, keysbuf.data, matviewname, deltaname_old, match_cond);\n\n",
    "15": "-        ereport(ERROR, (errcode(ERRCODE_UNDEFED_FUNCTION), errmsg(\"could not identify an equality operator for type %s\", format_type_be(opttype))));\n\n+        ereport(ERROR, (errcode(ERRCODE_UNDEFED_FUNCTION), errmsg(\"could not identify an equality operator for type %s\", format_type_be_qualified(opttype))));\n\n-        ereport(ERROR, (errcode(ERRCODE_UNDEFED_FUNCTION), errmsg(\"could not identify an equality operator for type %s\", format_type_be_qualified(opttype))));\n\n+        ereport(ERROR, (errcode(ERRCODE_UNDEFED_FUNCTION), errmsg(\"could not identify an equality operator for type %s\", format_type_be(opttype))));\n\n"
}