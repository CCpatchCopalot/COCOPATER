{
    "0": "-    char\tscheme[1024], *ptr, cmdline[65536];\n-    int retval;\n-    strncpy(scheme, uri, sizeof(scheme) - 1);\n-    if (strlen(uri) > 1023) {\n-        scheme[1023] = '\\0';\n-    }\n\n+    char *backend_argv[8];\n+    char\tscheme[1024], *ptr, backend_path[2048];\n+    int pid, wait_pid, wait_status, retval = 0;\n+    int bytes;\n+    scheme[0] = '\\0';\n+    strncat(scheme, uri, sizeof(scheme) - 1);\n\n-    } else {\n-        snprintf(cmdline, sizeof(cmdline), \"%s/backend/%s '%s' '%s' '%s' '%s' '%s' %s\", cups_serverbin, scheme, argv[1], argv[2], argv[3], (argc == 6 ? \"1\" : argv[4]), argv[5], filename);\n\n+    }\n+    backend_argv[0] = uri;\n+    backend_argv[1] = argv[1];\n+    backend_argv[2] = argv[2];\n+    backend_argv[3] = argv[3];\n+    backend_argv[4] = (argc == 6 ? \"1\" : argv[4]);\n+    backend_argv[5] = argv[5];\n+    backend_argv[6] = filename;\n+    backend_argv[7] = NULL;\n+    bytes = snprintf(backend_path, sizeof(backend_path), \"%s/backend/%s\", cups_serverbin, scheme);\n+    if (bytes < 0 || bytes >= sizeof(backend_path)) {\n+        fprintf(stderr, \"ERROR: beh: Invalid scheme (\\\"%s\\\"), could not determing backend path.\\n\", scheme);\n+        exit (CUPS_BACKEND_FAILED);\n\n-    fprintf(stderr, \"DEBUG: beh: Executing backend command line \\\"%s\\\"...\\n\", cmdline);\n\n+    fprintf(stderr, \"DEBUG: beh: Executing backend command line \\\"%s '%s' '%s' '%s' '%s' '%s'%s%s\\\"...\\n\", backend_path, backend_argv[1], backend_argv[2], backend_argv[3], backend_argv[4],\n+            backend_argv[5], (backend_argv[6] && backend_argv[6][0] ? \" \" : \"\"), (backend_argv[6] && backend_argv[6][0] ? backend_argv[6] : \"\"));\n\n-    retval = system(cmdline) >> 8;\n\n+    if ((pid = fork()) == 0) {\n+        retval = execv(backend_path, backend_argv);\n\n-        fprintf(stderr, \"ERROR: Unable to execute backend command line: %s\\n\", strerror(errno));\n\n+            fprintf(stderr, \"ERROR: Unable to execute backend: %s\\n\", strerror(errno));\n+        }\n+        exit (CUPS_BACKEND_FAILED);\n+    } else if (pid < 0) {\n+        fprintf(stderr, \"ERROR: Unable to fork for backend\\n\");\n+        return (CUPS_BACKEND_FAILED);\n+    }\n+    while ((wait_pid = wait(&wait_status)) < 0 && errno == ETR);\n+    if (wait_pid >= 0 && wait_status) {\n+        if (WIFEXITED(wait_status)) {\n+            retval = WEXITSTATUS(wait_status);\n+        } else if (WTERMSIG(wait_status) != SIGTERM) {\n+            retval = WTERMSIG(wait_status);\n+        } else {\n+            retval = 0;\n+        }\n\n-    char *backend_argv[8];\n-    char\tscheme[1024], *ptr, backend_path[2048];\n-    int pid, wait_pid, wait_status, retval = 0;\n-    int bytes;\n-    scheme[0] = '\\0';\n-    strncat(scheme, uri, sizeof(scheme) - 1);\n\n+    char\tscheme[1024], *ptr, cmdline[65536];\n+    int retval;\n+    strncpy(scheme, uri, sizeof(scheme) - 1);\n+    if (strlen(uri) > 1023) {\n+        scheme[1023] = '\\0';\n+    }\n\n-    } else {\n-        fprintf(stderr, \"ERROR: beh: Invalid URI, no colon (':') to mark end of scheme part.\\n\");\n-        exit (CUPS_BACKEND_FAILED);\n-    }\n-    if (strchr(scheme, '/')) {\n-        fprintf(stderr, \"ERROR: beh: Invalid URI, scheme contains a slash ('/').\\n\");\n-        exit (CUPS_BACKEND_FAILED);\n-    }\n-    if (!strcmp(scheme, \".\") || !strcmp(scheme, \"..\")) {\n-        fprintf(stderr, \"ERROR: beh: Invalid URI, scheme (\\\"%s\\\") is a directory.\\n\", scheme);\n-        exit (CUPS_BACKEND_FAILED);\n\n-    }\n-    backend_argv[0] = uri;\n-    backend_argv[1] = argv[1];\n-    backend_argv[2] = argv[2];\n-    backend_argv[3] = argv[3];\n-    backend_argv[4] = (argc == 6 ? \"1\" : argv[4]);\n-    backend_argv[5] = argv[5];\n-    backend_argv[6] = filename;\n-    backend_argv[7] = NULL;\n-    bytes = snprintf(backend_path, sizeof(backend_path), \"%s/backend/%s\", cups_serverbin, scheme);\n-    if (bytes < 0 || bytes >= sizeof(backend_path)) {\n-        fprintf(stderr, \"ERROR: beh: Invalid scheme (\\\"%s\\\"), could not determing backend path.\\n\", scheme);\n-        exit (CUPS_BACKEND_FAILED);\n\n+    } else {\n+        snprintf(cmdline, sizeof(cmdline), \"%s/backend/%s '%s' '%s' '%s' '%s' '%s' %s\", cups_serverbin, scheme, argv[1], argv[2], argv[3], (argc == 6 ? \"1\" : argv[4]), argv[5], filename);\n\n-    fprintf(stderr, \"DEBUG: beh: Executing backend command line \\\"%s '%s' '%s' '%s' '%s' '%s'%s%s\\\"...\\n\", backend_path, backend_argv[1], backend_argv[2], backend_argv[3], backend_argv[4],\n-            backend_argv[5], (backend_argv[6] && backend_argv[6][0] ? \" \" : \"\"), (backend_argv[6] && backend_argv[6][0] ? backend_argv[6] : \"\"));\n\n+    fprintf(stderr, \"DEBUG: beh: Executing backend command line \\\"%s\\\"...\\n\", cmdline);\n\n-    if ((pid = fork()) == 0) {\n-        retval = execv(backend_path, backend_argv);\n\n+    retval = system(cmdline) >> 8;\n\n-            fprintf(stderr, \"ERROR: Unable to execute backend: %s\\n\", strerror(errno));\n-        }\n-        exit (CUPS_BACKEND_FAILED);\n-    } else if (pid < 0) {\n-        fprintf(stderr, \"ERROR: Unable to fork for backend\\n\");\n-        return (CUPS_BACKEND_FAILED);\n-    }\n-    while ((wait_pid = wait(&wait_status)) < 0 && errno == ETR);\n-    if (wait_pid >= 0 && wait_status) {\n-        if (WIFEXITED(wait_status)) {\n-            retval = WEXITSTATUS(wait_status);\n-        } else if (WTERMSIG(wait_status) != SIGTERM) {\n-            retval = WTERMSIG(wait_status);\n-        } else {\n-            retval = 0;\n-        }\n\n+        fprintf(stderr, \"ERROR: Unable to execute backend command line: %s\\n\", strerror(errno));\n\n-    fprintf(stderr, \"DEBUG: beh: Job canceled.\\n\");\n\n+    const char * const msg = \"DEBUG: beh: Job canceled.\\n\";\n+    if (write(2, msg, strlen(msg)));\n\n-    const char * const msg = \"DEBUG: beh: Job canceled.\\n\";\n-    if (write(2, msg, strlen(msg)));\n\n+    fprintf(stderr, \"DEBUG: beh: Job canceled.\\n\");\n\n",
    "1": "+    } else {\n+        fprintf(stderr, \"ERROR: beh: Invalid URI, no colon (':') to mark end of scheme part.\\n\");\n+        exit (CUPS_BACKEND_FAILED);\n+    }\n+    if (strchr(scheme, '/')) {\n+        fprintf(stderr, \"ERROR: beh: Invalid URI, scheme contains a slash ('/').\\n\");\n+        exit (CUPS_BACKEND_FAILED);\n+    }\n+    if (!strcmp(scheme, \".\") || !strcmp(scheme, \"..\")) {\n+        fprintf(stderr, \"ERROR: beh: Invalid URI, scheme (\\\"%s\\\") is a directory.\\n\", scheme);\n+        exit (CUPS_BACKEND_FAILED);\n\n"
}