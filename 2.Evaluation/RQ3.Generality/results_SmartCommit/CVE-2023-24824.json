{
    "0": "+        subtract_open_block_counts(parser, parent->last_child);\n\n",
    "1": "+    add_open_block_counts(parser, child);\n\n",
    "2": "-        subtract_open_block_counts(parser, parent->last_child);\n\n-    add_open_block_counts(parser, child);\n\n-    add_open_block_counts(parser, document);\n\n",
    "3": "+    assert(cmark_node_get_type(parent_container) == CMARK_NODE_PARAGRAPH);\n\n",
    "4": "+    assert(parent_container->next == NULL);\n+    decr_open_block_count(parser, CMARK_NODE_PARAGRAPH);\n+    incr_open_block_count(parser, CMARK_NODE_TABLE);\n\n",
    "5": "-    assert(cmark_node_get_type(parent_container) == CMARK_NODE_PARAGRAPH);\n\n-    assert(parent_container->next == NULL);\n-    decr_open_block_count(parser, CMARK_NODE_PARAGRAPH);\n-    incr_open_block_count(parser, CMARK_NODE_TABLE);\n\n",
    "6": "-    while (tmp->parent) {\n\n+    while (tmp->parent && S_last_line_blank(tmp->parent)) {\n\n-    while (tmp->parent && S_last_line_blank(tmp->parent)) {\n\n+    while (tmp->parent) {\n\n-    cmark_parser tmp_parser;\n-    memcpy(tmp_parser.open_block_counts, parser->open_block_counts, sizeof(parser->open_block_counts));\n-    tmp_parser.total_open_blocks = parser->total_open_blocks;\n-    assert(check_open_block_counts(parser));\n\n-        decr_open_block_count(&tmp_parser, S_type(container));\n\n-        if (parser->blank && parser->indent == 0) {\n-            if (parser->current->flags & CMARK_NODE__OPEN_BLOCK) {\n-                if (parser->current->flags & CMARK_NODE__OPEN) {\n-                    const size_t n_list = read_open_block_count(&tmp_parser, CMARK_NODE_LIST);\n-                    const size_t n_item = read_open_block_count(&tmp_parser, CMARK_NODE_ITEM);\n-                    if (n_list + n_item + 1 >= tmp_parser.total_open_blocks) {\n-                        switch (S_type(parser->current)) {\n-                        case CMARK_NODE_LIST:\n-                        case CMARK_NODE_ITEM:\n-                            if (n_list + n_item != tmp_parser.total_open_blocks) {\n-                                if (parser->current->last_child == NULL) {\n-                                    break;\n-                                }\n-                            }\n-                        case CMARK_NODE_CODE_BLOCK:\n-                        case CMARK_NODE_PARAGRAPH:\n-                        case CMARK_NODE_HTML_BLOCK:\n-                            container = parser->current;\n-                            cont_type = S_type(container);\n-                            break;\n-                        default:\n-                            break;\n-                        }\n-                    }\n-                }\n-            }\n-        }\n\n+bool check_open_block_counts(cmark_parser *parser) {\n+    cmark_parser tmp_parser = {0};\n+    add_open_block_counts(&tmp_parser, parser->root);\n+    return tmp_parser.total_open_blocks == parser->total_open_blocks && memcmp(tmp_parser.open_block_counts, parser->open_block_counts, sizeof(parser->open_block_counts)) == 0;\n+}\n\n-                (*container)->type = (uint16_t)CMARK_NODE_HEADG;\n\n+                cmark_node_set_type(*container, CMARK_NODE_HEADG);\n+                decr_open_block_count(parser, CMARK_NODE_PARAGRAPH);\n+                incr_open_block_count(parser, CMARK_NODE_HEADG);\n\n-                cmark_node_set_type(*container, CMARK_NODE_HEADG);\n-                decr_open_block_count(parser, CMARK_NODE_PARAGRAPH);\n-                incr_open_block_count(parser, CMARK_NODE_HEADG);\n\n+                (*container)->type = (uint16_t)CMARK_NODE_HEADG;\n\n",
    "7": "+    assert(parser->current->next == NULL);\n\n",
    "8": "-    assert(parser->current->next == NULL);\n\n",
    "9": "-    cmark_node *cur;\n\n",
    "10": "-    cur = node;\n\n+    if (enable_safety_checks) {\n+        cmark_node *cur = node;\n\n-    if (enable_safety_checks) {\n-        cmark_node *cur = node;\n\n+    cur = node;\n\n",
    "11": "+    }\n\n",
    "12": "+    cmark_node *cur;\n\n",
    "13": "-    }\n\n-}\n\n",
    "14": "-    if ((*ref & CMARK_NODE_VALUE_MASK) == CMARK_NODE_VALUE_MASK) {\n\n+    if ((*ref & CMARK_NODE_VALUE_MASK) >= CMARK_NODE_TYPE_BLOCK_LIMIT) {\n\n",
    "15": "-    if ((*ref & CMARK_NODE_VALUE_MASK) >= CMARK_NODE_TYPE_BLOCK_LIMIT) {\n\n+    if ((*ref & CMARK_NODE_VALUE_MASK) == CMARK_NODE_VALUE_MASK) {\n\n",
    "16": "+    add_open_block_counts(parser, document);\n\n",
    "17": "+    cmark_parser tmp_parser;\n+    memcpy(tmp_parser.open_block_counts, parser->open_block_counts, sizeof(parser->open_block_counts));\n+    tmp_parser.total_open_blocks = parser->total_open_blocks;\n+    assert(check_open_block_counts(parser));\n\n",
    "18": "+        decr_open_block_count(&tmp_parser, S_type(container));\n\n",
    "19": "+        if (parser->blank && parser->indent == 0) {\n+            if (parser->current->flags & CMARK_NODE__OPEN_BLOCK) {\n+                if (parser->current->flags & CMARK_NODE__OPEN) {\n+                    const size_t n_list = read_open_block_count(&tmp_parser, CMARK_NODE_LIST);\n+                    const size_t n_item = read_open_block_count(&tmp_parser, CMARK_NODE_ITEM);\n+                    if (n_list + n_item + 1 >= tmp_parser.total_open_blocks) {\n+                        switch (S_type(parser->current)) {\n+                        case CMARK_NODE_LIST:\n+                        case CMARK_NODE_ITEM:\n+                            if (n_list + n_item != tmp_parser.total_open_blocks) {\n+                                if (parser->current->last_child == NULL) {\n+                                    break;\n+                                }\n+                            }\n+                        case CMARK_NODE_CODE_BLOCK:\n+                        case CMARK_NODE_PARAGRAPH:\n+                        case CMARK_NODE_HTML_BLOCK:\n+                            container = parser->current;\n+                            cont_type = S_type(container);\n+                            break;\n+                        default:\n+                            break;\n+                        }\n+                    }\n+                }\n+            }\n+        }\n\n",
    "20": "+            if (b->flags & CMARK_NODE__OPEN_BLOCK) {\n+                decr_open_block_count(parser, S_type(b));\n+                if (b->prev) {\n+                    add_open_block_counts(parser, b->prev);\n+                }\n+            }\n\n",
    "21": "-            if (b->flags & CMARK_NODE__OPEN_BLOCK) {\n-                decr_open_block_count(parser, S_type(b));\n-                if (b->prev) {\n-                    add_open_block_counts(parser, b->prev);\n-                }\n-            }\n\n",
    "22": "+    while (true) {\n\n",
    "23": "-        return(S_ends_with_blank_line(node->last_child));\n\n+            node = node->last_child;\n+            continue;\n\n-    while (true) {\n\n-            node = node->last_child;\n-            continue;\n\n+        return(S_ends_with_blank_line(node->last_child));\n\n",
    "24": "+}\n\n"
}