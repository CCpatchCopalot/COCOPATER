{
    "0": "+            if (!iopt[value].unquoted) {\n\n",
    "1": "+            }\n\n",
    "2": "+            if (!iopt[value].unquoted) {\n\n",
    "3": "+        }\n\n",
    "4": "-            if (!iopt[value].unquoted) {\n\n-            if (!iopt[value].unquoted) {\n\n",
    "5": "-            }\n\n-        }\n\n",
    "6": "-                (*ambiguous)++;\n\n+                ++(*ambiguous);\n\n-                ++(*ambiguous);\n\n+                (*ambiguous)++;\n\n",
    "7": "-                iopt[i].ilong = iopt[i].ishort = iopt[i].ipos = iopt[i].ineg = 0;\n\n+                iopt[i].ilong = iopt[i].ishort = iopt[i].ipos = iopt[i].ineg = iopt[i].unquoted = 0;\n\n-                iopt[i].ilong = iopt[i].ishort = iopt[i].ipos = iopt[i].ineg = iopt[i].unquoted = 0;\n\n+                iopt[i].ilong = iopt[i].ishort = iopt[i].ipos = iopt[i].ineg = 0;\n\n-            iopt[i].unquoted = 0;\n\n-        int i;\n\n+        int i, niitems = nitems + (flags & Clp_AllowNumbers ? 1 : 0);\n\n-        Clp_InternOption *iopt = (Clp_InternOption *)malloc(sizeof(Clp_InternOption) * nitems);\n\n+        Clp_InternOption *iopt = (Clp_InternOption *)malloc(sizeof(Clp_InternOption) * niitems);\n\n-        int i, niitems = nitems + (flags & Clp_AllowNumbers ? 1 : 0);\n\n+        int i;\n\n-        Clp_InternOption *iopt = (Clp_InternOption *)malloc(sizeof(Clp_InternOption) * niitems);\n\n+        Clp_InternOption *iopt = (Clp_InternOption *)malloc(sizeof(Clp_InternOption) * nitems);\n\n-        memset(iopt, 0, sizeof(Clp_InternOption) * niitems);\n-        for (i = 0; i < niitems; i++) {\n-            iopt[i].ilong = iopt[i].ipos = 1;\n-            iopt[i].ishort = iopt[i].ineg = iopt[i].ilongoff = iopt[i].iprefmatch = iopt[i].unquoted = 0;\n-        }\n-        calculate_lmm(clp, items, iopt, nitems);\n\n-            iopt[nitems].unquoted = 1;\n\n+        for (i = 0; i < nitems; i++) {\n+            iopt[i].ilong = iopt[i].ipos = 1;\n+            iopt[i].ishort = iopt[i].ineg = iopt[i].ilongoff = iopt[i].iprefmatch = 0;\n+        }\n+        calculate_lmm(clp, items, iopt, nitems);\n\n",
    "8": "+            iopt[i].unquoted = 0;\n\n",
    "9": "+        memset(iopt, 0, sizeof(Clp_InternOption) * niitems);\n+        for (i = 0; i < niitems; i++) {\n+            iopt[i].ilong = iopt[i].ipos = 1;\n+            iopt[i].ishort = iopt[i].ineg = iopt[i].ilongoff = iopt[i].iprefmatch = iopt[i].unquoted = 0;\n+        }\n+        calculate_lmm(clp, items, iopt, nitems);\n\n",
    "10": "+            iopt[nitems].unquoted = 1;\n\n",
    "11": "-        for (i = 0; i < nitems; i++) {\n-            iopt[i].ilong = iopt[i].ipos = 1;\n-            iopt[i].ishort = iopt[i].ineg = iopt[i].ilongoff = iopt[i].iprefmatch = 0;\n-        }\n-        calculate_lmm(clp, items, iopt, nitems);\n\n"
}