{
    "0": "-        if ((decode->decode_flags & EXR_DECODE_SAMPLE_COUNTS_AS_DIVIDUAL)) {\n\n+        if ((decode->decode_flags & EXR_DECODE_NON_IMAGE_DATA_AS_POTERS)) {\n\n",
    "1": "-        if ((decode->decode_flags & EXR_DECODE_NON_IMAGE_DATA_AS_POTERS)) {\n\n+        if ((decode->decode_flags & EXR_DECODE_SAMPLE_COUNTS_AS_DIVIDUAL)) {\n\n-        if ((decode->decode_flags & EXR_DECODE_SAMPLE_COUNTS_AS_DIVIDUAL)) {\n-            sampsize += 1;\n-        }\n\n",
    "2": "-                srcbuffer += bpc * samps;\n\n+                srcbuffer += ((size_t) bpc) * ((size_t) samps);\n\n",
    "3": "-                srcbuffer += ((size_t) bpc) * ((size_t) samps);\n\n+                srcbuffer += bpc * samps;\n\n-                srcbuffer += ((size_t) bpc) * ((size_t) samps);\n\n+                srcbuffer += bpc * samps;\n\n",
    "4": "+        if ((decode->decode_flags & EXR_DECODE_SAMPLE_COUNTS_AS_DIVIDUAL)) {\n+            sampsize += 1;\n+        }\n\n",
    "5": "-        if (store == EXR_STORAGE_DEEP_SCANLE || store == EXR_STORAGE_DEEP_TILED) {\n-            continue;\n-        }\n-        if (store == EXR_STORAGE_SCANLE) {\n\n+        if (store == EXR_STORAGE_SCANLE || store == EXR_STORAGE_DEEP_SCANLE) {\n\n-        } else if (store == EXR_STORAGE_TILED) {\n\n+        } else if (store == EXR_STORAGE_TILED || store == EXR_STORAGE_DEEP_TILED) {\n\n-        if (store == EXR_STORAGE_SCANLE || store == EXR_STORAGE_DEEP_SCANLE) {\n\n+        if (store == EXR_STORAGE_DEEP_SCANLE || store == EXR_STORAGE_DEEP_TILED) {\n+            continue;\n+        }\n+        if (store == EXR_STORAGE_SCANLE) {\n\n-        } else if (store == EXR_STORAGE_TILED || store == EXR_STORAGE_DEEP_TILED) {\n\n+        } else if (store == EXR_STORAGE_TILED) {\n\n",
    "6": "-                srcbuffer += bpc * samps;\n\n+                srcbuffer += ((size_t) bpc) * ((size_t) samps);\n\n",
    "7": "-    exr_result_t rv;\n\n+    exr_result_t rv, frv;\n\n-    exr_result_t rv, frv;\n\n+    exr_result_t rv;\n\n-    exr_result_t rv;\n\n+    exr_result_t rv, frv;\n\n-    exr_result_t rv, frv;\n\n+    exr_result_t rv;\n\n",
    "8": "+    frv = rv;\n\n",
    "9": "+            frv = rv;\n\n",
    "10": "+            if (cinfo.type == EXR_STORAGE_DEEP_SCANLE) {\n+                decoder.decoding_user_data = &imgdata;\n+                decoder.realloc_nonimage_data_fn = &realloc_deepdata;\n+            } else {\n\n",
    "11": "+            }\n\n",
    "12": "+                frv = rv;\n\n",
    "13": "+                frv = rv;\n\n",
    "14": "+            if (cinfo.type != EXR_STORAGE_DEEP_SCANLE) {\n\n",
    "15": "+            }\n\n",
    "16": "+                frv = rv;\n\n",
    "17": "-    return (rv != EXR_ERR_SUCCESS);\n\n+    return (frv != EXR_ERR_SUCCESS);\n\n-    frv = rv;\n\n-            frv = rv;\n\n-                frv = rv;\n\n-                frv = rv;\n\n-                frv = rv;\n\n-    return (frv != EXR_ERR_SUCCESS);\n\n+    return (rv != EXR_ERR_SUCCESS);\n\n-    frv = rv;\n\n-                frv = rv;\n\n-                frv = rv;\n\n-                        frv = rv;\n\n-                            frv = rv;\n\n-                            frv = rv;\n\n-                            frv = rv;\n\n-                            frv = rv;\n\n",
    "18": "-            if (cinfo.type == EXR_STORAGE_DEEP_SCANLE) {\n-                decoder.decoding_user_data = &imgdata;\n-                decoder.realloc_nonimage_data_fn = &realloc_deepdata;\n-            } else {\n\n-            if (cinfo.type != EXR_STORAGE_DEEP_SCANLE) {\n\n-                        if (cinfo.type == EXR_STORAGE_DEEP_TILED) {\n-                            decoder.decoding_user_data = &tiledata;\n-                            decoder.realloc_nonimage_data_fn = &realloc_deepdata;\n-                        } else {\n\n-                        if (cinfo.type != EXR_STORAGE_DEEP_TILED) {\n\n",
    "19": "-            }\n\n-            }\n\n-                        }\n\n-                        }\n\n",
    "20": "-    int32_t totsamp = 0;\n\n+    uint64_t totsamp = 0;\n\n-                int32_t nsamps = (int32_t) one_to_native32 ((uint32_t) samptable[y * w + x]);\n-                if (nsamps < 0) {\n\n+                int32_t nsamps = (int32_t) one_to_native32 ((uint32_t) cursampline[x]);\n+                if (nsamps < prevsamp) {\n\n-                samptable[y * w + x] = nsamps - prevsamp;\n\n+                cursampline[x] = nsamps - prevsamp;\n\n-            totsamp += prevsamp;\n\n+            totsamp += (uint64_t)prevsamp;\n+        }\n+        if (totsamp >= (uint64_t)T32_MAX) {\n+            return EXR_ERR_VALID_SAMPLE_DATA;\n\n-        samptable[w * h] = totsamp;\n\n+        samptable[w * h] = (int32_t)totsamp;\n\n-                int32_t nsamps = (int32_t) one_to_native32 ((uint32_t) samptable[y * w + x]);\n-                if (nsamps < 0) {\n\n+                int32_t nsamps = (int32_t) one_to_native32 ((uint32_t) cursampline[x]);\n+                if (nsamps < prevsamp) {\n\n-                samptable[y * w + x] = nsamps;\n\n+                cursampline[x] = nsamps;\n\n-            totsamp += prevsamp;\n\n+            totsamp += (uint64_t)prevsamp;\n\n-    if (totsamp < 0 || (((uint64_t) totsamp) * combSampSize) > decode->chunk.unpacked_size) {\n\n+    if ((totsamp * combSampSize) > decode->chunk.unpacked_size) {\n\n-    uint64_t totsamp = 0;\n\n+    int32_t totsamp = 0;\n\n-            int32_t *cursampline = samptable + y * w;\n\n-                int32_t nsamps = (int32_t) one_to_native32 ((uint32_t) cursampline[x]);\n-                if (nsamps < prevsamp) {\n\n+                int32_t nsamps = (int32_t) one_to_native32 ((uint32_t) samptable[y * w + x]);\n+                if (nsamps < 0) {\n\n-                cursampline[x] = nsamps - prevsamp;\n\n+                samptable[y * w + x] = nsamps - prevsamp;\n\n-            totsamp += (uint64_t)prevsamp;\n-        }\n-        if (totsamp >= (uint64_t)T32_MAX) {\n-            return EXR_ERR_VALID_SAMPLE_DATA;\n\n+            totsamp += prevsamp;\n\n-        samptable[w * h] = (int32_t)totsamp;\n\n+        samptable[w * h] = totsamp;\n\n-            int32_t *cursampline = samptable + y * w;\n\n-                int32_t nsamps = (int32_t) one_to_native32 ((uint32_t) cursampline[x]);\n-                if (nsamps < prevsamp) {\n\n+                int32_t nsamps = (int32_t) one_to_native32 ((uint32_t) samptable[y * w + x]);\n+                if (nsamps < 0) {\n\n-                cursampline[x] = nsamps;\n\n+                samptable[y * w + x] = nsamps;\n\n-            totsamp += (uint64_t)prevsamp;\n\n+            totsamp += prevsamp;\n\n-    if ((totsamp * combSampSize) > decode->chunk.unpacked_size) {\n\n+    if (totsamp < 0 || (((uint64_t) totsamp) * combSampSize) > decode->chunk.unpacked_size) {\n\n",
    "21": "+            int32_t *cursampline = samptable + y * w;\n\n",
    "22": "+            int32_t *cursampline = samptable + y * w;\n\n",
    "23": "+    frv = rv;\n\n",
    "24": "+                frv = rv;\n\n",
    "25": "+                frv = rv;\n\n",
    "26": "+                        frv = rv;\n\n",
    "27": "+                            frv = rv;\n\n",
    "28": "+                        if (cinfo.type == EXR_STORAGE_DEEP_TILED) {\n+                            decoder.decoding_user_data = &tiledata;\n+                            decoder.realloc_nonimage_data_fn = &realloc_deepdata;\n+                        } else {\n\n",
    "29": "+                        }\n\n",
    "30": "+                            frv = rv;\n\n",
    "31": "+                            frv = rv;\n\n",
    "32": "+                        if (cinfo.type != EXR_STORAGE_DEEP_TILED) {\n\n",
    "33": "+                        }\n\n",
    "34": "+                            frv = rv;\n\n"
}