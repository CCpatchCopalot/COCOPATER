{
    "0": "-    size_t buf_remaining;\n-    int num_chars;\n\n+    size_t remaining;\n+    int num_bytes;\n\n-    buf_remaining = buflen;\n-    num_chars = snprintf(ptr, buf_remaining, \"%04d-%02d-%02d %02d:%02d:%02d\", tmp->tm_year + 1900, tmp->tm_mon + 1, tmp->tm_mday, tmp->tm_hour, tmp->tm_min, tmp->tm_sec);\n-    if (num_chars < 0) {\n\n+    remaining = buflen;\n+    num_bytes = snprintf(ptr, remaining, \"%04d-%02d-%02d %02d:%02d:%02d\", tmp->tm_year + 1900, tmp->tm_mon + 1, tmp->tm_mday, tmp->tm_hour, tmp->tm_min, tmp->tm_sec);\n+    if (num_bytes < 0) {\n\n-    if ((unsigned int)num_chars >= buf_remaining) {\n\n+    if ((unsigned int)num_bytes >= remaining) {\n\n-    ptr += num_chars;\n-    buf_remaining -= num_chars;\n-    if (precision == 0) {\n-        return;\n\n+    ptr += num_bytes;\n+    remaining -= num_bytes;\n+    if (precision != 0) {\n+        format_fractional_part_nsecs(ptr, remaining, (guint32)ns->nsecs, decimal_point, precision);\n\n-    size_t remaining;\n-    int num_bytes;\n\n+    size_t buf_remaining;\n+    int num_chars;\n\n-    remaining = buflen;\n-    num_bytes = snprintf(ptr, remaining, \"%04d-%02d-%02d %02d:%02d:%02d\", tmp->tm_year + 1900, tmp->tm_mon + 1, tmp->tm_mday, tmp->tm_hour, tmp->tm_min, tmp->tm_sec);\n-    if (num_bytes < 0) {\n\n+    buf_remaining = buflen;\n+    num_chars = snprintf(ptr, buf_remaining, \"%04d-%02d-%02d %02d:%02d:%02d\", tmp->tm_year + 1900, tmp->tm_mon + 1, tmp->tm_mday, tmp->tm_hour, tmp->tm_min, tmp->tm_sec);\n+    if (num_chars < 0) {\n\n-    if ((unsigned int)num_bytes >= remaining) {\n\n+    if ((unsigned int)num_chars >= buf_remaining) {\n\n-    ptr += num_bytes;\n-    remaining -= num_bytes;\n-    if (precision != 0) {\n-        format_fractional_part_nsecs(ptr, remaining, (guint32)ns->nsecs, decimal_point, precision);\n\n+    ptr += num_chars;\n+    buf_remaining -= num_chars;\n+    if (precision == 0) {\n+        return;\n\n+    format_fractional_part_nsecs(ptr, buf_remaining, (guint32)ns->nsecs, decimal_point, precision);\n\n",
    "1": "-    format_fractional_part_nsecs(ptr, buf_remaining, (guint32)ns->nsecs, decimal_point, precision);\n\n",
    "2": "-void format_fractional_part_nsecs(gchar *buf, size_t buflen, guint32 nsecs, const char *decimal_point, int precision) {\n\n+int format_fractional_part_nsecs(gchar *buf, size_t buflen, guint32 nsecs, const char *decimal_point, int precision) {\n+    gchar *ptr;\n+    size_t remaining;\n+    int num_bytes;\n\n-        return;\n\n+        return 0;\n+    }\n+    if (nsecs >= 1000000000U) {\n+        num_bytes = snprintf(buf, buflen, \"%s(%u nanoseconds)\", decimal_point, nsecs);\n+        if ((unsigned int)num_bytes >= buflen) {\n+            return (int)(buflen - 1);\n\n+        return num_bytes;\n+    }\n+    ptr = buf;\n+    remaining = buflen;\n+    num_bytes = 0;\n\n-        return;\n\n+        return (int)(buflen - 1);\n\n-    buf += decimal_point_len;\n-    buflen -= decimal_point_len;\n\n+    ptr += decimal_point_len;\n+    remaining -= decimal_point_len;\n+    num_bytes += decimal_point_len;\n\n-        num_ptr = uint_to_str_back_len(num_end, nsecs / 100000000, precision);\n\n+        frac_part = nsecs / 100000000U;\n\n-        num_ptr = uint_to_str_back_len(num_end, nsecs / 10000000, precision);\n\n+        frac_part = nsecs / 10000000U;\n\n-        num_ptr = uint_to_str_back_len(num_end, nsecs / 1000000, precision);\n\n+        frac_part = nsecs / 1000000U;\n\n-        num_ptr = uint_to_str_back_len(num_end, nsecs / 100000, precision);\n\n+        frac_part = nsecs / 100000U;\n\n-        num_ptr = uint_to_str_back_len(num_end, nsecs / 10000, precision);\n\n+        frac_part = nsecs / 10000U;\n\n-        return;\n\n+        return num_bytes;\n\n-    memcpy(buf, num_ptr, num_len);\n-    *(buf + num_len) = '\\0';\n\n+    memcpy(ptr, num_ptr, num_len);\n+    ptr += num_len;\n+    num_bytes += num_len;\n+    *ptr = '\\0';\n+    return num_bytes;\n\n-int format_fractional_part_nsecs(gchar *buf, size_t buflen, guint32 nsecs, const char *decimal_point, int precision) {\n-    gchar *ptr;\n-    size_t remaining;\n-    int num_bytes;\n\n+void format_fractional_part_nsecs(gchar *buf, size_t buflen, guint32 nsecs, const char *decimal_point, int precision) {\n\n-        return 0;\n-    }\n-    if (nsecs >= 1000000000U) {\n-        num_bytes = snprintf(buf, buflen, \"%s(%u nanoseconds)\", decimal_point, nsecs);\n-        if ((unsigned int)num_bytes >= buflen) {\n-            return (int)(buflen - 1);\n-        }\n-        return num_bytes;\n\n+        return;\n\n-    ptr = buf;\n-    remaining = buflen;\n-    num_bytes = 0;\n\n-        return (int)(buflen - 1);\n\n+        return;\n\n-    ptr += decimal_point_len;\n-    remaining -= decimal_point_len;\n-    num_bytes += decimal_point_len;\n\n+    buf += decimal_point_len;\n+    buflen -= decimal_point_len;\n\n-        frac_part = nsecs / 100000000U;\n\n+        num_ptr = uint_to_str_back_len(num_end, nsecs / 100000000, precision);\n\n-        frac_part = nsecs / 10000000U;\n\n+        num_ptr = uint_to_str_back_len(num_end, nsecs / 10000000, precision);\n\n-        frac_part = nsecs / 1000000U;\n\n+        num_ptr = uint_to_str_back_len(num_end, nsecs / 1000000, precision);\n\n-        frac_part = nsecs / 100000U;\n\n+        num_ptr = uint_to_str_back_len(num_end, nsecs / 100000, precision);\n\n-        frac_part = nsecs / 10000U;\n\n+        num_ptr = uint_to_str_back_len(num_end, nsecs / 10000, precision);\n\n-        frac_part = nsecs / 1000U;\n\n+        num_ptr = uint_to_str_back_len(num_end, nsecs / 1000, precision);\n\n-        frac_part = nsecs / 100U;\n\n+        num_ptr = uint_to_str_back_len(num_end, nsecs / 100, precision);\n\n-        frac_part = nsecs / 10U;\n\n+        num_ptr = uint_to_str_back_len(num_end, nsecs / 10, precision);\n\n-        frac_part = nsecs;\n\n+        num_ptr = uint_to_str_back_len(num_end, nsecs, precision);\n\n-    num_ptr = uint_to_str_back_len(num_end, frac_part, precision);\n-    num_len = M((size_t)(num_end - num_ptr), remaining - 1);\n\n+    num_len = M((size_t)(num_end - num_ptr), buflen - 1);\n\n-        return num_bytes;\n\n+        return;\n\n-    memcpy(ptr, num_ptr, num_len);\n-    ptr += num_len;\n-    num_bytes += num_len;\n-    *ptr = '\\0';\n-    return num_bytes;\n\n+    memcpy(buf, num_ptr, num_len);\n+    *(buf + num_len) = '\\0';\n\n",
    "3": "+    guint32 frac_part;\n\n",
    "4": "-        num_ptr = uint_to_str_back_len(num_end, nsecs / 1000, precision);\n\n+        frac_part = nsecs / 1000U;\n\n",
    "5": "-        num_ptr = uint_to_str_back_len(num_end, nsecs / 100, precision);\n\n+        frac_part = nsecs / 100U;\n\n",
    "6": "-        num_ptr = uint_to_str_back_len(num_end, nsecs / 10, precision);\n\n+        frac_part = nsecs / 10U;\n\n",
    "7": "-        num_ptr = uint_to_str_back_len(num_end, nsecs, precision);\n\n+        frac_part = nsecs;\n\n",
    "8": "-    num_len = M((size_t)(num_end - num_ptr), buflen - 1);\n\n+    num_ptr = uint_to_str_back_len(num_end, frac_part, precision);\n+    num_len = M((size_t)(num_end - num_ptr), remaining - 1);\n\n",
    "9": "-    guint32 frac_part;\n\n"
}