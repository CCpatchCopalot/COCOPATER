{
    "0": "-    int max_index = -1;\n\n",
    "1": "-    if (segment_id_size > 0) {\n-        max_index = segment_ids->data.i32[segment_id_size - 1];\n\n+    TF_LITE_ENSURE_EQ(context, segment_id_size, data->dims->data[0]);\n+    int previous_segment_id = -1;\n+    for (int i = 0; i < segment_id_size; i++) {\n+        const int current_segment_id = GetTensorData<int32_t>(segment_ids)[i];\n+        if (i == 0) {\n+            TF_LITE_ENSURE_EQ(context, current_segment_id, 0);\n+        } else {\n+            int delta = current_segment_id - previous_segment_id;\n+            TF_LITE_ENSURE(context, delta == 0 || delta == 1);\n\n+    int max_index = -1;\n\n-    TF_LITE_ENSURE_EQ(context, segment_id_size, data->dims->data[0]);\n-    int previous_segment_id = -1;\n-    for (int i = 0; i < segment_id_size; i++) {\n-        const int current_segment_id = GetTensorData<int32_t>(segment_ids)[i];\n-        if (i == 0) {\n-            TF_LITE_ENSURE_EQ(context, current_segment_id, 0);\n-        } else {\n-            int delta = current_segment_id - previous_segment_id;\n-            TF_LITE_ENSURE(context, delta == 0 || delta == 1);\n\n+    if (segment_id_size > 0) {\n+        max_index = segment_ids->data.i32[segment_id_size - 1];\n\n-        previous_segment_id = current_segment_id;\n-    }\n-    const int max_index = previous_segment_id;\n\n",
    "2": "+        previous_segment_id = current_segment_id;\n+    }\n+    const int max_index = previous_segment_id;\n\n"
}