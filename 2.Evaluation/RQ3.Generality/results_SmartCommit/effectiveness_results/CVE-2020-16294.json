{
    "0": "-    byte *in = (byte *) gs_malloc(pdev->memory, in_size + 1, 1, \"epsc_print_page(in)\");\n\n",
    "1": "-    byte *out = (byte *) gs_malloc(pdev->memory, out_size + 1, 1, \"epsc_print_page(out)\");\n\n+    byte *in;\n+    byte *out;\n\n-    char start_graphics = (char)\n-                          ((y_24pin ? graphics_modes_24 : graphics_modes_9)[x_dpi / 60]);\n-    int first_pass = (start_graphics & DD ? 1 : 0);\n-    int last_pass = first_pass * 2;\n-    int dots_per_space = x_dpi / 10;\n-    int bytes_per_space = dots_per_space * y_mult;\n\n+    char start_graphics;\n+    int first_pass;\n+    int last_pass;\n+    int dots_per_space;\n+    int bytes_per_space;\n\n-    int spare_bits = (pdev->width % 8);\n-    int whole_bits = pdev->width - spare_bits;\n\n+    int spare_bits;\n+    int whole_bits;\n+    int max_dpi = 60 * ( (y_24pin) ? sizeof(graphics_modes_24) / sizeof(graphics_modes_24[0])\n+                         :\n+                         sizeof(graphics_modes_9) / sizeof(graphics_modes_9[0])\n+                       )\n+                  - 1;\n+    if (x_dpi > max_dpi) {\n+        return_error(gs_error_rangecheck);\n+    }\n+    in = (byte *) gs_malloc(pdev->memory, in_size + 1, 1, \"epsc_print_page(in)\");\n+    out = (byte *) gs_malloc(pdev->memory, out_size + 1, 1, \"epsc_print_page(out)\");\n+    start_graphics = (char)\n+                     ((y_24pin ? graphics_modes_24 : graphics_modes_9)[x_dpi / 60]);\n+    first_pass = (start_graphics & DD ? 1 : 0);\n+    last_pass = first_pass * 2;\n+    dots_per_space = x_dpi / 10;\n+    bytes_per_space = dots_per_space * y_mult;\n+    spare_bits = (pdev->width % 8);\n+    whole_bits = pdev->width - spare_bits;\n\n+    byte *in = (byte *) gs_malloc(pdev->memory, in_size + 1, 1, \"epsc_print_page(in)\");\n\n-    byte *in;\n-    byte *out;\n\n+    byte *out = (byte *) gs_malloc(pdev->memory, out_size + 1, 1, \"epsc_print_page(out)\");\n\n-    char start_graphics;\n-    int first_pass;\n-    int last_pass;\n-    int dots_per_space;\n-    int bytes_per_space;\n\n+    char start_graphics = (char)\n+                          ((y_24pin ? graphics_modes_24 : graphics_modes_9)[x_dpi / 60]);\n+    int first_pass = (start_graphics & DD ? 1 : 0);\n+    int last_pass = first_pass * 2;\n+    int dots_per_space = x_dpi / 10;\n+    int bytes_per_space = dots_per_space * y_mult;\n\n-    int spare_bits;\n-    int whole_bits;\n-    int max_dpi = 60 * ( (y_24pin) ? sizeof(graphics_modes_24) / sizeof(graphics_modes_24[0])\n-                         :\n-                         sizeof(graphics_modes_9) / sizeof(graphics_modes_9[0])\n-                       )\n-                  - 1;\n-    if (x_dpi > max_dpi) {\n-        return_error(gs_error_rangecheck);\n-    }\n-    in = (byte *) gs_malloc(pdev->memory, in_size + 1, 1, \"epsc_print_page(in)\");\n-    out = (byte *) gs_malloc(pdev->memory, out_size + 1, 1, \"epsc_print_page(out)\");\n-    start_graphics = (char)\n-                     ((y_24pin ? graphics_modes_24 : graphics_modes_9)[x_dpi / 60]);\n-    first_pass = (start_graphics & DD ? 1 : 0);\n-    last_pass = first_pass * 2;\n-    dots_per_space = x_dpi / 10;\n-    bytes_per_space = dots_per_space * y_mult;\n-    spare_bits = (pdev->width % 8);\n-    whole_bits = pdev->width - spare_bits;\n\n+    int spare_bits = (pdev->width % 8);\n+    int whole_bits = pdev->width - spare_bits;\n\n"
}