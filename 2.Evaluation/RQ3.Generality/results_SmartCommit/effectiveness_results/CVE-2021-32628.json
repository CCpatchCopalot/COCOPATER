{
    "0": "+    assert(zlbytes < UT32_MAX);\n\n",
    "1": "-    assert(zlbytes < UT32_MAX);\n\n-    assert(sz < UT32_MAX);\n\n-    assert(sz < UT32_MAX);\n\n-    assert(sz < UT32_MAX);\n\n",
    "2": "+    assert(sz < UT32_MAX);\n\n",
    "3": "-            zobj->ptr = zzlInsert(zobj->ptr,ele,score);\n-            if (zzlLength(zobj->ptr) > server.zset_max_ziplist_entries || sdslen(ele) > server.zset_max_ziplist_value) {\n\n+            if (zzlLength(zobj->ptr)+1 > server.zset_max_ziplist_entries || sdslen(ele) > server.zset_max_ziplist_value || !ziplistSafeToAdd(zobj->ptr, sdslen(ele))) {\n\n-    } else if (zobj->encoding == OBJ_ENCODG_SKIPLIST) {\n\n+    }\n+    if (zobj->encoding == OBJ_ENCODG_SKIPLIST) {\n\n-            if (zzlLength(zobj->ptr)+1 > server.zset_max_ziplist_entries || sdslen(ele) > server.zset_max_ziplist_value || !ziplistSafeToAdd(zobj->ptr, sdslen(ele))) {\n-                zsetConvert(zobj,OBJ_ENCODG_SKIPLIST);\n-            } else {\n\n+            if (zzlLength(zobj->ptr) > server.zset_max_ziplist_entries || sdslen(ele) > server.zset_max_ziplist_value) {\n+                zsetConvert(zobj,OBJ_ENCODG_SKIPLIST);\n+            }\n\n-    }\n-    if (zobj->encoding == OBJ_ENCODG_SKIPLIST) {\n\n+    } else if (zobj->encoding == OBJ_ENCODG_SKIPLIST) {\n\n",
    "4": "-            }\n\n+            } else {\n+                zobj->ptr = zzlInsert(zobj->ptr,ele,score);\n\n",
    "5": "+            }\n\n",
    "6": "-            }\n\n",
    "7": "+    size_t sum = 0;\n\n",
    "8": "-        if (sdsEncodedObject(argv[i]) && sdslen(argv[i]->ptr) > server.hash_max_ziplist_value) {\n\n+        if (!sdsEncodedObject(argv[i])) {\n+            continue;\n+        }\n+        size_t len = sdslen(argv[i]->ptr);\n+        if (len > server.hash_max_ziplist_value) {\n\n+        sum += len;\n+    }\n+    if (!ziplistSafeToAdd(o->ptr, sum)) {\n+        hashTypeConvert(o, OBJ_ENCODG_HT);\n\n-    size_t sum = 0;\n\n-        if (!sdsEncodedObject(argv[i])) {\n-            continue;\n-        }\n-        size_t len = sdslen(argv[i]->ptr);\n-        if (len > server.hash_max_ziplist_value) {\n\n+        if (sdsEncodedObject(argv[i]) && sdslen(argv[i]->ptr) > server.hash_max_ziplist_value) {\n\n-    if (!ziplistSafeToAdd(o->ptr, sum)) {\n-        hashTypeConvert(o, OBJ_ENCODG_HT);\n\n",
    "9": "-            break;\n\n+            return;\n\n-            return;\n-        }\n-        sum += len;\n\n+            break;\n\n",
    "10": "+    if (sdslen(obj->ptr) > LIST_MAX_ITEM_SIZE) {\n+        addReplyError(c, \"Element too large\");\n+        return;\n+    }\n\n",
    "11": "-    if (sdslen(obj->ptr) > LIST_MAX_ITEM_SIZE) {\n-        addReplyError(c, \"Element too large\");\n-        return;\n-    }\n\n-    if (sdslen(value->ptr) > LIST_MAX_ITEM_SIZE) {\n-        addReplyError(c, \"Element too large\");\n-        return;\n-    }\n\n-    for (j = 2; j < c->argc; j++) {\n-        if (sdslen(c->argv[j]->ptr) > LIST_MAX_ITEM_SIZE) {\n-            addReplyError(c, \"Element too large\");\n-            return;\n-        }\n-    }\n\n-    if (sdslen(c->argv[4]->ptr) > LIST_MAX_ITEM_SIZE) {\n-        addReplyError(c, \"Element too large\");\n-        return;\n-    }\n\n-    if (sdslen(ele->ptr) > LIST_MAX_ITEM_SIZE) {\n-        addReplyError(c, \"Element too large\");\n-        return;\n-    }\n\n",
    "12": "+    if (sdslen(value->ptr) > LIST_MAX_ITEM_SIZE) {\n+        addReplyError(c, \"Element too large\");\n+        return;\n+    }\n\n",
    "13": "+    for (j = 2; j < c->argc; j++) {\n+        if (sdslen(c->argv[j]->ptr) > LIST_MAX_ITEM_SIZE) {\n+            addReplyError(c, \"Element too large\");\n+            return;\n+        }\n+    }\n\n",
    "14": "-unsigned char *ziplistResize(unsigned char *zl, unsigned int len) {\n\n+unsigned char *ziplistResize(unsigned char *zl, size_t len) {\n+    assert(len < UT32_MAX);\n\n-unsigned char *ziplistResize(unsigned char *zl, size_t len) {\n-    assert(len < UT32_MAX);\n\n+unsigned char *ziplistResize(unsigned char *zl, unsigned int len) {\n\n",
    "15": "-            *enclen = 5+size;\n\n+            *enclen = 5+(uint64_t)size;\n\n",
    "16": "-            *enclen = 5+(uint64_t)size;\n\n+            *enclen = 5+size;\n\n",
    "17": "+    assert(sz < UT32_MAX);\n\n",
    "18": "-void zsetConvertToZiplistIfNeeded(robj *zobj, size_t maxelelen) {\n\n+void zsetConvertToZiplistIfNeeded(robj *zobj, size_t maxelelen, size_t totelelen) {\n\n",
    "19": "-    if (zset->zsl->length <= server.zset_max_ziplist_entries && maxelelen <= server.zset_max_ziplist_value) {\n\n+    if (zset->zsl->length <= server.zset_max_ziplist_entries && maxelelen <= server.zset_max_ziplist_value && ziplistSafeToAdd(NULL, totelelen)) {\n\n",
    "20": "-void zsetConvertToZiplistIfNeeded(robj *zobj, size_t maxelelen, size_t totelelen) {\n\n+void zsetConvertToZiplistIfNeeded(robj *zobj, size_t maxelelen) {\n\n-    if (zset->zsl->length <= server.zset_max_ziplist_entries && maxelelen <= server.zset_max_ziplist_value && ziplistSafeToAdd(NULL, totelelen)) {\n\n+    if (zset->zsl->length <= server.zset_max_ziplist_entries && maxelelen <= server.zset_max_ziplist_value) {\n\n-            zsetConvertToZiplistIfNeeded(zobj,maxelelen);\n\n+            zsetConvertToZiplistIfNeeded(zobj,maxelelen,totelelen);\n\n-        size_t maxelelen = 0, totelelen = 0;\n\n+        size_t maxelelen = 0;\n\n-            totelelen += elelen;\n\n-            zsetConvertToZiplistIfNeeded(zobj,maxelelen,totelelen);\n\n+            zsetConvertToZiplistIfNeeded(zobj,maxelelen);\n\n-        if (zsetLength(o) <= server.zset_max_ziplist_entries && maxelelen <= server.zset_max_ziplist_value) {\n\n+        if (zsetLength(o) <= server.zset_max_ziplist_entries && maxelelen <= server.zset_max_ziplist_value && ziplistSafeToAdd(NULL, totelelen)) {\n\n-        size_t maxelelen = 0, totelelen = 0;\n\n+        size_t maxelelen = 0;\n\n-            totelelen += sdslen(sdsele);\n\n-        if (zsetLength(o) <= server.zset_max_ziplist_entries && maxelelen <= server.zset_max_ziplist_value && ziplistSafeToAdd(NULL, totelelen)) {\n\n+        if (zsetLength(o) <= server.zset_max_ziplist_entries && maxelelen <= server.zset_max_ziplist_value) {\n\n-    size_t maxelelen = 0;\n\n+    size_t maxelelen = 0, totelelen = 0;\n\n-        zsetConvertToZiplistIfNeeded(dstobj,maxelelen);\n\n+        zsetConvertToZiplistIfNeeded(dstobj,maxelelen,totelelen);\n\n-    size_t maxelelen = 0, totelelen = 0;\n\n+    size_t maxelelen = 0;\n\n-                    totelelen += sdslen(tmp);\n\n-                    totelelen += sdslen(tmp);\n\n-        zsetConvertToZiplistIfNeeded(dstobj,maxelelen,totelelen);\n\n+        zsetConvertToZiplistIfNeeded(dstobj,maxelelen);\n\n",
    "21": "-    if (streamAppendItem(s,c->argv+field_pos,(c->argc-field_pos)/2, &id, id_given ? &id : NULL)\n-            == C_ERR) {\n-        addReplyError(c,\"The ID specified in XADD is equal or smaller than the \" \"target stream top item\");\n\n+    if (streamAppendItem(s,c->argv+field_pos,(c->argc-field_pos)/2, &id, id_given ? &id : NULL) == C_ERR) {\n+        if (errno == EDOM) {\n+            addReplyError(c,\"The ID specified in XADD is equal or smaller than \" \"the target stream top item\");\n+        } else {\n+            addReplyError(c,\"Elements are too large to be stored\");\n+        }\n\n-    if (streamAppendItem(s,c->argv+field_pos,(c->argc-field_pos)/2, &id, id_given ? &id : NULL) == C_ERR) {\n-        if (errno == EDOM) {\n-            addReplyError(c,\"The ID specified in XADD is equal or smaller than \" \"the target stream top item\");\n-        } else {\n-            addReplyError(c,\"Elements are too large to be stored\");\n-        }\n\n+    if (streamAppendItem(s,c->argv+field_pos,(c->argc-field_pos)/2, &id, id_given ? &id : NULL)\n+            == C_ERR) {\n+        addReplyError(c,\"The ID specified in XADD is equal or smaller than the \" \"target stream top item\");\n\n",
    "22": "-        size_t maxelelen = 0;\n\n+        size_t maxelelen = 0, totelelen = 0;\n\n",
    "23": "+            totelelen += elelen;\n\n",
    "24": "+    if (sdslen(c->argv[4]->ptr) > LIST_MAX_ITEM_SIZE) {\n+        addReplyError(c, \"Element too large\");\n+        return;\n+    }\n\n",
    "25": "+    if (sdslen(ele->ptr) > LIST_MAX_ITEM_SIZE) {\n+        addReplyError(c, \"Element too large\");\n+        return;\n+    }\n\n",
    "26": "+        errno = EDOM;\n+        return C_ERR;\n+    }\n+    size_t totelelen = 0;\n+    for (int64_t i = 0; i < numfields*2; i++) {\n+        sds ele = argv[i]->ptr;\n+        totelelen += sdslen(ele);\n+    }\n+    if (totelelen > STREAM_LISTPACK_MAX_SIZE) {\n+        errno = ERANGE;\n\n",
    "27": "-        if (server.stream_node_max_bytes && lp_bytes >= server.stream_node_max_bytes) {\n\n+        size_t node_max_bytes = server.stream_node_max_bytes;\n+        if (node_max_bytes == 0 || node_max_bytes > STREAM_LISTPACK_MAX_SIZE) {\n+            node_max_bytes = STREAM_LISTPACK_MAX_SIZE;\n+        }\n+        if (lp_bytes + totelelen >= node_max_bytes) {\n\n-        errno = EDOM;\n-        return C_ERR;\n-    }\n-    size_t totelelen = 0;\n-    for (int64_t i = 0; i < numfields*2; i++) {\n-        sds ele = argv[i]->ptr;\n-        totelelen += sdslen(ele);\n-    }\n-    if (totelelen > STREAM_LISTPACK_MAX_SIZE) {\n-        errno = ERANGE;\n\n-        size_t node_max_bytes = server.stream_node_max_bytes;\n-        if (node_max_bytes == 0 || node_max_bytes > STREAM_LISTPACK_MAX_SIZE) {\n-            node_max_bytes = STREAM_LISTPACK_MAX_SIZE;\n-        }\n-        if (lp_bytes + totelelen >= node_max_bytes) {\n\n+        if (server.stream_node_max_bytes && lp_bytes >= server.stream_node_max_bytes) {\n\n",
    "28": "-        size_t maxelelen = 0;\n\n+        size_t maxelelen = 0, totelelen = 0;\n\n",
    "29": "+            totelelen += sdslen(sdsele);\n\n",
    "30": "-            o->ptr = ziplistPush(o->ptr, (unsigned char*)field, sdslen(field), ZIPLIST_TAIL);\n-            o->ptr = ziplistPush(o->ptr, (unsigned char*)value, sdslen(value), ZIPLIST_TAIL);\n-            if (sdslen(field) > server.hash_max_ziplist_value || sdslen(value) > server.hash_max_ziplist_value) {\n-                sdsfree(field);\n-                sdsfree(value);\n\n+            if (sdslen(field) > server.hash_max_ziplist_value || sdslen(value) > server.hash_max_ziplist_value || !ziplistSafeToAdd(o->ptr, sdslen(field)+sdslen(value))) {\n\n-            if (sdslen(field) > server.hash_max_ziplist_value || sdslen(value) > server.hash_max_ziplist_value || !ziplistSafeToAdd(o->ptr, sdslen(field)+sdslen(value))) {\n\n+            o->ptr = ziplistPush(o->ptr, (unsigned char*)field, sdslen(field), ZIPLIST_TAIL);\n+            o->ptr = ziplistPush(o->ptr, (unsigned char*)value, sdslen(value), ZIPLIST_TAIL);\n+            if (sdslen(field) > server.hash_max_ziplist_value || sdslen(value) > server.hash_max_ziplist_value) {\n+                sdsfree(field);\n+                sdsfree(value);\n\n-                ret = dictAdd((dict*)o->ptr, field, value);\n-                if (ret == DICT_ERR) {\n-                    rdbExitReportCorruptRDB(\"Duplicate hash fields detected\");\n-                }\n\n-            o->ptr = ziplistPush(o->ptr, (unsigned char*)field, sdslen(field), ZIPLIST_TAIL);\n-            o->ptr = ziplistPush(o->ptr, (unsigned char*)value, sdslen(value), ZIPLIST_TAIL);\n\n",
    "31": "+                ret = dictAdd((dict*)o->ptr, field, value);\n+                if (ret == DICT_ERR) {\n+                    rdbExitReportCorruptRDB(\"Duplicate hash fields detected\");\n+                }\n\n",
    "32": "+            o->ptr = ziplistPush(o->ptr, (unsigned char*)field, sdslen(field), ZIPLIST_TAIL);\n+            o->ptr = ziplistPush(o->ptr, (unsigned char*)value, sdslen(value), ZIPLIST_TAIL);\n\n",
    "33": "+                if (!ziplistSafeToAdd(zl, (size_t)flen + vlen)) {\n+                    rdbExitReportCorruptRDB(\"Hash zipmap too big (%u)\", flen);\n+                }\n\n",
    "34": "-                if (!ziplistSafeToAdd(zl, (size_t)flen + vlen)) {\n-                    rdbExitReportCorruptRDB(\"Hash zipmap too big (%u)\", flen);\n-                }\n\n",
    "35": "+    assert(sz < UT32_MAX);\n\n",
    "36": "+                    totelelen += sdslen(tmp);\n\n",
    "37": "+                    totelelen += sdslen(tmp);\n\n"
}