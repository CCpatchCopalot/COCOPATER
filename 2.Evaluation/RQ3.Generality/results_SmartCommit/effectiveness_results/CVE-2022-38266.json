{
    "0": "-    if (wc < 0) {\n-        wc = 0;\n-    }\n-    if (hc < 0) {\n-        hc = 0;\n\n+    if (wc <= 0 || hc <= 0) {\n+        return pixCopy(NULL, pixs);\n\n-        wc = L_M(wc, (w - 1) / 2);\n-        hc = L_M(hc, (h - 1) / 2);\n-        L_WARNG(\"kernel too large; reducing!\\n\", procName);\n-        L_FO(\"wc = %d, hc = %d\\n\", procName, wc, hc);\n-    }\n-    if (wc == 0 && hc == 0) {\n\n+        L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\", procName, w, wc, h, hc);\n\n-    if (wc <= 0 || hc <= 0) {\n-        return pixCopy(NULL, pixs);\n\n+    if (wc < 0) {\n+        wc = 0;\n+    }\n+    if (hc < 0) {\n+        hc = 0;\n\n-        L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\", procName, w, wc, h, hc);\n\n+        wc = L_M(wc, (w - 1) / 2);\n+        hc = L_M(hc, (h - 1) / 2);\n+        L_WARNG(\"kernel too large; reducing!\\n\", procName);\n+        L_FO(\"wc = %d, hc = %d\\n\", procName, wc, hc);\n+    }\n+    if (wc == 0 && hc == 0) {\n\n-    if (wc < 0) {\n-        wc = 0;\n-    }\n-    if (hc < 0) {\n-        hc = 0;\n-    }\n-    if (wc == 0 && hc == 0) {\n\n+    if (wc <= 0 || hc <= 0) {\n\n-        L_WARNG(\"kernel too large; returning a copy\\n\", procName);\n-        L_FO(\"w = %d, wc = %d, h = %d, hc = %d\\n\", procName, w, wc, h, hc);\n\n+        L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\", procName, w, wc, h, hc);\n\n-    if (wc <= 0 || hc <= 0) {\n\n+    if (wc < 0) {\n+        wc = 0;\n+    }\n+    if (hc < 0) {\n+        hc = 0;\n+    }\n+    if (wc == 0 && hc == 0) {\n\n-        L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\", procName, w, wc, h, hc);\n\n+        L_WARNG(\"kernel too large; returning a copy\\n\", procName);\n+        L_FO(\"w = %d, wc = %d, h = %d, hc = %d\\n\", procName, w, wc, h, hc);\n\n-    if (wc < 0) {\n-        wc = 0;\n-    }\n-    if (hc < 0) {\n-        hc = 0;\n\n+    if (wc <= 0 || hc <= 0) {\n+        return pixCopy(NULL, pix);\n\n-        wc = L_M(wc, (w - 1) / 2);\n-        hc = L_M(hc, (h - 1) / 2);\n-        L_WARNG(\"kernel too large; reducing!\\n\", procName);\n-        L_FO(\"wc = %d, hc = %d\\n\", procName, wc, hc);\n-    }\n-    if (wc == 0 && hc == 0) {\n\n+        L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\", procName, w, wc, h, hc);\n\n-    if (wc <= 0 || hc <= 0) {\n-        return pixCopy(NULL, pix);\n\n+    if (wc < 0) {\n+        wc = 0;\n+    }\n+    if (hc < 0) {\n+        hc = 0;\n\n-        L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\", procName, w, wc, h, hc);\n\n+        wc = L_M(wc, (w - 1) / 2);\n+        hc = L_M(hc, (h - 1) / 2);\n+        L_WARNG(\"kernel too large; reducing!\\n\", procName);\n+        L_FO(\"wc = %d, hc = %d\\n\", procName, wc, hc);\n+    }\n+    if (wc == 0 && hc == 0) {\n\n-    if (wc < 0) {\n-        wc = 0;\n-    }\n-    if (hc < 0) {\n-        hc = 0;\n\n+    if (wc <= 0 || hc <= 0) {\n+        return pixCopy(NULL, pixs);\n\n-        wc = L_MAX(0, L_M(wc, (w - 3) / 2));\n-        hc = L_MAX(0, L_M(hc, (h - 3) / 2));\n-        L_WARNG(\"kernel too large; reducing!\\n\", procName);\n-        L_FO(\"wc = %d, hc = %d\\n\", procName, wc, hc);\n-    }\n-    if (wc == 0 && hc == 0) {\n\n+        L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\", procName, w, wc, h, hc);\n\n-    if (wc <= 0 || hc <= 0) {\n-        return pixCopy(NULL, pixs);\n\n+    if (wc < 0) {\n+        wc = 0;\n+    }\n+    if (hc < 0) {\n+        hc = 0;\n\n-        L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\", procName, w, wc, h, hc);\n\n+        wc = L_MAX(0, L_M(wc, (w - 3) / 2));\n+        hc = L_MAX(0, L_M(hc, (h - 3) / 2));\n+        L_WARNG(\"kernel too large; reducing!\\n\", procName);\n+        L_FO(\"wc = %d, hc = %d\\n\", procName, wc, hc);\n+    }\n+    if (wc == 0 && hc == 0) {\n\n-    if (wc < 0) {\n-        wc = 0;\n\n+    if (wc <= 0 || hc <= 0) {\n+        return pixCopy(NULL, pix);\n\n-    if (hc < 0) {\n-        hc = 0;\n\n+    if (nx <= 1 && ny <= 1) {\n+        return pixBlockconv(pix, wc, hc);\n\n-        wc = L_MAX(0, L_M(wc, (w - 3) / 2));\n-        hc = L_MAX(0, L_M(hc, (h - 3) / 2));\n-        L_WARNG(\"kernel too large; reducing!\\n\", procName);\n-        L_FO(\"wc = %d, hc = %d\\n\", procName, wc, hc);\n-    }\n-    if (wc == 0 && hc == 0) {\n\n+        L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\", procName, w, wc, h, hc);\n\n-    if (wc <= 0 || hc <= 0) {\n-        return pixCopy(NULL, pix);\n\n+    if (wc < 0) {\n+        wc = 0;\n\n-    if (nx <= 1 && ny <= 1) {\n-        return pixBlockconv(pix, wc, hc);\n\n+    if (hc < 0) {\n+        hc = 0;\n\n-        L_ERROR(\"kernel is too large: w = %d, wc = %d, h = %d, hc = %d\\n\", procName, w, wc, h, hc);\n\n+        wc = L_MAX(0, L_M(wc, (w - 3) / 2));\n+        hc = L_MAX(0, L_M(hc, (h - 3) / 2));\n+        L_WARNG(\"kernel too large; reducing!\\n\", procName);\n+        L_FO(\"wc = %d, hc = %d\\n\", procName, wc, hc);\n+    }\n+    if (wc == 0 && hc == 0) {\n\n+    if (nx <= 1 && ny <= 1) {\n+        return pixBlockconv(pix, wc, hc);\n+    }\n\n",
    "1": "-    if (nx <= 1 && ny <= 1) {\n-        return pixBlockconv(pix, wc, hc);\n-    }\n\n"
}