{
    "0": "-                ((float*)conv)[i] = (float)value[i];\n\n+                ((float*)conv)[i] = TIFFClampDoubleToFloat(value[i]);\n\n",
    "1": "-                ((int8*)conv)[i] = (int8)value[i];\n\n+                ((int8*)conv)[i] = TIFFClampDoubleToInt8(value[i]);\n\n-                ((int16*)conv)[i] = (int16)value[i];\n\n+                ((int16*)conv)[i] = TIFFClampDoubleToInt16(value[i]);\n\n-                ((int32*)conv)[i] = (int32)value[i];\n\n+                ((int32*)conv)[i] = TIFFClampDoubleToInt32(value[i]);\n\n-                ((uint8*)conv)[i] = (uint8)value[i];\n\n+                ((uint8*)conv)[i] = TIFFClampDoubleToUInt8(value[i]);\n\n-                ((uint16*)conv)[i] = (uint16)value[i];\n\n+                ((uint16*)conv)[i] = TIFFClampDoubleToUInt16(value[i]);\n\n-                ((uint32*)conv)[i] = (uint32)value[i];\n\n+                ((uint32*)conv)[i] = TIFFClampDoubleToUInt32(value[i]);\n\n-                ((int8*)conv)[i] = TIFFClampDoubleToInt8(value[i]);\n\n+                ((int8*)conv)[i] = (int8)value[i];\n\n-                ((int16*)conv)[i] = TIFFClampDoubleToInt16(value[i]);\n\n+                ((int16*)conv)[i] = (int16)value[i];\n\n-                ((int32*)conv)[i] = TIFFClampDoubleToInt32(value[i]);\n\n+                ((int32*)conv)[i] = (int32)value[i];\n\n-                ((uint8*)conv)[i] = TIFFClampDoubleToUInt8(value[i]);\n\n+                ((uint8*)conv)[i] = (uint8)value[i];\n\n-                ((uint16*)conv)[i] = TIFFClampDoubleToUInt16(value[i]);\n\n+                ((uint16*)conv)[i] = (uint16)value[i];\n\n-                ((uint32*)conv)[i] = TIFFClampDoubleToUInt32(value[i]);\n\n+                ((uint32*)conv)[i] = (uint32)value[i];\n\n",
    "2": "-                ((float*)conv)[i] = TIFFClampDoubleToFloat(value[i]);\n\n+                ((float*)conv)[i] = (float)value[i];\n\n",
    "3": "-        if (*na<=0.0) {\n\n+        if (*na<=0.0 || *na != *na) {\n\n-        } else if (*na >= 0 && *na <= (float)0xFFFFFFFFU && *na==(float)(uint32)(*na)) {\n\n+        } else if (*na==(float)(uint32)(*na)) {\n\n",
    "4": "-        } else if (*na==(float)(uint32)(*na)) {\n\n+        } else if (*na >= 0 && *na <= (float)0xFFFFFFFFU && *na==(float)(uint32)(*na)) {\n\n-        if (*na<=0.0 || *na != *na) {\n\n+        if (*na<=0.0) {\n\n",
    "5": "-        td->td_xresolution = (float) dblval;\n\n+        td->td_xresolution = TIFFClampDoubleToFloat( dblval );\n\n-        td->td_yresolution = (float) dblval;\n\n+        td->td_yresolution = TIFFClampDoubleToFloat( dblval );\n\n-        td->td_yposition = (float) va_arg(ap, double);\n\n+        td->td_yposition = TIFFClampDoubleToFloat( va_arg(ap, double) );\n\n-        td->td_xresolution = TIFFClampDoubleToFloat( dblval );\n\n+        td->td_xresolution = (float) dblval;\n\n-        td->td_yresolution = TIFFClampDoubleToFloat( dblval );\n\n+        td->td_yresolution = (float) dblval;\n\n-        td->td_xposition = TIFFClampDoubleToFloat( va_arg(ap, double) );\n\n+        td->td_xposition = (float) va_arg(ap, double);\n\n-        td->td_yposition = TIFFClampDoubleToFloat( va_arg(ap, double) );\n\n+        td->td_yposition = (float) va_arg(ap, double);\n\n",
    "6": "-        td->td_xposition = (float) va_arg(ap, double);\n\n+        td->td_xposition = TIFFClampDoubleToFloat( va_arg(ap, double) );\n\n",
    "7": "+    } else if( value != value ) {\n+        TIFFErrorExt(tif->tif_clientdata,module,\"Not-a-number value is illegal\");\n+        return 0;\n\n",
    "8": "-    } else if (value==(double)(uint32)value) {\n\n+    } else if (value <= 0xFFFFFFFFU && value==(double)(uint32)value) {\n\n",
    "9": "-    } else if( value != value ) {\n-        TIFFErrorExt(tif->tif_clientdata,module,\"Not-a-number value is illegal\");\n-        return 0;\n\n",
    "10": "-    } else if (value <= 0xFFFFFFFFU && value==(double)(uint32)value) {\n\n+    } else if (value==(double)(uint32)value) {\n\n",
    "11": "-        for (n=0; n<count; n++)\n-            *mb++=(float)(*ma++);\n\n+        for (n=0; n<count; n++) {\n+            double val = *ma++;\n+            if( val > FLT_MAX ) {\n+                val = FLT_MAX;\n+            } else if( val < -FLT_MAX ) {\n+                val = -FLT_MAX;\n+            }\n+            *mb++=(float)val;\n+        }\n\n",
    "12": "-        for (n=0; n<count; n++) {\n-            double val = *ma++;\n-            if( val > FLT_MAX ) {\n-                val = FLT_MAX;\n-            } else if( val < -FLT_MAX ) {\n-                val = -FLT_MAX;\n-            }\n-            *mb++=(float)val;\n-        }\n\n+        for (n=0; n<count; n++)\n+            *mb++=(float)(*ma++);\n\n"
}