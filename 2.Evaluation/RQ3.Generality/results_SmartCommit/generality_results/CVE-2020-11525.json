{
    "0": "-    int i, j;\n\n+    UT32 i, j;\n\n-        for (i = 0; i < (int)bitmapCache->maxCells; i++) {\n-            for (j = 0; j < (int)bitmapCache->cells[i].number + 1; j++) {\n\n+        for (i = 0; i < bitmapCache->maxCells; i++) {\n+            for (j = 0; j < bitmapCache->cells[i].number + 1; j++) {\n\n-    UT32 i, j;\n\n+    int i, j;\n\n-        for (i = 0; i < bitmapCache->maxCells; i++) {\n-            for (j = 0; j < bitmapCache->cells[i].number + 1; j++) {\n\n+        for (i = 0; i < (int)bitmapCache->maxCells; i++) {\n+            for (j = 0; j < (int)bitmapCache->cells[i].number + 1; j++) {\n\n-    UT32 i;\n\n+    int i;\n\n-    for (i = 0; i < bitmapCache->maxCells; i++) {\n\n+    for (i = 0; i < (int)bitmapCache->maxCells; i++) {\n\n",
    "1": "-    int i;\n\n+    UT32 i;\n\n",
    "2": "-    for (i = 0; i < (int)bitmapCache->maxCells; i++) {\n\n+    for (i = 0; i < bitmapCache->maxCells; i++) {\n\n",
    "3": "-    if (bitmapCache->cells) {\n-        for (i = 0; i < (int)bitmapCache->maxCells; i++)\n-            free(bitmapCache->cells[i].entries);\n-    }\n-    free(bitmapCache);\n\n+    bitmap_cache_free(bitmapCache);\n\n-    bitmap_cache_free(bitmapCache);\n\n+    if (bitmapCache->cells) {\n+        for (i = 0; i < (int)bitmapCache->maxCells; i++)\n+            free(bitmapCache->cells[i].entries);\n+    }\n+    free(bitmapCache);\n\n",
    "4": "-    if (id > bitmapCache->maxCells) {\n\n+    if (id >= bitmapCache->maxCells) {\n\n",
    "5": "-    if (id >= bitmapCache->maxCells) {\n\n+    if (id > bitmapCache->maxCells) {\n\n"
}