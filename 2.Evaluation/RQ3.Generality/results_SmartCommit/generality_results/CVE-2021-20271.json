{
    "0": "-            headerMergeLegacySigs(h, sigh);\n\n+            if (headerMergeLegacySigs(h, sigh, &msg)) {\n+                goto exit;\n+            }\n\n-            if (headerMergeLegacySigs(h, sigh, &msg)) {\n-                goto exit;\n-            }\n\n+            headerMergeLegacySigs(h, sigh);\n\n",
    "1": "-static void headerMergeLegacySigs(Header h, Header sigh) {\n-    HeaderIterator hi;\n\n+struct taglate_s {\n+    rpmTagVal stag;\n+    rpmTagVal xtag;\n+    rpm_count_t count;\n+} const xlateTags[] = {\n+    { RPMSIGTAG_SIZE, RPMTAG_SIGSIZE, 1 }, { RPMSIGTAG_PGP, RPMTAG_SIGPGP, 0 }, { RPMSIGTAG_MD5, RPMTAG_SIGMD5, 16 }, { RPMSIGTAG_GPG, RPMTAG_SIGGPG, 0 }, { RPMSIGTAG_PAYLOADSIZE, RPMTAG_ARCHIVESIZE, 1 }, { RPMSIGTAG_FILESIGNATURES, RPMTAG_FILESIGNATURES, 0 }, { RPMSIGTAG_FILESIGNATURELENGTH, RPMTAG_FILESIGNATURELENGTH, 1 }, { RPMSIGTAG_VERITYSIGNATURES, RPMTAG_VERITYSIGNATURES, 0 }, { RPMSIGTAG_VERITYSIGNATUREALGO, RPMTAG_VERITYSIGNATUREALGO, 1 }, { RPMSIGTAG_SHA1, RPMTAG_SHA1HEADER, 1 }, { RPMSIGTAG_SHA256, RPMTAG_SHA256HEADER, 1 }, { RPMSIGTAG_DSA, RPMTAG_DSAHEADER, 0 }, { RPMSIGTAG_RSA, RPMTAG_RSAHEADER, 0 }, { RPMSIGTAG_LONGSIZE, RPMTAG_LONGSIGSIZE, 1 }, { RPMSIGTAG_LONGARCHIVESIZE, RPMTAG_LONGARCHIVESIZE, 1 }, { 0 }\n+};\n+static rpmTagVal headerMergeLegacySigs(Header h, Header sigh, char **msg) {\n+    const struct taglate_s *xl;\n\n-    hi = headerInitIterator(sigh);\n-    for (; headerNext(hi, &td); rpmtdFreeData(&td)) {\n-        switch (td.tag) {\n-        case RPMSIGTAG_SIZE:\n-            td.tag = RPMTAG_SIGSIZE;\n-            break;\n-        case RPMSIGTAG_PGP:\n-            td.tag = RPMTAG_SIGPGP;\n-            break;\n-        case RPMSIGTAG_MD5:\n-            td.tag = RPMTAG_SIGMD5;\n-            break;\n-        case RPMSIGTAG_GPG:\n-            td.tag = RPMTAG_SIGGPG;\n-            break;\n-        case RPMSIGTAG_PGP5:\n-            td.tag = RPMTAG_SIGPGP5;\n-            break;\n-        case RPMSIGTAG_PAYLOADSIZE:\n-            td.tag = RPMTAG_ARCHIVESIZE;\n-            break;\n-        case RPMSIGTAG_FILESIGNATURES:\n-            td.tag = RPMTAG_FILESIGNATURES;\n\n+    rpmtdReset(&td);\n+    for (xl = xlateTags; xl->stag; xl++) {\n+        if (headerIsEntry(h, xl->xtag)) {\n\n-        case RPMSIGTAG_FILESIGNATURELENGTH:\n-            td.tag = RPMTAG_FILESIGNATURELENGTH;\n-            break;\n-        case RPMSIGTAG_VERITYSIGNATURES:\n-        case RPMSIGTAG_VERITYSIGNATUREALGO:\n-        case RPMSIGTAG_SHA1:\n-        case RPMSIGTAG_SHA256:\n-        case RPMSIGTAG_DSA:\n-        case RPMSIGTAG_RSA:\n-        default:\n-            if (!(td.tag >= HEADER_SIGBASE && td.tag < HEADER_TAGBASE)) {\n-                continue;\n\n-        if (!headerIsEntry(h, td.tag)) {\n-            switch (td.type) {\n-            case RPM_NULL_TYPE:\n-                continue;\n\n+            if (td.type != rpmTagGetTagType(td.tag)) {\n\n-            case RPM_I18NSTRG_TYPE:\n-                continue;\n\n+            }\n+            if (!headerPut(h, &td, HEADERPUT_DEFAULT)) {\n\n-    headerFreeIterator(hi);\n\n+    rpmtdFreeData(&td);\n+    if (xl->stag) {\n+        rasprintf(msg, \"invalid signature tag %s (%d)\", rpmTagGetName(xl->xtag), xl->xtag);\n+    }\n+    return xl->stag;\n\n-    rpmtdReset(&td);\n-    for (xl = xlateTags; xl->stag; xl++) {\n-        if (headerIsEntry(h, xl->xtag)) {\n\n+    hi = headerInitIterator(sigh);\n+    for (; headerNext(hi, &td); rpmtdFreeData(&td)) {\n+        switch (td.tag) {\n+        case RPMSIGTAG_SIZE:\n+            td.tag = RPMTAG_SIGSIZE;\n\n-        }\n-        if (headerGet(sigh, xl->stag, &td, HEADERGET_RAW|HEADERGET_MMEM)) {\n-            if (xl->stag != xl->xtag) {\n-                td.tag = xl->xtag;\n-            }\n-            if (td.type != rpmTagGetTagType(td.tag)) {\n\n+        case RPMSIGTAG_PGP:\n+            td.tag = RPMTAG_SIGPGP;\n+            break;\n+        case RPMSIGTAG_MD5:\n+            td.tag = RPMTAG_SIGMD5;\n+            break;\n+        case RPMSIGTAG_GPG:\n+            td.tag = RPMTAG_SIGGPG;\n+            break;\n+        case RPMSIGTAG_PGP5:\n+            td.tag = RPMTAG_SIGPGP5;\n+            break;\n+        case RPMSIGTAG_PAYLOADSIZE:\n+            td.tag = RPMTAG_ARCHIVESIZE;\n\n+        case RPMSIGTAG_FILESIGNATURES:\n+            td.tag = RPMTAG_FILESIGNATURES;\n+            break;\n+        case RPMSIGTAG_FILESIGNATURELENGTH:\n+            td.tag = RPMTAG_FILESIGNATURELENGTH;\n+            break;\n+        case RPMSIGTAG_VERITYSIGNATURES:\n+        case RPMSIGTAG_VERITYSIGNATUREALGO:\n+        case RPMSIGTAG_SHA1:\n+        case RPMSIGTAG_SHA256:\n+        case RPMSIGTAG_DSA:\n+        case RPMSIGTAG_RSA:\n+        default:\n+            if (!(td.tag >= HEADER_SIGBASE && td.tag < HEADER_TAGBASE)) {\n+                continue;\n\n-            if (td.count < 1 || td.count > 16*1024*1024) {\n\n-            if (xl->count && td.count != xl->count) {\n\n+        if (!headerIsEntry(h, td.tag)) {\n+            switch (td.type) {\n+            case RPM_NULL_TYPE:\n+                continue;\n\n+            case RPM_CHAR_TYPE:\n+            case RPM_T8_TYPE:\n+            case RPM_T16_TYPE:\n+            case RPM_T32_TYPE:\n+            case RPM_T64_TYPE:\n+                if (td.count != 1) {\n+                    continue;\n\n-            if (!headerPut(h, &td, HEADERPUT_DEFAULT)) {\n\n+            case RPM_STRG_TYPE:\n+            case RPM_STRG_ARRAY_TYPE:\n+            case RPM_B_TYPE:\n+                if (td.count >= 16*1024) {\n+                    continue;\n\n+            (void) headerPut(h, &td, HEADERPUT_DEFAULT);\n\n-    rpmtdFreeData(&td);\n-    if (xl->stag) {\n-        rasprintf(msg, \"invalid signature tag %s (%d)\", rpmTagGetName(xl->xtag), xl->xtag);\n\n",
    "2": "-            break;\n\n+        if (headerGet(sigh, xl->stag, &td, HEADERGET_RAW|HEADERGET_MMEM)) {\n+            if (xl->stag != xl->xtag) {\n+                td.tag = xl->xtag;\n\n",
    "3": "-            case RPM_CHAR_TYPE:\n-            case RPM_T8_TYPE:\n-            case RPM_T16_TYPE:\n-            case RPM_T32_TYPE:\n-            case RPM_T64_TYPE:\n-                if (td.count != 1) {\n-                    continue;\n\n",
    "4": "+            if (td.count < 1 || td.count > 16*1024*1024) {\n\n",
    "5": "-            case RPM_STRG_TYPE:\n-            case RPM_STRG_ARRAY_TYPE:\n-            case RPM_B_TYPE:\n-                if (td.count >= 16*1024) {\n-                    continue;\n\n",
    "6": "+            if (xl->count && td.count != xl->count) {\n\n",
    "7": "-            (void) headerPut(h, &td, HEADERPUT_DEFAULT);\n\n+            rpmtdFreeData(&td);\n\n",
    "8": "-            rpmtdFreeData(&td);\n\n+                break;\n+            case RPM_I18NSTRG_TYPE:\n+                continue;\n+                break;\n\n",
    "9": "-    return xl->stag;\n\n+    headerFreeIterator(hi);\n\n"
}