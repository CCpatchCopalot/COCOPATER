{
    "0": "+    if (page < 0 || page >= num_pages) {\n+        return;\n+    }\n\n",
    "1": "-    if (page < 0 || page >= num_pages) {\n-        return;\n-    }\n\n",
    "2": "-static void jpeg_error_handler(j_common_ptr) {\n-    return;\n\n+static void jpeg_error_handler(j_common_ptr p) {\n+    hd_jpeg_err_t\t*jerr = (hd_jpeg_err_t *)p->err;\n+    (jerr->jerr.format_message)(p, jerr->message);\n+    longjmp(jerr->retbuf, 1);\n\n-static void jpeg_error_handler(j_common_ptr p) {\n-    hd_jpeg_err_t\t*jerr = (hd_jpeg_err_t *)p->err;\n-    (jerr->jerr.format_message)(p, jerr->message);\n-    longjmp(jerr->retbuf, 1);\n\n+static void jpeg_error_handler(j_common_ptr) {\n+    return;\n\n",
    "3": "+                if (chapter_starts[j] < 0) {\n+                    continue;\n+                }\n\n",
    "4": "-                if (chapter_starts[j] < 0) {\n-                    continue;\n-                }\n\n",
    "5": "-    for (i = web_files, wc = web_cache; i > 0; i --, wc ++)\n\n+    for (i = web_files, wc = web_cache; i > 0; i --, wc ++) {\n\n",
    "6": "+            if (!strncmp(wc->url, \"data:\", 5)) {\n+                return (\"data URL\");\n+            } else {\n\n",
    "7": "+        }\n+    }\n\n",
    "8": "-    for (i = web_files, wc = web_cache; i > 0; i --, wc ++) {\n\n+    for (i = web_files, wc = web_cache; i > 0; i --, wc ++)\n\n-            if (!strncmp(wc->url, \"data:\", 5)) {\n-                return (\"data URL\");\n-            } else {\n\n",
    "9": "-        }\n-    }\n\n",
    "10": "-    struct jpeg_error_mgr\tjerr;\n\n+    hd_jpeg_err_t\tjerr;\n\n-    jpeg_std_error(&jerr);\n-    jerr.error_exit = jpeg_error_handler;\n-    cinfo.err = &jerr;\n\n+    jpeg_std_error(&jerr.jerr);\n+    jerr.jerr.error_exit = jpeg_error_handler;\n+    if (setjmp(jerr.retbuf)) {\n+        progress_error(HD_ERROR_BAD_FORMAT, \"%s (%s)\", jerr.message, file_rlookup(img->filename));\n+        jpeg_destroy_decompress(&cinfo);\n+        return (-1);\n+    }\n+    cinfo.err = (struct jpeg_error_mgr *)&jerr;\n\n-    hd_jpeg_err_t\tjerr;\n\n+    struct jpeg_error_mgr\tjerr;\n\n-    jpeg_std_error(&jerr.jerr);\n-    jerr.jerr.error_exit = jpeg_error_handler;\n-    if (setjmp(jerr.retbuf)) {\n-        progress_error(HD_ERROR_BAD_FORMAT, \"%s (%s)\", jerr.message, file_rlookup(img->filename));\n-        jpeg_destroy_decompress(&cinfo);\n-        return (-1);\n-    }\n-    cinfo.err = (struct jpeg_error_mgr *)&jerr;\n\n+    jpeg_std_error(&jerr);\n+    jerr.error_exit = jpeg_error_handler;\n+    cinfo.err = &jerr;\n\n"
}