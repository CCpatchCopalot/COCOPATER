{
    "0": "-        const float min_input = context->input(1).flat<float>()(0);\n-        const float max_input = context->input(2).flat<float>()(0);\n\n+        const Tensor& min_input_tensor = context->input(1);\n+        const Tensor& max_input_tensor = context->input(2);\n+        OP_REQUIRES(context, TensorShapeUtils::IsScalar(min_input_tensor.shape()), errors::InvalidArgument( \"min_input shape must be rank 0 but is rank \", min_input_tensor.dims(), \", received shape: \",\n+                    min_input_tensor.shape()));\n+        OP_REQUIRES(context, TensorShapeUtils::IsScalar(max_input_tensor.shape()), errors::InvalidArgument( \"max_input shape must be rank 0 but is rank \", max_input_tensor.dims(), \", received shape: \",\n+                    max_input_tensor.shape()));\n+        const float min_input = context->input(1).scalar<float>()();\n+        const float max_input = context->input(2).scalar<float>()();\n\n-        const Tensor& min_input_tensor = context->input(1);\n-        const Tensor& max_input_tensor = context->input(2);\n-        OP_REQUIRES(context, TensorShapeUtils::IsScalar(min_input_tensor.shape()), errors::InvalidArgument( \"min_input shape must be rank 0 but is rank \", min_input_tensor.dims(), \", received shape: \",\n-                    min_input_tensor.shape()));\n-        OP_REQUIRES(context, TensorShapeUtils::IsScalar(max_input_tensor.shape()), errors::InvalidArgument( \"max_input shape must be rank 0 but is rank \", max_input_tensor.dims(), \", received shape: \",\n-                    max_input_tensor.shape()));\n-        const float min_input = context->input(1).scalar<float>()();\n-        const float max_input = context->input(2).scalar<float>()();\n\n+        const float min_input = context->input(1).flat<float>()(0);\n+        const float max_input = context->input(2).flat<float>()(0);\n\n"
}