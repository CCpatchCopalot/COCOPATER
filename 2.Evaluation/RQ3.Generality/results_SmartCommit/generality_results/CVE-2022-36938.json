{
    "0": "+    always_assert_log(sizeof(dex_header) <= dexsize, \"Header size (%lu) is larger than file size (%zu)\\n\", dexsize, sizeof(dex_header));\n\n",
    "1": "-    auto off = (uint64_t)dh->class_defs_off;\n-    auto limit = off + dh->class_defs_size * sizeof(dex_class_def);\n-    always_assert_log(off < dexsize, \"class_defs_off out of range\");\n-    always_assert_log(limit <= dexsize, \"invalid class_defs_size\");\n\n+    auto str_ids_off = (uint64_t)dh->string_ids_off;\n+    auto str_ids_limit = str_ids_off + dh->string_ids_size * sizeof(dex_string_id);\n+    always_assert_log(str_ids_off < dexsize, \"string_ids_off out of range\");\n+    always_assert_log(str_ids_limit <= dexsize, \"invalid string_ids_size\");\n+    auto type_ids_off = (uint64_t)dh->type_ids_off;\n+    auto type_ids_limit = type_ids_off + dh->type_ids_size * sizeof(dex_type_id);\n+    always_assert_log(type_ids_off < dexsize, \"type_ids_off out of range\");\n+    always_assert_log(type_ids_limit <= dexsize, \"invalid type_ids_size\");\n+    auto proto_ids_off = (uint64_t)dh->proto_ids_off;\n+    auto proto_ids_limit = proto_ids_off + dh->proto_ids_size * sizeof(dex_proto_id);\n+    always_assert_log(proto_ids_off < dexsize, \"proto_ids_off out of range\");\n+    always_assert_log(proto_ids_limit <= dexsize, \"invalid proto_ids_size\");\n+    auto field_ids_off = (uint64_t)dh->field_ids_off;\n+    auto field_ids_limit = field_ids_off + dh->field_ids_size * sizeof(dex_field_id);\n+    always_assert_log(field_ids_off < dexsize, \"field_ids_off out of range\");\n+    always_assert_log(field_ids_limit <= dexsize, \"invalid field_ids_size\");\n+    auto meth_ids_off = (uint64_t)dh->method_ids_off;\n+    auto meth_ids_limit = meth_ids_off + dh->method_ids_size * sizeof(dex_method_id);\n+    always_assert_log(meth_ids_off < dexsize, \"method_ids_off out of range\");\n+    always_assert_log(meth_ids_limit <= dexsize, \"invalid method_ids_size\");\n+    auto cls_defs_off = (uint64_t)dh->class_defs_off;\n+    auto cls_defs_limit = cls_defs_off + dh->class_defs_size * sizeof(dex_class_def);\n+    always_assert_log(cls_defs_off < dexsize, \"class_defs_off out of range\");\n+    always_assert_log(cls_defs_limit <= dexsize, \"invalid class_defs_size\");\n\n-    always_assert_log(sizeof(dex_header) <= dexsize, \"Header size (%lu) is larger than file size (%zu)\\n\", dexsize, sizeof(dex_header));\n\n-    auto str_ids_off = (uint64_t)dh->string_ids_off;\n-    auto str_ids_limit = str_ids_off + dh->string_ids_size * sizeof(dex_string_id);\n-    always_assert_log(str_ids_off < dexsize, \"string_ids_off out of range\");\n-    always_assert_log(str_ids_limit <= dexsize, \"invalid string_ids_size\");\n-    auto type_ids_off = (uint64_t)dh->type_ids_off;\n-    auto type_ids_limit = type_ids_off + dh->type_ids_size * sizeof(dex_type_id);\n-    always_assert_log(type_ids_off < dexsize, \"type_ids_off out of range\");\n-    always_assert_log(type_ids_limit <= dexsize, \"invalid type_ids_size\");\n-    auto proto_ids_off = (uint64_t)dh->proto_ids_off;\n-    auto proto_ids_limit = proto_ids_off + dh->proto_ids_size * sizeof(dex_proto_id);\n-    always_assert_log(proto_ids_off < dexsize, \"proto_ids_off out of range\");\n-    always_assert_log(proto_ids_limit <= dexsize, \"invalid proto_ids_size\");\n-    auto field_ids_off = (uint64_t)dh->field_ids_off;\n-    auto field_ids_limit = field_ids_off + dh->field_ids_size * sizeof(dex_field_id);\n-    always_assert_log(field_ids_off < dexsize, \"field_ids_off out of range\");\n-    always_assert_log(field_ids_limit <= dexsize, \"invalid field_ids_size\");\n-    auto meth_ids_off = (uint64_t)dh->method_ids_off;\n-    auto meth_ids_limit = meth_ids_off + dh->method_ids_size * sizeof(dex_method_id);\n-    always_assert_log(meth_ids_off < dexsize, \"method_ids_off out of range\");\n-    always_assert_log(meth_ids_limit <= dexsize, \"invalid method_ids_size\");\n-    auto cls_defs_off = (uint64_t)dh->class_defs_off;\n-    auto cls_defs_limit = cls_defs_off + dh->class_defs_size * sizeof(dex_class_def);\n-    always_assert_log(cls_defs_off < dexsize, \"class_defs_off out of range\");\n-    always_assert_log(cls_defs_limit <= dexsize, \"invalid class_defs_size\");\n\n+    auto off = (uint64_t)dh->class_defs_off;\n+    auto limit = off + dh->class_defs_size * sizeof(dex_class_def);\n+    always_assert_log(off < dexsize, \"class_defs_off out of range\");\n+    always_assert_log(limit <= dexsize, \"invalid class_defs_size\");\n\n"
}