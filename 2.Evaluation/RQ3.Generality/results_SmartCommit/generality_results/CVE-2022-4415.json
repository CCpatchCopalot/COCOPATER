{
    "0": "+    size_t size;\n\n",
    "1": "+    p = procfs_file_alloca(pid, \"auxv\");\n+    if (read_full_virtual_file(p, &t, &size) >= 0) {\n+        char *buf = malloc(strlen(\"COREDUMP_PROC_AUXV=\") + size + 1);\n+        if (buf) {\n+            *((uint8_t*) mempcpy(stpcpy(buf, \"COREDUMP_PROC_AUXV=\"), t, size)) = '\\0';\n+            (void) iovw_consume(iovw, buf, size + strlen(\"COREDUMP_PROC_AUXV=\"));\n+        }\n+        free(t);\n+    }\n\n",
    "2": "-    size_t size;\n\n",
    "3": "-    p = procfs_file_alloca(pid, \"auxv\");\n-    if (read_full_virtual_file(p, &t, &size) >= 0) {\n-        char *buf = malloc(strlen(\"COREDUMP_PROC_AUXV=\") + size + 1);\n-        if (buf) {\n-            *((uint8_t*) mempcpy(stpcpy(buf, \"COREDUMP_PROC_AUXV=\"), t, size)) = '\\0';\n-            (void) iovw_consume(iovw, buf, size + strlen(\"COREDUMP_PROC_AUXV=\"));\n-        }\n-        free(t);\n-    }\n\n",
    "4": "-static int fix_acl(int fd, uid_t uid) {\n-#if HAVE_ACL\n-    int r;\n\n+static int fix_acl(int fd, uid_t uid, bool allow_user) {\n\n-static int fix_acl(int fd, uid_t uid, bool allow_user) {\n-    assert(fd >= 0);\n-    assert(uid_is_valid(uid));\n\n+static int fix_acl(int fd, uid_t uid) {\n\n-    if (!allow_user) {\n-        return 0;\n-    }\n\n+    assert(fd >= 0);\n+    assert(uid_is_valid(uid));\n\n",
    "5": "+#if HAVE_ACL\n+    int r;\n+    if (!allow_user) {\n+        return 0;\n+    }\n\n",
    "6": "-            char *p;\n\n",
    "7": "-            p = startswith(iovec->iov_base, meta_field_names[i]);\n\n+            const char *p = startswith(iovec->iov_base, meta_field_names[i]);\n\n-            const char *p = startswith(iovec->iov_base, meta_field_names[i]);\n\n+            p = startswith(iovec->iov_base, meta_field_names[i]);\n\n-                context->meta_size[i] = iovec->iov_len - strlen(meta_field_names[i]);\n\n",
    "8": "+                context->meta_size[i] = iovec->iov_len - strlen(meta_field_names[i]);\n\n",
    "9": "+            char *p;\n\n",
    "10": "-static int fix_permissions( int fd, const char *filename, const char *target, const Context *context, uid_t uid) {\n\n+static int fix_permissions( int fd, const char *filename, const char *target, const Context *context, uid_t uid, bool allow_user) {\n\n-    (void) fix_acl(fd, uid);\n\n+    (void) fix_acl(fd, uid, allow_user);\n\n-static int fix_permissions( int fd, const char *filename, const char *target, const Context *context, uid_t uid, bool allow_user) {\n\n+static int fix_permissions( int fd, const char *filename, const char *target, const Context *context, uid_t uid) {\n\n-    (void) fix_acl(fd, uid, allow_user);\n\n+    (void) fix_acl(fd, uid);\n\n",
    "11": "+    bool allow_user = grant_user_access(fd, context) > 0;\n\n",
    "12": "-        r = fix_permissions(fd_compressed, tmp_compressed, fn_compressed, context, uid);\n\n+        r = fix_permissions(fd_compressed, tmp_compressed, fn_compressed, context, uid, allow_user);\n\n-        r = fix_permissions(fd_compressed, tmp_compressed, fn_compressed, context, uid, allow_user);\n\n+        r = fix_permissions(fd_compressed, tmp_compressed, fn_compressed, context, uid);\n\n",
    "13": "-    r = fix_permissions(fd, tmp, fn, context, uid);\n\n+    r = fix_permissions(fd, tmp, fn, context, uid, allow_user);\n\n-    bool allow_user = grant_user_access(fd, context) > 0;\n\n-    r = fix_permissions(fd, tmp, fn, context, uid, allow_user);\n\n+    r = fix_permissions(fd, tmp, fn, context, uid);\n\n"
}