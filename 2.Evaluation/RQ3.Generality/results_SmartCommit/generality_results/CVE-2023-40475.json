{
    "0": "+    if (caps) {\n+        MXFUPMappingData *data = *mapping_data;\n+        gsize expected_in_stride = 0, out_stride = 0;\n+        gsize expected_in_size = 0, out_size = 0;\n+        if (data->image_start_offset > data->image_end_offset) {\n+            GST_WARNG (\"Invalid image start/end offset\");\n+            g_free (data);\n+            *mapping_data = NULL;\n+            gst_clear_caps (&caps);\n+            return NULL;\n+        }\n+        if (!g_size_checked_mul (&expected_in_stride, data->bpp, data->width) || (out_stride = GST_ROUND_UP_4 (expected_in_stride)) < expected_in_stride\n+                || !g_size_checked_mul (&expected_in_size, expected_in_stride, data->height) || !g_size_checked_mul (&out_size, out_stride, data->height)) {\n+            GST_ERROR (\"Invalid resolution or bit depth\");\n+            g_free (data);\n+            *mapping_data = NULL;\n+            gst_clear_caps (&caps);\n+            return NULL;\n+        }\n+    }\n\n",
    "1": "-    if (caps) {\n-        MXFUPMappingData *data = *mapping_data;\n-        gsize expected_in_stride = 0, out_stride = 0;\n-        gsize expected_in_size = 0, out_size = 0;\n-        if (data->image_start_offset > data->image_end_offset) {\n-            GST_WARNG (\"Invalid image start/end offset\");\n-            g_free (data);\n-            *mapping_data = NULL;\n-            gst_clear_caps (&caps);\n-            return NULL;\n-        }\n-        if (!g_size_checked_mul (&expected_in_stride, data->bpp, data->width) || (out_stride = GST_ROUND_UP_4 (expected_in_stride)) < expected_in_stride\n-                || !g_size_checked_mul (&expected_in_size, expected_in_stride, data->height) || !g_size_checked_mul (&out_size, out_stride, data->height)) {\n-            GST_ERROR (\"Invalid resolution or bit depth\");\n-            g_free (data);\n-            *mapping_data = NULL;\n-            gst_clear_caps (&caps);\n-            return NULL;\n-        }\n-    }\n\n",
    "2": "+    gsize expected_in_stride = 0, out_stride = 0;\n+    gsize expected_in_size = 0, out_size = 0;\n\n",
    "3": "-    if (gst_buffer_get_size (buffer) != data->bpp * data->width * data->height) {\n\n+    expected_in_stride = data->bpp * data->width;\n+    out_stride = GST_ROUND_UP_4 (expected_in_stride);\n+    expected_in_size = expected_in_stride * data->height;\n+    out_size = out_stride * data->height;\n+    if (gst_buffer_get_size (buffer) != expected_in_size) {\n\n-    if (data->bpp != 4 || GST_ROUND_UP_4 (data->width * data->bpp) != data->width * data->bpp) {\n\n+    if (data->bpp != 4 || out_stride != expected_in_stride) {\n\n-        ret = gst_buffer_new_and_alloc (GST_ROUND_UP_4 (data->width * data->bpp) * data->height);\n\n+        ret = gst_buffer_new_and_alloc (out_size);\n\n-            outdata += GST_ROUND_UP_4 (data->width * data->bpp);\n-            indata += data->width * data->bpp;\n\n+            outdata += out_stride;\n+            indata += expected_in_stride;\n\n-    expected_in_stride = data->bpp * data->width;\n-    out_stride = GST_ROUND_UP_4 (expected_in_stride);\n-    expected_in_size = expected_in_stride * data->height;\n-    out_size = out_stride * data->height;\n-    if (gst_buffer_get_size (buffer) != expected_in_size) {\n\n+    if (gst_buffer_get_size (buffer) != data->bpp * data->width * data->height) {\n\n-    if (data->bpp != 4 || out_stride != expected_in_stride) {\n\n+    if (data->bpp != 4 || GST_ROUND_UP_4 (data->width * data->bpp) != data->width * data->bpp) {\n\n-        ret = gst_buffer_new_and_alloc (out_size);\n\n+        ret = gst_buffer_new_and_alloc (GST_ROUND_UP_4 (data->width * data->bpp) * data->height);\n\n-            outdata += out_stride;\n-            indata += expected_in_stride;\n\n+            outdata += GST_ROUND_UP_4 (data->width * data->bpp);\n+            indata += data->width * data->bpp;\n\n",
    "4": "-    gsize expected_in_stride = 0, out_stride = 0;\n-    gsize expected_in_size = 0, out_size = 0;\n\n"
}