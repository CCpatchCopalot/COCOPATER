{
    "0": "-    const char *keys = \"[]<>+-,.\";\n-    const char *cidx = strchr (keys, ch);\n\n+    const char *const keys = \"[]<>+-,.\";\n+    const char *const cidx = strchr (keys, ch);\n\n",
    "1": "-    const char *const keys = \"[]<>+-,.\";\n-    const char *const cidx = strchr (keys, ch);\n\n+    const char *keys = \"[]<>+-,.\";\n+    const char *cidx = strchr (keys, ch);\n\n",
    "2": "-    const ut8 *_buf = op->bytes;\n-    const ut64 addr = op->addr;\n\n",
    "3": "-    ut8 *buf = (ut8*)_buf;\n\n+    ut8 *buf = op->bytes;\n+    const ut64 addr = op->addr;\n\n-        {\n\n+        if (len > 1) {\n\n-                if (*p == '[') {\n\n+                switch (*p) {\n+                case '[':\n\n-                    if (lev == -1) {\n-                        dst = addr + (size_t)(p - buf) + 1;\n\n+                    if (lev < 1) {\n+                        size_t delta = p - buf;\n+                        dst = addr + (size_t)delta + 1;\n\n-                }\n-                if (*p == 0x00 || *p == 0xff) {\n\n+                    break;\n+                case 0:\n+                case 0xff:\n\n+    const ut8 *_buf = op->bytes;\n+    const ut64 addr = op->addr;\n\n-    ut8 *buf = op->bytes;\n-    const ut64 addr = op->addr;\n\n+    ut8 *buf = (ut8*)_buf;\n\n-        if (len > 1) {\n\n+        {\n\n-                switch (*p) {\n-                case '[':\n\n+                if (*p == '[') {\n\n-                    break;\n-                case ']':\n\n+                }\n+                if (*p == ']') {\n\n-                    if (lev < 1) {\n-                        size_t delta = p - buf;\n-                        dst = addr + (size_t)delta + 1;\n\n+                    if (lev == -1) {\n+                        dst = addr + (size_t)(p - buf) + 1;\n\n-                    break;\n-                case 0:\n-                case 0xff:\n\n+                }\n+                if (*p == 0x00 || *p == 0xff) {\n\n",
    "4": "-                }\n-                if (*p == ']') {\n\n+                    break;\n+                case ']':\n\n",
    "5": "-                    break;\n\n+#if 0\n\n-#if 0\n\n+                    break;\n\n",
    "6": "+#else\n+                    break;\n+#endif\n\n",
    "7": "-#else\n-                    break;\n-#endif\n\n",
    "8": "-                    ut8 buf[4] = {0};\n-                    r_io_read_at (core->io, op.jump, buf, 4);\n-                    isValidCall = memcmp (buf, \"\\x00\\x00\\x00\\x00\", 4);\n\n+                    ut8 zbuf[4] = {0};\n+                    r_io_read_at (core->io, op.jump, zbuf, 4);\n+                    isValidCall = memcmp (zbuf, \"\\x00\\x00\\x00\\x00\", 4);\n\n",
    "9": "-                    ut8 zbuf[4] = {0};\n-                    r_io_read_at (core->io, op.jump, zbuf, 4);\n-                    isValidCall = memcmp (zbuf, \"\\x00\\x00\\x00\\x00\", 4);\n\n+                    ut8 buf[4] = {0};\n+                    r_io_read_at (core->io, op.jump, buf, 4);\n+                    isValidCall = memcmp (buf, \"\\x00\\x00\\x00\\x00\", 4);\n\n",
    "10": "-    char *out = (input[0] == ' ') ? sdb_querys (db, NULL, 0, input + 1)\n-                : sdb_querys (db, NULL, 0, \"*\");\n\n+    const char *arg = (input[0] == ' ')? input + 1: \"*\";\n+    char *out = sdb_querys (db, NULL, 0, arg);\n\n",
    "11": "-    const char *arg = (input[0] == ' ')? input + 1: \"*\";\n-    char *out = sdb_querys (db, NULL, 0, arg);\n\n+    char *out = (input[0] == ' ') ? sdb_querys (db, NULL, 0, input + 1)\n+                : sdb_querys (db, NULL, 0, \"*\");\n\n"
}