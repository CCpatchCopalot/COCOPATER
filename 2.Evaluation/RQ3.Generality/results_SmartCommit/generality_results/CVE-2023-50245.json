{
    "0": "-                m_pixelBuffer = new float[m_width * m_height];\n-                graySlice = Imf::Slice::Make( Imf::PixelType::FLOAT, m_pixelBuffer, datW, sizeof(float), m_width * sizeof(float), 2, 2);\n\n+                const uint64_t partial_size = (uint64_t)m_width * (uint64_t)m_height;\n+                if (partial_size > 0x7FFFFFFF) {\n+                    throw std::runtime_error( \"The total image size is too large. May be supported in \" \"a future revision.\");\n+                }\n+                m_pixelBuffer.resize(m_width * m_height);\n+                graySlice = Imf::Slice::Make( Imf::PixelType::FLOAT, m_pixelBuffer.data(), datW, sizeof(float), m_width * sizeof(float), 2, 2);\n\n-                const uint64_t partial_size = (uint64_t)m_width * (uint64_t)m_height;\n-                if (partial_size > 0x7FFFFFFF) {\n-                    throw std::runtime_error( \"The total image size is too large. May be supported in \" \"a future revision.\");\n-                }\n-                m_pixelBuffer.resize(m_width * m_height);\n-                graySlice = Imf::Slice::Make( Imf::PixelType::FLOAT, m_pixelBuffer.data(), datW, sizeof(float), m_width * sizeof(float), 2, 2);\n\n+                m_pixelBuffer = new float[m_width * m_height];\n+                graySlice = Imf::Slice::Make( Imf::PixelType::FLOAT, m_pixelBuffer, datW, sizeof(float), m_width * sizeof(float), 2, 2);\n\n",
    "1": "-                m_pixelBuffer = new float[m_width * m_height];\n-                graySlice = Imf::Slice::Make( Imf::PixelType::FLOAT, m_pixelBuffer, datW);\n\n+                m_pixelBuffer.resize(m_width * m_height);\n+                graySlice = Imf::Slice::Make( Imf::PixelType::FLOAT, m_pixelBuffer.data(), datW);\n\n-                m_pixelBuffer.resize(m_width * m_height);\n-                graySlice = Imf::Slice::Make( Imf::PixelType::FLOAT, m_pixelBuffer.data(), datW);\n\n+                m_pixelBuffer = new float[m_width * m_height];\n+                graySlice = Imf::Slice::Make( Imf::PixelType::FLOAT, m_pixelBuffer, datW);\n\n"
}