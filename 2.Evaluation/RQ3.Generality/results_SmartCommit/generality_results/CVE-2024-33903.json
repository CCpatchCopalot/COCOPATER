{
    "0": "-void ACollisionSensor::OnCollisionEvent( AActor *Actor, AActor *OtherActor, FVector NormalImpulse, const FHitResult &Hit) {\n-    if (Actor == nullptr || OtherActor == nullptr) {\n-        return;\n\n+    } else {\n+        UE_LOG(LogCarla, Log, TEXT(\"ACollisionSensor::SetOwner New owner is not valid or you are destroying collision sensor\") );\n\n-    if (NewOwner != nullptr) {\n-        NewOwner->OnActorHit.AddDynamic(this, &ACollisionSensor::OnCollisionEvent);\n\n+    if (IsValid(NewOwner)) {\n+        ACarlaWheeledVehicle* Vehicle = Cast<ACarlaWheeledVehicle>(NewOwner);\n+        if(IsValid(Vehicle)) {\n+            Vehicle->GetMesh()->OnComponentHit.AddDynamic(this, &ACollisionSensor::OnComponentCollisionEvent);\n+        } else {\n+            AWalkerBase* Walker = Cast<AWalkerBase>(NewOwner);\n+            if(IsValid(Walker)) {\n+                Walker->GetMesh()->OnComponentHit.AddDynamic(this, &ACollisionSensor::OnComponentCollisionEvent);\n+            } else {\n+                OnActorHit.AddDynamic(this, &ACollisionSensor::OnActorCollisionEvent);\n\n-    if (IsValid(NewOwner)) {\n-        ACarlaWheeledVehicle* Vehicle = Cast<ACarlaWheeledVehicle>(NewOwner);\n-        if(IsValid(Vehicle)) {\n-            Vehicle->GetMesh()->OnComponentHit.AddDynamic(this, &ACollisionSensor::OnComponentCollisionEvent);\n-        } else {\n-            AWalkerBase* Walker = Cast<AWalkerBase>(NewOwner);\n-            if(IsValid(Walker)) {\n-                Walker->GetMesh()->OnComponentHit.AddDynamic(this, &ACollisionSensor::OnComponentCollisionEvent);\n-            } else {\n-                OnActorHit.AddDynamic(this, &ACollisionSensor::OnActorCollisionEvent);\n\n+    if (NewOwner != nullptr) {\n+        NewOwner->OnActorHit.AddDynamic(this, &ACollisionSensor::OnCollisionEvent);\n\n-    } else {\n-        UE_LOG(LogCarla, Log, TEXT(\"ACollisionSensor::SetOwner New owner is not valid or you are destroying collision sensor\") );\n-    }\n\n+void ACollisionSensor::OnCollisionEvent( AActor *Actor, AActor *OtherActor, FVector NormalImpulse, const FHitResult &Hit) {\n+    if (Actor == nullptr || OtherActor == nullptr) {\n+        return;\n\n",
    "1": "+}\n+void ACollisionSensor::PrePhysTick(float DeltaSeconds) {\n+    Super::PrePhysTick(DeltaSeconds);\n\n",
    "2": "+}\n+void ACollisionSensor::OnCollisionEvent( AActor *Actor, AActor *OtherActor, FVector NormalImpulse, const FHitResult &Hit) {\n+    if (!IsValid(OtherActor)) {\n+        UE_LOG(LogCarla, Error, TEXT(\"ACollisionSensor::OnActorCollisionEvent Error with collided actor; Not valid.\\n Collider actor %s\"), *(Actor->GetName()) );\n+        return;\n+    }\n+    if (!IsValid(Actor)) {\n+        UE_LOG(LogCarla, Error, TEXT(\"ACollisionSensor::OnActorCollisionEvent Error with collider actor; Not valid.\\n Collided actor %s\"), *(OtherActor->GetName()) );\n+        return;\n+    }\n+    uint64_t CurrentFrame = FCarlaEngine::GetFrameCounter();\n\n"
}