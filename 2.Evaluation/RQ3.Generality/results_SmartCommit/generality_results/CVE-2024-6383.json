{
    "0": "+    size_t len_sz;\n\n",
    "1": "-    len = (uint32_t) strlen (str);\n\n+    len_sz = strlen (str);\n+    BSON_ASSERT (bson_in_range_unsigned (uint32_t, len_sz));\n+    len = (uint32_t) len_sz;\n\n-            string->alloc = (uint32_t) bson_next_power_of_two ((size_t) string->alloc);\n\n+            len_sz = bson_next_power_of_two ((size_t) string->alloc);\n+            BSON_ASSERT (len_sz <= UT32_MAX);\n+            string->alloc = (uint32_t) len_sz;\n\n-    size_t len_sz;\n\n-    len_sz = strlen (str);\n-    BSON_ASSERT (bson_in_range_unsigned (uint32_t, len_sz));\n-    len = (uint32_t) len_sz;\n\n+    len = (uint32_t) strlen (str);\n\n-        BSON_ASSERT (string->alloc <= UT32_MAX - len);\n\n-            len_sz = bson_next_power_of_two ((size_t) string->alloc);\n-            BSON_ASSERT (len_sz <= UT32_MAX);\n-            string->alloc = (uint32_t) len_sz;\n\n+            string->alloc = (uint32_t) bson_next_power_of_two ((size_t) string->alloc);\n\n-        BSON_ASSERT (string->alloc >= string->len + len);\n\n-        ret->alloc = (uint32_t) bson_next_power_of_two ((size_t) ret->alloc);\n\n+        len_sz = bson_next_power_of_two ((size_t) ret->alloc);\n+        BSON_ASSERT (len_sz <= UT32_MAX);\n+        ret->alloc = (uint32_t) len_sz;\n\n-    BSON_ASSERT (ret->alloc >= 1);\n\n+    BSON_ASSERT (ret->alloc >= ret->len + 1);\n\n-    size_t len_sz;\n\n-    if (str) {\n-        len_sz = strlen (str);\n-        BSON_ASSERT (len_sz <= UT32_MAX);\n-        ret->len = (uint32_t) len_sz;\n-    } else {\n-        ret->len = 0;\n-    }\n\n+    ret->len = str ? (int) strlen (str) : 0;\n\n-        len_sz = bson_next_power_of_two ((size_t) ret->alloc);\n-        BSON_ASSERT (len_sz <= UT32_MAX);\n-        ret->alloc = (uint32_t) len_sz;\n\n+        ret->alloc = (uint32_t) bson_next_power_of_two ((size_t) ret->alloc);\n\n-    BSON_ASSERT (ret->alloc >= ret->len + 1);\n\n+    BSON_ASSERT (ret->alloc >= 1);\n\n",
    "2": "+        BSON_ASSERT (string->alloc <= UT32_MAX - len);\n\n",
    "3": "+        BSON_ASSERT (string->alloc >= string->len + len);\n\n",
    "4": "+    size_t len_sz;\n\n",
    "5": "-    ret->len = str ? (int) strlen (str) : 0;\n\n+    if (str) {\n+        len_sz = strlen (str);\n+        BSON_ASSERT (len_sz <= UT32_MAX);\n+        ret->len = (uint32_t) len_sz;\n+    } else {\n+        ret->len = 0;\n+    }\n\n"
}